name: "Start emulator"
description: "Start the emulator."
inputs:
  container-prepare:
    description: |
      The container URI to prepare the emulator in, if any (Linux only).

      Generally, this should be the same (glibc version-wise) container used in build
      Otherwise, you may encounter strange issues with linking due to pthread/glibc not matching.
  container-run:
    description: |
      The container URI to run the emulator in, if any (Linux only).

      This can be a newer (glibc version-wise) container than the `container-prepare`, but should not be older.
  command-prepare:
    description: The command to prepare the emulator.
  command-start:
    description: The command to start the emulator.
outputs:
  container:
    description: The container ID of the emulator, if applicable
    value: ${{ steps.start.outputs.container }}

runs:
  using: "composite"
  steps:
    - name: Create emulator dir
      shell: bash
      run: mkdir /tmp/emulator
      
    - name: Prepare emulator (in container)
      if: ${{ (inputs.command-prepare != '') && (inputs.container-prepare != '') }}
      shell: bash
      env:
        SCRIPT: bash -c "${{ inputs.command-prepare }}"
      run: |
        docker run \
          --rm \
          --privileged \
          --interactive \
          --env CI \
          --env SCRIPT \
          --env FERROCENE_HOST \
          --env FERROCENE_TARGETS \
          --env OUTSIDE_FERROUS \
          --env REMOTE_TEST_SERVER_STAGE=2 \
          --env RUST_CONFIGURE_ARGS \
          --workdir /home/ci/project \
          --mount "type=bind,src=$(pwd),dst=/home/ci/project" \
          --mount "type=bind,src=/tmp/emulator,dst=/tmp/emulator" \
          --user $(id -u):$(id -g) \
          --network host \
          ${{ inputs.container-prepare }} \
          ferrocene/ci/run.sh

    - name: Prepare emulator
      if: ${{ (inputs.command-prepare != '') && (inputs.container-prepare == '') }}
      shell: bash
      env:
        SCRIPT: bash -c "${{ inputs.command-prepare }}"
      run: ferrocene/ci/run.sh

    - name: Run emulator in background (in container)
      if: ${{ (inputs.command-start != '') && (inputs.container-run != '') }}
      id: start
      shell: bash
      env:
        SCRIPT: bash -c "${{ inputs.command-start }}"
      run: |
          CONTAINER=$(docker create \
            --privileged \
            --interactive \
            --env CI \
            --env SCRIPT \
            --env FERROCENE_HOST \
            --env FERROCENE_TARGETS \
            --env OUTSIDE_FERROUS \
            --env REMOTE_TEST_SERVER_STAGE=2 \
            --env RUST_CONFIGURE_ARGS \
            --workdir /home/ci/project \
            --mount "type=bind,src=$(pwd),dst=/home/ci/project" \
            --mount "type=bind,src=/tmp/emulator,dst=/tmp/emulator" \
            --user $(id -u):$(id -g) \
            --network host \
            ${{ inputs.container-run }} \
            ferrocene/ci/run.sh)
          
          echo "Container is $CONTAINER"
          echo "container=$CONTAINER" >> $GITHUB_OUTPUT
          docker start $CONTAINER

          sleep 10

          docker logs $CONTAINER

    - name: Run emulator in background
      if: ${{ (inputs.command-start != '') && (inputs.container-run == '') }}
      shell: bash
      env:
        SCRIPT: bash -c "${{ inputs.command-start }}"
      run: ferrocene/ci/run.sh &
