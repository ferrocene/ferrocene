name: Checks
run-name: Checks (${{inputs.host-triple}})

defaults:
  run:
    shell: bash

on:
  workflow_call:
    inputs:
      host-triple:
        type: string
        description: The Rust triple of the host platform
      runner:
        type: string
        description: The GitHub Runner to run on
      use-minio:
        type: boolean
        default: false
        description: If minIO should be used (otherwise, S3 is used)
      build-run-id:
        type: string
        description: The run id of the build workflow
      build-artifact:
        type: string
        description: The artifact from the build workflow
      container:
        type: string
        description: The container URI to run the build in, if any (Linux only)
      environment:
        type: string
    outputs:
      artifact-checks-usage:
        description: The name of the resource usage report artifact for the checks job
        value: ${{ jobs.checks.outputs.artifact-usage }}

jobs:

  checks:
    runs-on: ${{ inputs.runner }}
    environment: ${{ inputs.environment }}
    env:
      ARTIFACT: checks-${{inputs.host-triple}}
      ARTIFACT_USAGE: usage-checks-${{inputs.host-triple}}
      FERROCENE_HOST: ${{ inputs.host-triple }}
    outputs:
      artifact-usage: ${{ env.ARTIFACT_USAGE }}
    steps:
      - uses: actions/checkout@v4
        with:
          # Several tests require a valid upstream commit to be fetched in order to pass
          # while we could possibly set this to a number like '500' and have it work,
          # it also works with '0' always, so this is easiest.
          fetch-depth: '0' # No, you can't make this a number.
      - name: Setup
        uses: ./.github/actions/setup/
        with:
          llvm-subset: 'true'
          build-dependencies: ${{ (inputs.container != '') && 'false' || 'true' }}\

      - name: Restore build cache
        uses: ./.github/actions/restore-build-cache/
        if: ${{ inputs.use-minio == true }}
        env:
          AWS_ENDPOINT_URL: ${{ secrets.CACHE_ENDPOINT_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.CACHE_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CACHE_SECRET_ACCESS_KEY }}
          AWS_CA_BUNDLE: ${{ secrets.CACHE_CA_BUNDLE }}
        with:
          build-artifact: ${{ inputs.build-artifact }}
          build-run-id: ${{ inputs.build-run-id }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume:  ${{github.ref == 'refs/heads/staging' && secrets.AWS_OIDC_GHA_ARN_STAGING || secrets.AWS_OIDC_GHA_ARN_TRYING }}
          role-duration-seconds: 7200

      - name: Restore build cache
        uses: ./.github/actions/restore-build-cache/
        if: ${{ inputs.use-minio == false }}
        with:
          build-artifact: ${{ inputs.build-artifact }}
          build-run-id: ${{ inputs.build-run-id }}
    
      - name: Run licensing checks
        run: |
          uvx reuse --include-submodules lint

      - name: Run misc-checks
        uses: ./.github/actions/run/
        with:
          container: ${{ inputs.container }}
          # See ferrocene/ci/split-tasks.py for a list of tasks executed by this.
          script: |
            ./x.py test $(ferrocene/ci/split-tasks.py test:misc-checks)

      - name: Upload artifacts to S3
        env:
          CIRCLE_SHA1: ${{ github.sha }}
          CIRCLE_JOB: ${{ env.ARTIFACT }}
        run:
          ./ferrocene/ci/scripts/upload-dist-artifacts.sh
    
      - name: Generate usage report
        uses: ./.github/actions/usage-report/
        if: ${{ always() }}
        with:
          artifact: ${{ env.ARTIFACT_USAGE }}
          name: ${{ env.ARTIFACT }}
