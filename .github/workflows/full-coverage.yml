name: Doc host
run-name: Doc

defaults:
  run:
    shell: bash

on:
  workflow_call:
    inputs:
      host-triple:
        type: string
        description: The Rust triple of the host platform
      runner:
        type: string
        description: The GitHub Runner to run on
      use-minio:
        type: boolean
        default: false
        description: If minIO should be used (otherwise, S3 is used)
      build-run-id:
        type: string
        description: The run id of the build workflow
      build-artifact:
        type: string
        description: The artifact from the build workflow
      cache-llvm-uri:
        type: string
        description: The LLVM artifact to use
      container:
        type: string
        description: The container URI to run the build in, if any (Linux only)
      artifacts-bucket:
        type: string
        description: The artifact bucket
      artifacts-prefix:
        type: string
        description: The artifact prefix
      cache-bucket:
        type: string
        description: The cache bucket
      cache-prefix:
        type: string
        description: The cache prefix
      environment:
        type: string
    outputs:
      run-id:
        description: The id of the workflow run
        value: ${{ github.run_id }}
      artifact-coverage:
        description: The name of the coverage job artifact
        value: ${{ jobs.coverage.outputs.artifact-name }}

env:
  ARTIFACTS_BUCKET: ${{ inputs.artifacts-bucket }}
  ARTIFACTS_PREFIX: ${{ inputs.artifacts-prefix }}
  CACHE_BUCKET: ${{ inputs.cache-bucket }}
  CACHE_PREFIX: ${{ inputs.cache-prefix }}

jobs:

  coverage:
    runs-on: ${{ inputs.runner }}
    env:
      ARTIFACT: coverage-${{inputs.host-triple}}
      ARTIFACT_USAGE: usage-coverage-${{inputs.host-triple}}
      FERROCENE_HOST: ${{ inputs.host-triple }}
    outputs:
      artifact-name: ${{ env.ARTIFACT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup/
        with:
          build-dependencies: ${{ (inputs.container != '') && 'false' || 'true' }}
      
      # Note: We do not restore the build cache in this job since `core` needs to be rebuilt and we'll get "multiple candidate" errors
      - name: Get LLVM cache
        if: ${{ inputs.use-minio == true }}
        shell: bash
        run: |
          if [ -z "${AWS_CA_BUNDLE}" ]; then
            unset AWS_CA_BUNDLE
          fi
          uv run ferrocene/ci/scripts/llvm_cache.py download --url ${{ inputs.cache-llvm-uri }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume:  ${{github.ref == 'refs/heads/staging' && secrets.AWS_OIDC_GHA_ARN_STAGING || secrets.AWS_OIDC_GHA_ARN_TRYING }}
          role-duration-seconds: 7200

      # Note: We do not restore the build cache in this job since `core` needs to be rebuilt and we'll get "multiple candidate" errors
      - name: Get LLVM cache
        if: ${{ inputs.use-minio == false }}
        shell: bash
        run: |
          if [ -z "${AWS_CA_BUNDLE}" ]; then
            unset AWS_CA_BUNDLE
          fi
          uv run ferrocene/ci/scripts/llvm_cache.py download --url ${{ inputs.cache-llvm-uri }}

      - name: Run
        uses: ./.github/actions/run/
        env:
          CIRCLE_SHA1: ${{ github.sha }}
          CIRCLE_JOB: ${{ env.ARTIFACT }}
        with:
          container: ${{ inputs.container }}
          script: |
            ./x.py test --coverage=library library/core library/std --no-doc

      - name: Upload artifacts to S3
        env:
          CIRCLE_SHA1: ${{ github.sha }}
          CIRCLE_JOB: ${{ env.ARTIFACT }}
        run:
          ./ferrocene/ci/scripts/upload-dist-artifacts.sh

      - name: Generate usage report
        uses: ./.github/actions/usage-report/
        if: ${{ always() }}
        with:
          artifact: ${{ env.ARTIFACT_USAGE }}
          name: ${{ env.ARTIFACT }}
