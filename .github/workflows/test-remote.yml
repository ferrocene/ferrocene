name: Remote Test
run-name: Remote Test (${{inputs.host-triple}})

defaults:
  run:
    shell: bash

on:
  workflow_call:
    inputs:
      host-triple:
        type: string
        description: The Rust triple of the host platform
      triple:
        type: string
        description: The target triple to test on
      test-host-tools:
        type: boolean
        default: true
        description: If the host tools should be tested (enables the 'test' job)
      test-std:
        type: boolean
        default: true
        description: If the stdlib should be tested (enables the `library-std` job)
      runner:
        type: string
        description: The GitHub Runner to run on
      build-run-id:
        type: string
        description: The run id of the build workflow
      build-artifact:
        type: string
        description: The artifact from the build workflow
      container:
        type: string
        description: The container URI to run the build in, if any (Linux only)
      emulator-container:
        type: string
        description: The container URI to run the build in, if any (Linux only)
      emulator-prepare-command:
        type: string
        description: The command to prepare the emulator
      emulator-start-command:
        type: string
        description: The command to start the emulator
      test-device-addr:
        type: string
        description: The test device address used by the emulator script
      qnx-version:
        type: string
        default: ""
        description: The QNX version (if any) and BuildID (eg '7.1.0-472' for 7.1.0 BuildID 472)
      environment:
        type: string
    outputs:
      artifact-test-usage:
        description: The name of the resource usage report artifact for the test job
        value: ${{ jobs.test.outputs.artifact-usage }}
      artifact-compiletest-usage:
        description: The name of the resource usage report artifact for the compiletest job
        value: ${{ jobs.compiletest.outputs.artifact-usage }}
      artifact-library-usage:
        description: The name of the resource usage report artifact for the library job
        value: ${{ jobs.library.outputs.artifact-usage }}
      artifact-library-std-usage:
        description: The name of the resource usage report artifact for the library-std job
        value: ${{ jobs.library-std.outputs.artifact-usage }}

jobs:

  test:
    if: ${{ inputs.test-host-tools }}
    runs-on: ${{ inputs.runner }}
    environment: ${{ inputs.environment }}
    env:
      ARTIFACT: test-${{inputs.triple}}
      ARTIFACT_USAGE: usage-test-${{inputs.triple}}
      FERROCENE_HOST: ${{ inputs.host-triple }}
      FERROCENE_TARGETS: ${{ inputs.triple }}
    outputs:
      artifact-usage: ${{ env.ARTIFACT_USAGE }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup/
        with:
          build-dependencies: ${{ (inputs.container != '') && 'false' || 'true' }}      

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/hoverbear/gha-migration') && secrets.AZURE_OIDC_GHA_CLIENT_ID_STAGING || secrets.AZURE_OIDC_GHA_CLIENT_ID_TRYING }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Authenicate docker with Azure
        if: ${{ (runner.os == 'Linux') }}
        run: az acr login --name ferrocenecr

      - name: Download QNX
        if: ${{ inputs.qnx-version != '' }}
        id: qnx
        uses: ./.github/actions/qnx/
        with:
          version: ${{ inputs.qnx-version }}

      - name: Restore build cache
        uses: ./.github/actions/restore-build-cache/
        with:
          build-artifact: ${{ inputs.build-artifact }}
          build-run-id: ${{ inputs.build-run-id }}

      - name: Start emulator
        id: start-emulator
        uses: ./.github/actions/start-emulator/
        if: ${{ inputs.emulator-start-command != '' }}
        with:
          container-prepare: ${{ inputs.container }}
          container-run: ${{ inputs.emulator-container }}
          command-prepare: |
            ${{ (inputs.qnx-version != '' && format('export QNX_LICENSE_FILE={0}/license/licenses', steps.qnx.outputs.directory)) || '' }}
            ${{ (inputs.qnx-version != '' && format('source {0}/qnxsdp-env.sh', steps.qnx.outputs.directory)) || '' }}
            ${{ inputs.emulator-prepare-command }}
          command-start: |
            ${{ (inputs.qnx-version != '' && format('export QNX_LICENSE_FILE={0}/license/licenses', steps.qnx.outputs.directory)) || '' }}
            ${{ (inputs.qnx-version != '' && format('source {0}/qnxsdp-env.sh', steps.qnx.outputs.directory)) || '' }}
            ${{ inputs.emulator-start-command }}

      - name: Run
        uses: ./.github/actions/run/
        with:
          test-device-addr: ${{ inputs.test-device-addr }}
          container: ${{ inputs.container }}
          # See ferrocene/ci/split-tasks.py for a list of tasks executed by this.
          script: |
            ${{ (inputs.qnx-version != '' && format('export QNX_LICENSE_FILE={0}/license/licenses', steps.qnx.outputs.directory)) || '' }}
            ${{ (inputs.qnx-version != '' && format('source {0}/qnxsdp-env.sh', steps.qnx.outputs.directory)) || '' }}
            ${{ inputs.qnx-version != '' && 'export RUST_TEST_THREADS=1' || '' }}
            uv run ./x.py --stage 2 test $(ferrocene/ci/split-tasks.py test) --ferrocene-test-one-crate-per-cargo-call

      - name: Output container logs
        if: ${{ inputs.emulator-container != '' && (success() || failure()) }}
        run: docker logs ${{ steps.start-emulator.outputs.container }}

      - name: Generate usage report
        uses: ./.github/actions/usage-report/
        if: ${{ always() }}
        with:
          artifact: ${{ env.ARTIFACT_USAGE }}
          name: ${{ env.ARTIFACT }}

  compiletest:
    runs-on: ${{ inputs.runner }}
    environment: ${{ inputs.environment }}
    env:
      ARTIFACT: test-compiletest-${{inputs.triple}}
      ARTIFACT_USAGE: usage-test-compiletest-${{inputs.triple}}
      FERROCENE_HOST: ${{ inputs.host-triple }}
      FERROCENE_TARGETS: ${{ inputs.triple }}
    outputs:
      artifact-usage: ${{ env.ARTIFACT_USAGE }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup/
        with:
          build-dependencies: ${{ (inputs.container != '') && 'false' || 'true' }}

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/hoverbear/gha-migration') && secrets.AZURE_OIDC_GHA_CLIENT_ID_STAGING || secrets.AZURE_OIDC_GHA_CLIENT_ID_TRYING }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Authenicate docker with Azure
        if: ${{ (runner.os == 'Linux') }}
        run: az acr login --name ferrocenecr

      - name: Restore build cache
        uses: ./.github/actions/restore-build-cache/
        with:
          build-artifact: ${{ inputs.build-artifact }}
          build-run-id: ${{ inputs.build-run-id }}

      - name: Download QNX
        if: ${{ inputs.qnx-version != '' }}
        id: qnx
        uses: ./.github/actions/qnx/
        with:
          version: ${{ inputs.qnx-version }}
      
      - name: Start emulator
        id: start-emulator
        uses: ./.github/actions/start-emulator/
        if: ${{ inputs.emulator-start-command != '' }}
        with:
          container-prepare: ${{ inputs.container }}
          container-run: ${{ inputs.emulator-container }}
          command-prepare: |
            ${{ (inputs.qnx-version != '' && format('export QNX_LICENSE_FILE={0}/license/licenses', steps.qnx.outputs.directory)) || '' }}
            ${{ (inputs.qnx-version != '' && format('source {0}/qnxsdp-env.sh', steps.qnx.outputs.directory)) || '' }}
            ${{ inputs.emulator-prepare-command }}
          command-start: |
            ${{ (inputs.qnx-version != '' && format('export QNX_LICENSE_FILE={0}/license/licenses', steps.qnx.outputs.directory)) || '' }}
            ${{ (inputs.qnx-version != '' && format('source {0}/qnxsdp-env.sh', steps.qnx.outputs.directory)) || '' }}
            ${{ inputs.emulator-start-command }}

      - name: Run
        uses: ./.github/actions/run/
        with:
          test-device-addr: ${{ inputs.test-device-addr }}
          container: ${{ inputs.container }}
          # See ferrocene/ci/split-tasks.py for a list of tasks executed by this.
          script: |
            ${{ (inputs.qnx-version != '' && format('export QNX_LICENSE_FILE={0}/license/licenses', steps.qnx.outputs.directory)) || '' }}
            ${{ (inputs.qnx-version != '' && format('source {0}/qnxsdp-env.sh', steps.qnx.outputs.directory)) || '' }}
            ${{ inputs.qnx-version != '' && 'export RUST_TEST_THREADS=1' || '' }}
            uv run ./x.py --stage 2 test $(ferrocene/ci/split-tasks.py test:compiletest) --ferrocene-test-one-crate-per-cargo-call

      - name: Output container logs
        if: ${{ inputs.emulator-container != '' && (success() || failure()) }}
        run: docker logs ${{ steps.start-emulator.outputs.container }}

      - name: Generate usage report
        uses: ./.github/actions/usage-report/
        if: ${{ always() }}
        with:
          artifact: ${{ env.ARTIFACT_USAGE }}
          name: ${{ env.ARTIFACT }}

  library:
    runs-on: ${{ inputs.runner }}
    environment: ${{ inputs.environment }}
    env:
      ARTIFACT: test-library-${{inputs.triple}}
      ARTIFACT_USAGE: usage-test-library-${{inputs.triple}}
      FERROCENE_HOST: ${{ inputs.host-triple }}
      FERROCENE_TARGETS: ${{ inputs.triple }}
    outputs:
      artifact-usage: ${{ env.ARTIFACT_USAGE }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup/
        with:
          build-dependencies: ${{ (inputs.container != '') && 'false' || 'true' }}

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/hoverbear/gha-migration') && secrets.AZURE_OIDC_GHA_CLIENT_ID_STAGING || secrets.AZURE_OIDC_GHA_CLIENT_ID_TRYING }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Authenicate docker with Azure
        if: ${{ (runner.os == 'Linux') }}
        run: az acr login --name ferrocenecr

      - name: Restore build cache
        uses: ./.github/actions/restore-build-cache/
        with:
          build-artifact: ${{ inputs.build-artifact }}
          build-run-id: ${{ inputs.build-run-id }}

      - name: Download QNX
        if: ${{ inputs.qnx-version != '' }}
        id: qnx
        uses: ./.github/actions/qnx/
        with:
          version: ${{ inputs.qnx-version }}

      - name: Start emulator
        id: start-emulator
        uses: ./.github/actions/start-emulator/
        if: ${{ inputs.emulator-start-command != '' }}
        with:
          container-prepare: ${{ inputs.container }}
          container-run: ${{ inputs.emulator-container }}
          command-prepare: |
            ${{ (inputs.qnx-version != '' && format('export QNX_LICENSE_FILE={0}/license/licenses', steps.qnx.outputs.directory)) || '' }}
            ${{ (inputs.qnx-version != '' && format('source {0}/qnxsdp-env.sh', steps.qnx.outputs.directory)) || '' }}
            ${{ inputs.emulator-prepare-command }}
          command-start: |
            ${{ (inputs.qnx-version != '' && format('export QNX_LICENSE_FILE={0}/license/licenses', steps.qnx.outputs.directory)) || '' }}
            ${{ (inputs.qnx-version != '' && format('source {0}/qnxsdp-env.sh', steps.qnx.outputs.directory)) || '' }}
            ${{ inputs.emulator-start-command }}

      - name: Run
        uses: ./.github/actions/run/
        with:
          test-device-addr: ${{ inputs.test-device-addr }}
          container: ${{ inputs.container }}
          # See ferrocene/ci/split-tasks.py for a list of tasks executed by this.
          script: |
            ${{ (inputs.qnx-version != '' && format('export QNX_LICENSE_FILE={0}/license/licenses', steps.qnx.outputs.directory)) || '' }}
            ${{ (inputs.qnx-version != '' && format('source {0}/qnxsdp-env.sh', steps.qnx.outputs.directory)) || '' }}
            ${{ inputs.qnx-version != '' && 'export RUST_TEST_THREADS=1' || '' }}
            uv run ./x.py --stage 2 test $(ferrocene/ci/split-tasks.py test:library) --ferrocene-test-one-crate-per-cargo-call

      - name: Output container logs
        if: ${{ inputs.emulator-container != '' && (success() || failure()) }}
        run: docker logs ${{ steps.start-emulator.outputs.container }}

      - name: Generate usage report
        uses: ./.github/actions/usage-report/
        if: ${{ always() }}
        with:
          artifact: ${{ env.ARTIFACT_USAGE }}
          name: ${{ env.ARTIFACT }}

  library-std:
    if: ${{ inputs.test-std }}
    runs-on: ${{ inputs.runner }}
    environment: ${{ inputs.environment }}
    env:
      ARTIFACT: test-library-std-${{inputs.triple}}
      ARTIFACT_USAGE: usage-test-library-std-${{inputs.triple}}
      FERROCENE_HOST: ${{ inputs.host-triple }}
      FERROCENE_TARGETS: ${{ inputs.triple }}
    outputs:
      artifact-usage: ${{ env.ARTIFACT_USAGE }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup/
        with:
          build-dependencies: ${{ (inputs.container != '') && 'false' || 'true' }}
        
      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/hoverbear/gha-migration') && secrets.AZURE_OIDC_GHA_CLIENT_ID_STAGING || secrets.AZURE_OIDC_GHA_CLIENT_ID_TRYING }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Authenicate docker with Azure
        if: ${{ (runner.os == 'Linux') }}
        run: az acr login --name ferrocenecr

      - name: Restore build cache
        uses: ./.github/actions/restore-build-cache/
        with:
          build-artifact: ${{ inputs.build-artifact }}
          build-run-id: ${{ inputs.build-run-id }}

      - name: Download QNX
        if: ${{ inputs.qnx-version != '' }}
        id: qnx
        uses: ./.github/actions/qnx/
        with:
          version: ${{ inputs.qnx-version }}

      - name: Start emulator
        id: start-emulator
        uses: ./.github/actions/start-emulator/
        if: ${{ inputs.emulator-start-command != '' }}
        with:
          container-prepare: ${{ inputs.container }}
          container-run: ${{ inputs.emulator-container }}
          command-prepare: |
            ${{ (inputs.qnx-version != '' && format('export QNX_LICENSE_FILE={0}/license/licenses', steps.qnx.outputs.directory)) || '' }}
            ${{ (inputs.qnx-version != '' && format('source {0}/qnxsdp-env.sh', steps.qnx.outputs.directory)) || '' }}
            ${{ inputs.emulator-prepare-command }}
          command-start: |
            ${{ (inputs.qnx-version != '' && format('export QNX_LICENSE_FILE={0}/license/licenses', steps.qnx.outputs.directory)) || '' }}
            ${{ (inputs.qnx-version != '' && format('source {0}/qnxsdp-env.sh', steps.qnx.outputs.directory)) || '' }}
            ${{ inputs.emulator-start-command }}

      - name: Run
        uses: ./.github/actions/run/
        with:
          test-device-addr: ${{ inputs.test-device-addr }}
          container: ${{ inputs.container }}
          # See ferrocene/ci/split-tasks.py for a list of tasks executed by this.
          script: |
            ${{ (inputs.qnx-version != '' && format('export QNX_LICENSE_FILE={0}/license/licenses', steps.qnx.outputs.directory)) || '' }}
            ${{ (inputs.qnx-version != '' && format('source {0}/qnxsdp-env.sh', steps.qnx.outputs.directory)) || '' }}
            ${{ inputs.qnx-version != '' && 'export RUST_TEST_THREADS=1' || '' }}
            uv run ./x.py --stage 2 test $(ferrocene/ci/split-tasks.py test:library-std) --ferrocene-test-one-crate-per-cargo-call

      - name: Output container logs
        if: ${{ inputs.emulator-container != '' && (success() || failure()) }}
        run: docker logs ${{ steps.start-emulator.outputs.container }}

      - name: Generate usage report
        uses: ./.github/actions/usage-report/
        if: ${{ always() }}
        with:
          artifact: ${{ env.ARTIFACT_USAGE }}
          name: ${{ env.ARTIFACT }}