# SPDX-License-Identifier: MIT OR Apache-2.0
# SPDX-FileCopyrightText: The Ferrocene Developers

FROM ubuntu:20.04

RUN apt-get update \
    # Update all the dependencies
    && DEBIAN_FRONTEND=noninteractive apt-get upgrade -y \
    # Install required packages
    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        git \
        build-essential \
        ninja-build \
        openssh-client \
        file \
        gdb \
        curl \
        ca-certificates \
        libedit-dev \
        libssl-dev \
        zlib1g-dev \
        moreutils \
        zstd \
        sudo \
        # Needed to support the QEMU copied over from Ubuntu 22.04 (see above).
        # Replace this with qemu-user-static once we're not on Ubuntu 20.04.
        binfmt-support \
        # Needed for thumbv7em-none-eabihf & armv8r-none-eabihf cross-compilation
        gcc-arm-none-eabi \
        # Needed for the wasm32-unknown-unknown target
        clang \
        # Needed to install AWS CLI during the build:
        unzip \
        # Needed to install git during the build:
        dh-autoreconf \
        libcurl4-gnutls-dev \
        libexpat1-dev \
        gettext \
        libz-dev \
        libssl-dev \
    # Remove files that are not useful in the final image, and can be
    # regenerated by running `apt-get update`
    && rm -rf /var/lib/apt/lists/*

# We need a newer Python than what's included in Ubuntu 20.04, so we have to
# build it from source. Python 3.10.x has been chosen as it's the same minor
# release shipped with Ubuntu 22.04 LTS.
RUN mkdir /tmp/python \
    && cd /tmp/python \
    && curl -OL https://www.python.org/ftp/python/3.10.10/Python-3.10.10.tar.xz \
    && echo "0419e9085bf51b7a672009b3f50dbf1859acdf18ba725d0ec19aa5c8503f0ea3 Python-3.10.10.tar.xz" | sha256sum -c \
    && tar xf Python-3.10.10.tar.xz --strip-components=1 \
    && ./configure \
    && make -j$(nproc) \
    && make install \
    && rm -rf /tmp/python

# The REUSE tool is used to check the licensing status. It's not available in
# the Ubuntu archives so we have to install it with pip.
COPY reuse-requirements.txt /tmp/reuse-requirements.txt
RUN python3 -m pip install -r /tmp/reuse-requirements.txt && \
    rm -rf /tmp/reuse-requirements.txt

# Install a recent NodeJS version, as the one shipped in Ubuntu 20.04 is too
# old to run the rustdoc-js test suite. Note that we cannot install the most
# recent NodeJS LTS release, as it's built with a more recent glibc version
# than the one shipped with Ubuntu 20.04.
#
# If you are reading this comment because you need to upgrade past NodeJS 16,
# you will unfortunately need to change this to build NodeJS from source.
RUN mkdir /opt/nodejs \
    && curl -Lo /tmp/nodejs.tar.xz https://nodejs.org/dist/v16.20.2/node-v16.20.2-linux-arm64.tar.xz \
    && echo "e88d86154d1ce53dc52fd74d79d4bfdf0b05f58c0bb2639adfa36e9378b770c4 /tmp/nodejs.tar.xz" | sha256sum -c \
    && tar xf /tmp/nodejs.tar.xz -C /opt/nodejs --strip-components=1 \
    && rm /tmp/nodejs.tar.xz \
    && /opt/nodejs/bin/node --version
ENV PATH "/opt/nodejs/bin:$PATH"

# Install AWS CLI from the published binaries, as no source tarball is provided
# and the version in the Ubuntu 20.04 archive is too old and doesn't support
# `aws ecr get-login-password`.
RUN curl -Lo /tmp/awscli.zip https://awscli.amazonaws.com/awscli-exe-linux-aarch64-2.12.4.zip \
    && echo "33b1c2a9daab91ae458516e934b1532e2174643aea2ccfa81ab8c5e9d4ed381b  /tmp/awscli.zip" | sha256sum -c \
    && unzip -q -d /tmp/awscli /tmp/awscli.zip \
    && /tmp/awscli/aws/install \
    && rm -rf /tmp/awscli /tmp/awscli.zip

# Install cmake from source code, as the version in the Ubuntu 20.04 archives
# is too old to build the latest LLVM.
RUN curl -Lo /tmp/cmake.tar.gz https://github.com/Kitware/CMake/releases/download/v3.21.1/cmake-3.21.1.tar.gz \
    && echo "fac3915171d4dff25913975d712f76e69aef44bf738ba7b976793a458b4cfed4  /tmp/cmake.tar.gz" | sha256sum -c \
    && mkdir /tmp/cmake \
    && cd /tmp/cmake \
    && tar --strip-components=1 -xzf /tmp/cmake.tar.gz \
    && ./configure \
    && make -j$(nproc) \
    && make install \
    && rm -rf /tmp/cmake /tmp/cmake.tar.gz

# To run chroot inside the container we need sudo access. Copy a configuration
# file allowing all users inside the container to use sudo.
COPY sudoers /etc/sudoers

# Tell programs relying on the system language (like Python) to use UTF-8.
ENV LANG=C.UTF-8

# Automatic compiler detection doesn't work for some targets.
ENV CC_aarch64_unknown_ferrocenecoretest=aarch64-linux-gnu-gcc
ENV CXX_aarch64_unknown_ferrocenecoretest=aarch64-linux-gnu-g++
ENV CC_armv8r_none_eabihf=arm-none-eabi-gcc
ENV CXX_armv8r_none_eabihf=arm-none-eabi-g++

# Automatic CFLAGs do not work for some targets.
ENV CFLAGS_armv8r_none_eabihf="-march=armv8-r -mfpu=fp-armv8"

RUN mkdir /home/ci \
    && addgroup --gid 1000 ci \
    && addgroup --gid 1001 ci-usergroup \
    && adduser --home /home/ci --uid 1000 --gid 1000 --gecos "" --disabled-password ci \
    && adduser --uid 1001 --gid 1001 --gecos "" --disabled-password ci-user \
    && chown -R ci: /home/ci
USER ci
WORKDIR /home/ci
