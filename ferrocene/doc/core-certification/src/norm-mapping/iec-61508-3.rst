.. SPDX-License-Identifier: MIT OR Apache-2.0
   SPDX-FileCopyrightText: The Ferrocene Developers

IEC 61508-3
-----------

4
~

1. The :ref:`Safety Plan - Certification Scope <safety-plan/index:Certification Scope>` specifies and justifies the SIL level.
2. The core library certification excludes the requirement of having an architecture.

   .. include:: ../partials/simple-design.rst

5
~

Covered by :ref:`5.2.1 to 5.2.11 of IEC 61508-1 <norm-mapping/iec-61508-1:5.2.1>`.

6.2.1
~~~~~

Covered by :ref:`6.2 of IEC 61508-1 <norm-mapping/iec-61508-1:6.2>`.

6.2.2
~~~~~

Covered by :doc:`core-certification:safety-plan/index`.

6.2.3
~~~~~

Covered by

- :doc:`qualification-plan:development`
- :doc:`qualification-plan:change-tracking`
- :doc:`qualification-plan:infrastructure`

7.1.2.1-3
~~~~~~~~~

Covered by :ref:`Safety Plan - Lifecycle Phases Overview <safety-plan/index:lifecycle phases overview>`.

7.1.2.4-6
~~~~~~~~~

We diverge from the V-Model, because we are certifying an existing project, not developing the code from scratch.

To explain it in V-model-terms: The Rust project, who is maintaining the upstream core library, performs the requirement specification, the software architecture, the software design, the module design and the coding. Ferrous Systems, consumes the output of those activities from upstream and performs module testing, integration testing, and validation testing on the code received from upstream pull requests.

7.1.2.7
~~~~~~~

Covered by :doc:`core-certification:norm-mapping/iec-61508-3-annex-a`.

7.1.2.8-9
~~~~~~~~~

The following relevant artefacts are included in the deliverables:

- :doc:`Code coverage report <core-certification:code-coverage>`
- :doc:`Test results <qualification-report:rustc/index>`
- :ref:`safety-plan/index:quality of the doc-comments`
- `Certified core library API docs <../../api-docs/core/index.html>`_

7.2.2.1-3
~~~~~~~~~

Covered by :ref:`safety-plan/index:requirements management`.

7.2.2.4
~~~~~~~

N/A

.. include:: ../partials/simple-design.rst

All functions included in the subset are certified SIL2.

7.2.2.5
~~~~~~~

.. include:: ../partials/no-system.rst

7.2.2.6-9
~~~~~~~~~

N/A; the core library is a pure software library. Hardware constraints should be taken into consideration when integrating the certified core library into a hardware environment.

7.2.2.11
~~~~~~~~

N/A; There is no way to configure the core library binary after it is compiled.

7.2.2.12-13
~~~~~~~~~~~

N/A; the core library does not use, and therefore does not configure, any pre-existing software.

7.3.2.1-5
~~~~~~~~~

.. include:: ../partials/core-testing.rst

7.4.2.1
~~~~~~~

The upstream Rust project is responsible for developing the core library.

Ferrous Systems performs verification activities to prove that the core library can be used in safety critical applications up to SIL 2.

Integration into hardware and into a broader system must be performed by the user of the core library.

7.4.2.2-6
~~~~~~~~~

Covered by :ref:`safety-plan/index:doc-comments in the core library`.

7.4.2.7
~~~~~~~

.. include:: ../partials/na-library.rst

7.4.2.8-11
~~~~~~~~~~

All functions in the certified core library are deemed to be of the same SIL.

7.4.2.12-14
~~~~~~~~~~~

.. include:: ../partials/na-library.rst

7.4.3
~~~~~

N/A, therefore no architecture is needed

.. include:: ../partials/simple-design.rst

7.4.4.1-9
~~~~~~~~~

No online tools are used for the core library certification, only offline tools. In :ref:`safety-plan/index:Tool safety assessments` all used tools are specified and justified.

7.4.4.10-11
~~~~~~~~~~~

The certified core library is being build with the safety Qualified Ferrocene compiler, which uses Rust as defined by the Ferrocene language specification. Rust is well matched to the needs of the core library.

7.4.4.12-13
~~~~~~~~~~~

.. include:: ../partials/implicit-coding-standard.rst

7.4.4.14
~~~~~~~~

N/A; Rust macros are not automatic code generation, since they are written in source code.

7.4.4.15-18
~~~~~~~~~~~

All testing infrastructure, including offline support tools, and related configuration, is stored in the GitHub repository, versioned, and subject to the same quality control process as other code.

Infrastructure of Ferrocene is detailed in :doc:`qualification-plan:infrastructure`.

A record of all packages used by the build and test environment of each version of Ferrocene, including the core library, is contained in the ``ferrocene-src`` component, which contains:

* The root directory contains the entire Ferrocene source.
* The ``vendor/rust`` folder contains a copy of the source of each Rust dependency for Ferrocene in a format suitable for use with ``x.py``.
* The ``vendor/uv`` folder contains a copy of the source of each Python dependency for Ferrocene in a format suitable for using with ``uv``.
* The ``vendor/build-environment`` folder contains a comprehensive list of all distribution provided packages and their versions, as well as the hashes and URLs of all additional packages used (versions included).

This component is available to all customers and contains everything necessary to reproduce releases of Ferrocene.

7.4.4.19
~~~~~~~~

The "Technical Lead" is responsible for making or approving technical decisions, including which tools to use and how they are going to be configured.

7.4.5.1-2
~~~~~~~~~

See :ref:`history:contributing to upstream` for the upstream development and quality management process.

Ferrous Systems monitors upstream doc-comments, used as requirements and design, and verifies them for each pull request by running the full test suite.

7.4.5.3-5
~~~~~~~~~

.. include:: ../partials/simple-design.rst

7.4.6
~~~~~

All upstream Rust code is reviewed by a documented team of appointed Rust experts, and heavily tested, before being merged. Changes are reviewed by an expert who was not involved in the change. Test results and review evidence are public. Ferrous Systems tests that code for correctness on all qualified targets.

7.4.7-8
~~~~~

.. include:: ../partials/core-testing.rst

7.5
~~~

.. include:: ../partials/core-testing.rst

7.6
~~~

See 7.8.

7.7.1
~~~~~

Objective met.

7.7.2.1-4
~~~~~~~~~

.. include:: ../partials/core-testing.rst

7.7.2.5-6
~~~~~~~~~

The ``corestests`` test suite specifies all test cases and expected results in source code.

7.7.2.7-9
~~~~~~~~~

.. include:: ../partials/core-testing.rst

7.8
~~~

Covered by

- :doc:`qualification-plan:development`
- :doc:`internal-procedures:upstream-pulls`

7.9.1
~~~~~

Objective met.

7.9.2.1-7
~~~~~~~~~

.. include:: ../partials/core-testing.rst

7.9.2.8
~~~~~~~

N/A; There is no system, only software requirements.

7.9.2.9
~~~~~~~

N/A; There is no architecture design.

7.9.2.10-13
~~~~~~~~

.. include:: ../partials/core-testing.rst

7.9.2.14
~~~~~~~~

N/A; Timing performance depends on the system requirements, which are unknown during the certification phase.

8.1-3
~~~~~

Certification is carried out by TÜV SÜD, an independent assessment body.
