.. SPDX-License-Identifier: MIT OR Apache-2.0
   SPDX-FileCopyrightText: The Ferrocene Developers

Working on the documentation
============================

Qualification documents are built with Sphinx, and their source code is located
in the ``ferrocene/doc`` folder inside the Ferrocene repository. For example,
the source of the Safety Manual is located in ``ferrocene/doc/safety-manual``.

The Ferrocene build system takes care of building and cross-linking the
documentation, including downloading all the required dependencies. Building
the documents outside of the Ferrocene build system (including building them
with the standard Sphinx CLI) is not supported and will likely not work.

This section of the Internal Procedures contains documentation on how to work
on the documentation. Quality management procedures are available in the
:doc:`qualification-plan:development`.

Building documents
------------------

You can build a qualification document by passing its path to the Ferrocene
build system:

.. code-block:: text

   ./x doc ferrocene/doc/$name

You can also build multiple documents at the same time by passing all of their
paths:

.. code-block:: text

   ./x doc ferrocene/doc/$foo ferrocene/doc/$bar ferrocene/doc/$baz

If you want to build all the documentation generated with Sphinx (for example
if you need to ensure cross-document links work, or you need to test an
extension change across all documents) you can run:

.. code-block:: text

   ./x doc ferrocene/doc

If you want to build all of the available documentation, including the standard
library docs and documentation from upstream, you can omit the path:

.. code-block:: text

   ./x doc

The build system will output the path containing the resulting documents. You
can also open the built documents in your browser by passing the ``--open``
flag:

.. code-block:: text

   ./x doc ferrocene/doc/$foo --open

If you are making frequent changes to the contents of a document, the
``--serve`` flag will continuously watch for changes in the file system and
rebuild content as needed. It also starts a local web server with automatic
reloading of the changes in the browser:

.. code-block:: text

   ./x doc ferrocene/doc/$foo --serve

.. caution::

   The ``--serve`` flag is only available for documents built with Sphinx, and
   it will not do anything for other kinds of documentation (like mdBook or
   rustdoc). It also only supports serving a *single* Sphinx document: if you
   attempt to serve more than one at the time it will error out.

When you are working on Sphinx extensions, the ``--debug-sphinx`` flag will
change the configuration to aid debugging, by running only one builder job at
the time and showing exception tracebacks:

.. code-block:: text

   ./x doc ferrocene/doc/$foo --debug-sphinx

.. note::

   Sphinx features automatic dependency tracking and should rebuild only the
   files you actually changed. Dependency tracking doesn't work when the
   implementation of extensions is changed: in those cases you will want to
   pass the ``--fresh`` flag, which does a fresh build ignoring caches:

   .. code-block:: text

      ./x doc ferrocene/doc/$foo --fresh

.. _test-outcomes:

Test outcomes
-------------

Some of our documents, like the :doc:`qualification-report:tests/index` page,
need to know which tests were executed and ignored to generate parts of the
content. We call this information "test outcomes". While not strictly required
to build the docs, not providing them will result in some information being
omitted, and warnings being rendered in the generated content mentioning the
lack of test outcomes.

Test outcomes consist of a collection of JSON files produced by the build
system's "build metrics" feature. They are usually generated by CI, but it is
possible to also generate them locally by setting the ``build.metrics = true``
option in ``config.toml``.

The easiest way to inject test outcomes into the built documentation is to
instruct the build system to automatically download the latest available copy
of the test outcomes built by CI. People with access to the Ferrocene AWS account can do so
by adding this to their ``config.toml``:

.. code-block:: toml

   ferrocene.test-outcomes = "download-ci"

Another way is to manually download a copy of the test outcomes from `the
releases download portal <https://releases.ferrocene.dev>`_ (look for a tarball
named ``ferrocene-test-outcomes`` in the release you care about), extract the
tarball in a directory on disk, and add this snippet to ``config.toml``:

.. code-block:: toml

   ferrocene.test-outcomes = "custom"
   ferrocene.test-outcomes-dir = "path/to/extracted/tarball/share/ferrocene/test-outcomes"

.. note::

   When configuring a custom path for the test outcomes, make sure you choose
   the path actually containing the JSON files. In downloaded tarballs, that is
   the ``share/ferrocene/test-outcomes`` directory inside the tarball.
