searchState.loadedDescShard("core", 0, "The Rust Core Library\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nMemory allocation APIs\nA fixed-size array, denoted <code>[T; N]</code>, for the element type, <code>T</code>…\nUtilities for the array primitive type.\nReturns a mutable slice containing the entire array. …\nReturns a slice containing the entire array. Equivalent to …\nAsserts that a boolean expression is <code>true</code> at runtime.\nChecks that the preconditions of an unsafe function are …\nUnstable module containing the unstable <code>autodiff</code> macro.\nThe boolean type.\nimpl bool {}\nShareable mutable containers.\nEvaluates boolean combinations of configuration flags at …\nThe <code>Clone</code> trait for types that cannot be ‘implicitly …\nUtilities for comparing and ordering values.\nExpands to the column number at which it was invoked.\nCauses compilation to fail with the given error message …\nConcatenates literals into a static string slice.\nConcatenates literals into a byte slice.\nConcatenates identifiers into one identifier.\nSame as <code>format_args</code>, but can be used in some const …\nTraits for conversions between types.\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nThe <code>Default</code> trait for types with a default value.\nReturns the default value of <code>0</code>\nInspects an environment variable at compile time.\nA 32-bit floating-point type (specifically, the “binary32…\nA 64-bit floating-point type (specifically, the “binary64…\nExpands to the file name in which it was invoked.\nUtilities for formatting and printing strings.\nConstructs parameters for the other string-formatting …\nSame as <code>format_args</code>, but adds a newline in the end.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHints to compiler that affects how code should be emitted …\nThe 128-bit signed integer type.\nThe 16-bit signed integer type.\nThe 32-bit signed integer type.\nThe 64-bit signed integer type.\nThe 8-bit signed integer type.\nParses a file as an expression or an item according to the …\nIncludes a file as a reference to a byte array.\nIncludes a UTF-8 encoded file as a string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompiler intrinsics.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some unsigned …\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some unsigned …\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some unsigned …\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some unsigned …\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some unsigned …\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some unsigned …\nThe pointer-sized signed integer type.\nComposable external iteration.\nExpands to the line number on which it was invoked.\nPrints passed tokens into the standard output.\nPrimitive traits and types representing basic properties …\nReturns whether the given expression matches the provided …\nBasic functions for dealing with memory.\nExpands to a string that represents the current module …\nNumeric traits and functions for the built-in numeric …\nOverloadable operators.\nOptional values.\nOptionally inspects an environment variable at compile …\nPanic support in the standard library.\nFIXME(pvdrz): docs\nPanic support for core\nThe core prelude\nA fixed-size array, denoted <code>[T; N]</code>, for the element type, <code>T</code>…\nThe boolean type.\nA 32-bit floating-point type (specifically, the “binary32…\nA 64-bit floating-point type (specifically, the “binary64…\nThe 128-bit signed integer type.\nThe 16-bit signed integer type.\nThe 32-bit signed integer type.\nThe 64-bit signed integer type.\nThe 8-bit signed integer type.\nThe pointer-sized signed integer type.\nReferences, <code>&amp;T</code> and <code>&amp;mut T</code>.\nThe 128-bit unsigned integer type.\nThe 16-bit unsigned integer type.\nThe 32-bit unsigned integer type.\nThe 64-bit unsigned integer type.\nThe 8-bit unsigned integer type.\nThe pointer-sized unsigned integer type.\nManually manage memory through raw pointers.\nReferences, <code>&amp;T</code> and <code>&amp;mut T</code>.\nError handling with the <code>Result</code> type.\nStringifies its arguments.\nSynchronization primitives\nReturns <code>Some(f())</code> if the <code>bool</code> is <code>true</code>, or <code>None</code> otherwise.\nReturns <code>Some(t)</code> if the <code>bool</code> is <code>true</code>, or <code>None</code> otherwise.\nEnables or disables tracing functionality used for …\nThe 128-bit unsigned integer type.\nThe 16-bit unsigned integer type.\nThe 32-bit unsigned integer type.\nThe 64-bit unsigned integer type.\nThe 8-bit unsigned integer type.\nProvides the <code>assert_unsafe_precondition</code> macro as well as …\nThe pointer-sized unsigned integer type.\nLayout of a block of memory.\nThe minimum byte alignment for a memory block of this …\nReturns the argument unchanged.\nCreates a layout, bypassing all checks.\nCalls <code>U::from(self)</code>.\nConstructs a <code>Layout</code> suitable for holding a value of type <code>T</code>.\nThe minimum size in bytes for a memory block of this …\nThe core primitive for interior mutability in Rust.\nReturns the argument unchanged.\nGets a mutable pointer to the wrapped value.\nReturns a mutable reference to the underlying data.\nCalls <code>U::from(self)</code>.\nUnwraps the value, consuming the cell.\nConstructs a new instance of <code>UnsafeCell</code> which will wrap …\nA common trait that allows explicit creation of a …\nDerive macro generating an impl of the trait <code>Clone</code>.\nReturns a duplicate of the value.\nPerforms copy-assignment from <code>source</code>.\nImplementations of <code>Clone</code> for primitive types.\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nAn ordering where a compared value is equal to another.\nAn ordering where a compared value is greater than another.\nAn ordering where a compared value is less than another.\nTrait for types that form a total order.\nAn <code>Ordering</code> is the result of a comparison between two …\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nTrait for types that form a partial order.\nSame as <code>__chaining_lt</code>, but for <code>&gt;=</code> instead of <code>&lt;</code>.\nSame as <code>__chaining_lt</code>, but for <code>&gt;</code> instead of <code>&lt;</code>.\nSame as <code>__chaining_lt</code>, but for <code>&lt;=</code> instead of <code>&lt;</code>.\nIf <code>self == other</code>, returns <code>ControlFlow::Continue(())</code>. …\nRestrict a value to a certain interval.\nThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nReturns the argument unchanged.\nTests greater than or equal to (for <code>self</code> and <code>other</code>) and is …\nTests greater than (for <code>self</code> and <code>other</code>) and is used by the …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the ordering is the <code>Equal</code> variant.\nReturns <code>true</code> if the ordering is either the <code>Greater</code> or <code>Equal</code>…\nReturns <code>true</code> if the ordering is the <code>Greater</code> variant.\nReturns <code>true</code> if the ordering is either the <code>Less</code> or <code>Equal</code> …\nReturns <code>true</code> if the ordering is the <code>Less</code> variant.\nReturns <code>true</code> if the ordering is not the <code>Equal</code> variant.\nTests less than or equal to (for <code>self</code> and <code>other</code>) and is …\nTests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> …\nCompares and returns the maximum of two values.\nCompares and returns the maximum of two values.\nCompares and returns the minimum of two values.\nCompares and returns the minimum of two values.\nTests for <code>!=</code>. The default implementation is almost always …\nThis method returns an ordering between <code>self</code> and <code>other</code> …\nReverses the <code>Ordering</code>.\nChains two orderings.\nUsed to do a cheap mutable-to-mutable reference conversion.\nUsed to do a cheap reference-to-reference conversion.\nThe type returned in the event of a conversion error.\nThe type returned in the event of a conversion error.\nUsed to do value-to-value conversions while consuming the …\nThe error type for errors that can never happen.\nA value-to-value conversion that consumes the input value. …\nSimple and safe type conversions that may fail in a …\nAn attempted conversion that consumes <code>self</code>, which may or …\nConverts this type into a mutable reference of the …\nConverts this type into a shared reference of the (usually …\nConverts to this type from the input type.\nReturns the argument unchanged.\nThe identity function.\nConverts this type into the (usually inferred) input type.\nCalls <code>U::from(self)</code>.\nPerforms the conversion.\nPerforms the conversion.\nA trait for giving a type a useful default value.\nReturns the “default value” for a type.\nInforms the compiler that the site which is calling this …\nA type for atomic ordering parameters for intrinsics. This …\nAborts the execution of the process.\nLowers in MIR to <code>Rvalue::Aggregate</code> with …\nBitwise and with the current value, returning the previous …\nBitwise and with the current value, returning the previous …\nBitwise and with the current value, returning the previous …\nBitwise and with the current value, returning the previous …\nBitwise and with the current value, returning the previous …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nLoads the current value of the pointer. <code>T</code> must be an …\nBitwise nand with the current value, returning the …\nBitwise nand with the current value, returning the …\nBitwise nand with the current value, returning the …\nBitwise nand with the current value, returning the …\nBitwise nand with the current value, returning the …\nBitwise or with the current value, returning the previous …\nBitwise or with the current value, returning the previous …\nBitwise or with the current value, returning the previous …\nBitwise or with the current value, returning the previous …\nBitwise or with the current value, returning the previous …\nStores the value at the specified memory location. <code>T</code> must …\nStores the value at the specified memory location. <code>T</code> must …\nStores the value at the specified memory location. <code>T</code> must …\nMaximum with the current value using an unsigned …\nMaximum with the current value using an unsigned …\nMaximum with the current value using an unsigned …\nMaximum with the current value using an unsigned …\nMaximum with the current value using an unsigned …\nMinimum with the current value using an unsigned …\nMinimum with the current value using an unsigned …\nMinimum with the current value using an unsigned …\nMinimum with the current value using an unsigned …\nMinimum with the current value using an unsigned …\nAdds to the current value, returning the previous value. <code>T</code> …\nAdds to the current value, returning the previous value. <code>T</code> …\nAdds to the current value, returning the previous value. <code>T</code> …\nAdds to the current value, returning the previous value. <code>T</code> …\nAdds to the current value, returning the previous value. <code>T</code> …\nStores the value at the specified memory location, …\nStores the value at the specified memory location, …\nStores the value at the specified memory location, …\nStores the value at the specified memory location, …\nStores the value at the specified memory location, …\nBitwise xor with the current value, returning the previous …\nBitwise xor with the current value, returning the previous …\nBitwise xor with the current value, returning the previous …\nBitwise xor with the current value, returning the previous …\nBitwise xor with the current value, returning the previous …\nSubtract from the current value, returning the previous …\nSubtract from the current value, returning the previous …\nSubtract from the current value, returning the previous …\nSubtract from the current value, returning the previous …\nSubtract from the current value, returning the previous …\nVarious traits used to restrict intrinsics to …\nSelects which function to call depending on the context.\nA macro to make it easier to invoke const_eval_select. Use …\nReturns the number of bits set in an integer type <code>T</code>\nReturns the value of the discriminant for the variant in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe minimum alignment of a type.\nSee documentation of <code>&lt;*const T&gt;::guaranteed_eq</code> for details.\nThis is an implementation detail of <code>crate::ptr::read</code> and …\nThe size of a type in bytes.\nDoes a three-way comparison between the two arguments, …\nReinterprets the bits of a value of one type as another …\nReturns whether we should perform some UB-checking at …\nReturns the result of an unchecked subtraction, resulting …\nInforms the optimizer that this point in the code is not …\nThis is an implementation detail of <code>crate::ptr::write</code> and …\nTypes with a built-in dereference operator in runtime MIR, …\nWhich kind of iterator are we turning this into?\nConversion into an <code>Iterator</code>.\nThe type of the elements being iterated over.\nCreates an iterator from a value.\nThe type of the elements being iterated over.\nA trait for dealing with iterators.\nAdvances the iterator and returns the next value.\nDefinitions of built-in macros.\nAttribute macro applied to a function to register it as a …\nThis macro uses forward-mode automatic differentiation to …\nThis macro uses reverse-mode automatic differentiation to …\nAttribute macro applied to a function to turn it into a …\nKeeps the item it’s applied to if the passed path is …\nExpands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code …\nAttribute macro applied to a function to give it a …\nAttribute macro applied to a function to give it a …\nProvide a list of type aliases and other …\nUnstable placeholder for deref patterns.\nAttribute macro used to apply derive macros.\nAttribute macro used to apply derive macros for …\nAttribute macro applied to a static to register it as a …\nAttribute macro applied to a function to turn it into a …\nAn implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …\nUnstable placeholder for type ascription.\nDerive macro generating an impl of the trait <code>ConstParamTy</code>.\nA marker for types which can be used as types of <code>const</code> …\nTypes whose values can be duplicated simply by copying …\nDerive macro generating an impl of the trait <code>Copy</code>.\nA marker for types that can be dropped.\nFIXME: docs\nCompiler-internal trait used to indicate the type of enum …\nUsed to determine whether a type contains any <code>UnsafeCell</code> …\nZero-sized type used to mark things that “act like” …\nTypes that can be transferred across thread boundaries.\nTypes with a constant size known at compile time.\nRequired trait for constants used in pattern matches.\nTypes for which it is safe to share references between …\nA marker for tuple types.\nTypes that can be “unsized” to a dynamically-sized …\nA marker for types which can be used as types of <code>const</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nImplements a given marker trait for multiple types at the …\n<code>true</code> if this type requires no storage. <code>false</code> if its size …\nThe largest safe length for a <code>[Self]</code>.\nProvides associated constants for various useful …\nReturns the ABI-required minimum alignment of a type in …\nDisposes of a value.\nReturns the size of a type in bytes.\nReinterprets the bits of a value of one type as another …\nThe addition operator <code>+</code>.\nThe addition assignment operator <code>+=</code>.\nThe division operator <code>/</code>.\nThe division assignment operator <code>/=</code>.\nThe multiplication operator <code>*</code>.\nThe multiplication assignment operator <code>*=</code>.\nThe unary negation operator <code>-</code>.\nThe resulting type after applying the <code>+</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nThe resulting type after applying the <code>*</code> operator.\nThe resulting type after applying the <code>/</code> operator.\nThe resulting type after applying the <code>%</code> operator.\nThe remainder operator <code>%</code>.\nThe remainder assignment operator <code>%=</code>.\nThe subtraction operator <code>-</code>.\nThe subtraction assignment operator <code>-=</code>.\nPerforms the <code>+</code> operation.\nPerforms the <code>+=</code> operation.\nPerforms the <code>/</code> operation.\nPerforms the <code>/=</code> operation.\nPerforms the <code>*</code> operation.\nPerforms the <code>*=</code> operation.\nPerforms the unary <code>-</code> operation.\nPerforms the <code>%</code> operation.\nPerforms the <code>%=</code> operation.\nPerforms the <code>-</code> operation.\nPerforms the <code>-=</code> operation.\nThe bitwise AND operator <code>&amp;</code>.\nThe bitwise AND assignment operator <code>&amp;=</code>.\nThe bitwise OR operator <code>|</code>.\nThe bitwise OR assignment operator <code>|=</code>.\nThe bitwise XOR operator <code>^</code>.\nThe bitwise XOR assignment operator <code>^=</code>.\nThe unary logical negation operator <code>!</code>.\nThe resulting type after applying the <code>!</code> operator.\nThe resulting type after applying the <code>&amp;</code> operator.\nThe resulting type after applying the <code>|</code> operator.\nThe resulting type after applying the <code>^</code> operator.\nThe resulting type after applying the <code>&lt;&lt;</code> operator.\nThe resulting type after applying the <code>&gt;&gt;</code> operator.\nThe left shift operator <code>&lt;&lt;</code>. Note that because this trait …\nThe left shift assignment operator <code>&lt;&lt;=</code>.\nThe right shift operator <code>&gt;&gt;</code>. Note that because this trait …\nThe right shift assignment operator <code>&gt;&gt;=</code>.\nPerforms the <code>&amp;</code> operation.\nPerforms the <code>&amp;=</code> operation.\nPerforms the <code>|</code> operation.\nPerforms the <code>|=</code> operation.\nPerforms the <code>^</code> operation.\nPerforms the <code>^=</code> operation.\nPerforms the unary <code>!</code> operation.\nPerforms the <code>&lt;&lt;</code> operation.\nPerforms the <code>&lt;&lt;=</code> operation.\nPerforms the <code>&gt;&gt;</code> operation.\nPerforms the <code>&gt;&gt;=</code> operation.\nExit the operation without running subsequent phases.\nMove on to the next phase of the operation as normal.\nUsed to tell an operation whether it should exit early or …\nConverts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …\nConverts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExtracts the value <code>T</code> that is wrapped by <code>ControlFlow&lt;T, T&gt;</code>.\nReturns <code>true</code> if this is a <code>Break</code> variant.\nReturns <code>true</code> if this is a <code>Continue</code> variant.\nMaps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;T, C&gt;</code> by applying a …\nMaps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;B, T&gt;</code> by applying a …\nUsed for immutable dereferencing operations, like <code>*v</code>.\nUsed for mutable dereferencing operations, like in <code>*v = 1;</code>.\nPerma-unstable marker trait. Indicates that the type has a …\nIndicates that a struct can be used as a method receiver, …\nIndicates that a struct can be used as a method receiver. …\nThe resulting type after dereferencing.\nThe target type on which the method may be called.\nDereferences the value.\nMutably dereferences the value.\nCustom code within the destructor.\nExecutes the destructor for this type.\nThe version of the call operator that takes an immutable …\nThe version of the call operator that takes a mutable …\nThe version of the call operator that takes a by-value …\nThe returned type after the call operator is used.\nPerforms the call operation.\nPerforms the call operation.\nPerforms the call operation.\nAn endpoint of a range of keys.\nThe range is bounded exclusively from above and is …\nThe range is bounded inclusively from above and is …\nAn exclusive bound.\nAn inclusive bound.\nUsed to convert a range into start and end bounds, …\n<code>OneSidedRange</code> is implemented for built-in range types that …\nAn internal helper for <code>split_off</code> functions indicating …\nA (half-open) range bounded inclusively below and …\n<code>RangeBounds</code> is implemented by Rust’s built-in range …\nA range only bounded inclusively below (<code>start..</code>).\nAn unbounded range (<code>..</code>).\nA range bounded inclusively below and above (<code>start..=end</code>).\nA range only bounded exclusively above (<code>..end</code>).\nA range only bounded inclusively above (<code>..=end</code>).\nThe range is bounded inclusively from below and is …\nAn infinite endpoint. Indicates that there is no bound in …\nConverts from <code>&amp;mut Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;mut T&gt;</code>.\nConverts from <code>&amp;Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;T&gt;</code>.\nAn internal-only helper function for <code>split_off</code> and …\nMap a <code>Bound&lt;&amp;T&gt;</code> to a <code>Bound&lt;T&gt;</code> by cloning the contents of …\nReturns the upper bound of the range (inclusive).\nThe upper bound of the range (exclusive).\nThe upper bound of the range (exclusive).\nThe upper bound of the range (inclusive)\nEnd index bound.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this range into the start and end bounds. Returns …\nMaps a <code>Bound&lt;T&gt;</code> to a <code>Bound&lt;U&gt;</code> by applying a function to …\nCreates a new inclusive range. Equivalent to writing …\nReturns the lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nStart index bound.\nUsed to specify which residuals can be converted into …\nAn adapter for implementing non-try methods via the <code>Try</code> …\nThe type of the value produced by <code>?</code> when <em>not</em> …\nAllows retrieving the canonical type implementing <code>Try</code> that …\nThe type of the value passed to <code>FromResidual::from_residual</code>\nThe <code>?</code> operator and <code>try {}</code> blocks.\nThe “return” type of this meta-function.\nUsed in <code>?</code> to decide whether the operator should produce a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs the type from its <code>Output</code> type.\nConstructs the type from a compatible <code>Residual</code> type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrait that indicates that this is a pointer or a wrapper …\n<code>DispatchFromDyn</code> is used in the implementation of …\nAn iterator over a reference to the <code>Some</code> variant of an …\nAn iterator over a mutable reference to the <code>Some</code> variant …\nNo value.\nThe <code>Option</code> type. See the module level documentation for …\nSome value of type <code>T</code>.\nReturns <code>None</code> if the option is <code>None</code>, otherwise returns <code>optb</code>.\nReturns <code>None</code> if the option is <code>None</code>, otherwise calls <code>f</code> with …\nConverts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to …\nConverts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to …\nConverts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.\nConverts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.\nMaps an <code>Option&lt;&amp;mut T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the …\nMaps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the contents …\nMaps an <code>Option&lt;&amp;mut T&gt;</code> to an <code>Option&lt;T&gt;</code> by copying the …\nMaps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by copying the contents …\nReturns <code>None</code>.\nReturns <code>None</code> if the option is <code>None</code>, otherwise calls …\nConverts from <code>Option&lt;Option&lt;T&gt;&gt;</code> to <code>Option&lt;T&gt;</code>.\nConverts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>\nConverts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.\nReturns the argument unchanged.\nMoves <code>val</code> into a new <code>Some</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls a function with a reference to the contained value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the option is a <code>None</code> or the value inside …\nReturns <code>true</code> if the option is a <code>Some</code> value.\nReturns <code>true</code> if the option is a <code>Some</code> and the value inside …\nReturns an iterator over the possibly contained value.\nReturns a mutable iterator over the possibly contained …\nMaps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a …\nReturns the provided default result (if none), or applies …\nMaps an <code>Option&lt;T&gt;</code> to a <code>U</code> by applying function <code>f</code> to the …\nComputes a default function result (if none), or applies a …\nTransforms the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping …\nTransforms the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping …\nReturns the option if it contains a value, otherwise …\nReturns the option if it contains a value, otherwise calls …\nTransposes an <code>Option</code> of a <code>Result</code> into a <code>Result</code> of an <code>Option</code>…\nReturns the contained <code>Some</code> value or a provided default.\nReturns the contained <code>Some</code> value or a default.\nReturns the contained <code>Some</code> value or computes it from a …\nUnzips an option containing a tuple of two options.\nReturns <code>Some</code> if exactly one of <code>self</code>, <code>optb</code> is <code>Some</code>, …\nZips <code>self</code> with another <code>Option</code>.\nZips <code>self</code> and another <code>Option</code> with function <code>f</code>.\nA struct containing information about the location of a …\nReturns the column from which the panic originated.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the line number from which the panic originated.\nA struct providing information about a panic.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe underlying implementation of core’s <code>panic!</code> macro …\nThe entry point for panicking with a formatted message.\nLike <code>panic</code>, but without unwinding and track_caller to …\nLike <code>panic_fmt</code>, but for non-unwinding panics.\nThe 2015 version of the core prelude.\nThe 2018 version of the core prelude.\nThe 2021 version of the core prelude.\nThe 2024 version of the core prelude.\nThe first version of the core prelude.\nCreates a null raw pointer.\nCreates a null mutable raw pointer.\nReads the value from <code>src</code> without moving it. This leaves the\nCreates a pointer with the given address and no provenance.\nCreates a pointer with the given address and no provenance.\nOverwrites a memory location with the given value without …\nA type storing a <code>usize</code> which is a power of two, and thus …\nReturns the alignment as a <code>usize</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an <code>Alignment</code> from a <code>usize</code>, or returns <code>None</code> if it’…\nCreates an <code>Alignment</code> from a power-of-two <code>usize</code>.\nThe type for metadata in pointers and references to <code>Self</code>.\nProvides the pointer metadata type of any pointed-to type.\nPointers to types implementing this trait alias are …\nForms a (possibly-wide) raw pointer from a data pointer …\nPerforms the same functionality as <code>from_raw_parts</code>, except …\nContains the error value\nContains the success value\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nReturns <code>res</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …\nCalls <code>op</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …\nConverts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;Result&lt;T, E&gt;</code>) to …\nConverts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;mut Result&lt;T, E&gt;</code>) to …\nConverts from <code>&amp;mut Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;mut T, &amp;mut E&gt;</code>.\nConverts from <code>&amp;Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;T, &amp;E&gt;</code>.\nMaps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …\nMaps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …\nMaps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …\nMaps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …\nConverts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;E&gt;</code>.\nReturns the argument unchanged.\nCalls a function with a reference to the contained value …\nCalls a function with a reference to the contained value …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the result is <code>Err</code>.\nReturns <code>true</code> if the result is <code>Err</code> and the value inside of …\nReturns <code>true</code> if the result is <code>Ok</code>.\nReturns <code>true</code> if the result is <code>Ok</code> and the value inside of …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;U, E&gt;</code> by applying a function …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function …\nReturns the provided default (if <code>Err</code>), or applies a …\nMaps a <code>Result&lt;T, E&gt;</code> to a <code>U</code> by applying function <code>f</code> to the …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>U</code> by applying fallback function …\nConverts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;T&gt;</code>.\nReturns <code>res</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …\nCalls <code>op</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …\nTransposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a <code>Result</code>…\nReturns the contained <code>Ok</code> value or a provided default.\nReturns the contained <code>Ok</code> value or a default\nReturns the contained <code>Ok</code> value or computes it from a …\nAtomic types\nHas the effects of both <code>Acquire</code> and <code>Release</code> together: For …\nWhen coupled with a load, if the loaded value was written …\nTemporary implementation detail.\nA marker trait for primitive types which can be modified …\nAn integer type which can be safely shared between threads.\nAtomic memory orderings\nNo ordering constraints, only atomic operations.\nWhen coupled with a store, all previous operations become …\nLike <code>Acquire</code>/<code>Release</code>/<code>AcqRel</code> (for load, store, and …\nReturns a mutable pointer to the underlying integer.\nReturns the previous value (like __sync_fetch_and_add).\nPublicly exposed for stdarch; nobody else should use this.\nReturns the previous value (like __sync_fetch_and_sub).\nreturns the max value (unsigned comparison)\nreturns the min value (unsigned comparison)\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nAdds to the current value, returning the previous value.\nBitwise “and” with the current value.\nMaximum with the current value.\nMinimum with the current value.\nBitwise “nand” with the current value.\nBitwise “or” with the current value.\nSubtracts from the current value, returning the previous …\nFetches the value, and applies a function to it that …\nBitwise “xor” with the current value.\nReturns the argument unchanged.\nConverts an <code>u32</code> into an <code>AtomicU32</code>.\nReturns the argument unchanged.\nGet atomic access to a <code>&amp;mut u32</code>.\nGet atomic access to a <code>&amp;mut [u32]</code> slice.\nCreates a new reference to an atomic integer from a …\nReturns a mutable reference to the underlying integer.\nGet non-atomic access to a <code>&amp;mut [AtomicU32]</code> slice\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the atomic and returns the contained value.\nLoads a value from the atomic integer.\nCreates a new atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer, returning the …\nFetches the value, and applies a function to it that …\nFetches the value, applies a function to it that it return …\nDetermines whether we should check for language UB.\nChecking library UB is always enabled when UB-checking is …\nChecks whether <code>ptr</code> is properly aligned with respect to the …")