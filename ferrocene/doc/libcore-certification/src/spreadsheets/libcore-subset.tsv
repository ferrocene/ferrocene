File	Name	Impl	Kind	Visibility	Safety	doc(hidden)	is_nightly	Safety constraint	Panics section	Examples section	Docs
library/core/src/alloc/layout.rs	Layout::align	impl Layout	method	public	safe	false	false	not applicable	false	false	The minimum byte alignment for a memory block of this layout.  The returned alignment is guaranteed to be a power of two.
library/core/src/alloc/layout.rs	Layout::from_size_align_unchecked	impl Layout	method	public	unsafe	false	false	documented	false	false	Creates a layout, bypassing all checks.  # Safety  This function is unsafe as it does not verify the preconditions from [`Layout::from_size_align`].
library/core/src/alloc/layout.rs	Layout::is_size_align_valid	impl Layout	method	private	safe	false	false	not applicable	false	false	
library/core/src/alloc/layout.rs	Layout::max_size_for_align	impl Layout	method	private	safe	false	false	not applicable	false	false	
library/core/src/alloc/layout.rs	Layout::new	impl Layout	method	public	safe	false	false	not applicable	false	false	Constructs a `Layout` suitable for holding a value of type `T`.
library/core/src/alloc/layout.rs	Layout::size	impl Layout	method	public	safe	false	false	not applicable	false	false	The minimum size in bytes for a memory block of this layout.
library/core/src/alloc/layout.rs	size_align		function	private	safe	false	false	not applicable	false	false	
library/core/src/array/mod.rs	array::as_mut_slice	impl<T, const N: usize> [T; N]	method	public	safe	false	false	not applicable	false	false	Returns a mutable slice containing the entire array. Equivalent to `&mut s[..]`.
library/core/src/array/mod.rs	array::as_slice	impl<T, const N: usize> [T; N]	method	public	safe	false	false	not applicable	false	false	Returns a slice containing the entire array. Equivalent to `&s[..]`.
library/core/src/bool.rs	bool::ok_or	impl bool	method	public	safe	false	false	not applicable	false	true	Returns `Ok(())` if the `bool` is [`true`](../std/keyword.true.html), or `Err(err)` otherwise.  Arguments passed to `ok_or` are eagerly evaluated; if you are passing the result of a function call, it is recommended to use [`ok_or_else`], which is lazily evaluated.  [`ok_or_else`]: bool::ok_or_else  # Examples  ``` #![feature(bool_to_result)]  assert_eq!(false.ok_or(0), Err(0)); assert_eq!(true.ok_or(0), Ok(())); ```  ``` #![feature(bool_to_result)]  let mut a = 0; let mut function_with_side_effects = || { a += 1; };  assert!(true.ok_or(function_with_side_effects()).is_ok()); assert!(false.ok_or(function_with_side_effects()).is_err());  // `a` is incremented twice because the value passed to `ok_or` is // evaluated eagerly. assert_eq!(a, 2); ```
library/core/src/bool.rs	bool::ok_or_else	impl bool	method	public	safe	false	false	not applicable	false	true	Returns `Ok(())` if the `bool` is [`true`](../std/keyword.true.html), or `Err(f())` otherwise.  # Examples  ``` #![feature(bool_to_result)]  assert_eq!(false.ok_or_else(|| 0), Err(0)); assert_eq!(true.ok_or_else(|| 0), Ok(())); ```  ``` #![feature(bool_to_result)]  let mut a = 0;  assert!(true.ok_or_else(|| { a += 1; }).is_ok()); assert!(false.ok_or_else(|| { a += 1; }).is_err());  // `a` is incremented once because the closure is evaluated lazily by // `ok_or_else`. assert_eq!(a, 1); ```
library/core/src/bool.rs	bool::then	impl bool	method	public	safe	false	false	not applicable	false	true	Returns `Some(f())` if the `bool` is [`true`](../std/keyword.true.html), or `None` otherwise.  # Examples  ``` assert_eq!(false.then(|| 0), None); assert_eq!(true.then(|| 0), Some(0)); ```  ``` let mut a = 0;  true.then(|| { a += 1; }); false.then(|| { a += 1; });  // `a` is incremented once because the closure is evaluated lazily by // `then`. assert_eq!(a, 1); ```
library/core/src/bool.rs	bool::then_some	impl bool	method	public	safe	false	false	not applicable	false	true	Returns `Some(t)` if the `bool` is [`true`](../std/keyword.true.html), or `None` otherwise.  Arguments passed to `then_some` are eagerly evaluated; if you are passing the result of a function call, it is recommended to use [`then`], which is lazily evaluated.  [`then`]: bool::then  # Examples  ``` assert_eq!(false.then_some(0), None); assert_eq!(true.then_some(0), Some(0)); ```  ``` let mut a = 0; let mut function_with_side_effects = || { a += 1; };  true.then_some(function_with_side_effects()); false.then_some(function_with_side_effects());  // `a` is incremented twice because the value passed to `then_some` is // evaluated eagerly. assert_eq!(a, 2); ```
library/core/src/cell.rs	UnsafeCell::get	impl<T: ?Sized> UnsafeCell<T>	method	public	safe	false	false	not applicable	false	true	Gets a mutable pointer to the wrapped value.  This can be cast to a pointer of any kind. When creating references, you must uphold the aliasing rules; see [the type-level docs][UnsafeCell#aliasing-rules] for more discussion and caveats.  # Examples  ``` use std::cell::UnsafeCell;  let uc = UnsafeCell::new(5);  let five = uc.get(); ```
library/core/src/cell.rs	UnsafeCell::get_mut	impl<T: ?Sized> UnsafeCell<T>	method	public	safe	false	false	not applicable	false	true	Returns a mutable reference to the underlying data.  This call borrows the `UnsafeCell` mutably (at compile-time) which guarantees that we possess the only reference.  # Examples  ``` use std::cell::UnsafeCell;  let mut c = UnsafeCell::new(5); *c.get_mut() += 1;  assert_eq!(*c.get_mut(), 6); ```
library/core/src/cell.rs	UnsafeCell::into_inner	impl<T> UnsafeCell<T>	method	public	safe	false	false	not applicable	false	true	Unwraps the value, consuming the cell.  # Examples  ``` use std::cell::UnsafeCell;  let uc = UnsafeCell::new(5);  let five = uc.into_inner(); ```
library/core/src/cell.rs	UnsafeCell::new	impl<T> UnsafeCell<T>	method	public	safe	false	false	not applicable	false	true	Constructs a new instance of `UnsafeCell` which will wrap the specified value.  All access to the inner value through `&UnsafeCell<T>` requires `unsafe` code.  # Examples  ``` use std::cell::UnsafeCell;  let uc = UnsafeCell::new(5); ```
library/core/src/clone.rs	Clone::clone		trait method definition	public	safe	false	false	not applicable	false	true	Returns a duplicate of the value.  Note that what "duplicate" means varies by type: - For most types, this creates a deep, independent copy - For reference types like `&T`, this creates another reference to the same value - For smart pointers like [`Arc`] or [`Rc`], this increments the reference count   but still points to the same underlying data  [`Arc`]: ../../std/sync/struct.Arc.html [`Rc`]: ../../std/rc/struct.Rc.html  # Examples  ``` # #![allow(noop_method_call)] let hello = "Hello"; // &str implements Clone  assert_eq!("Hello", hello.clone()); ```  Example with a reference-counted type:  ``` use std::sync::{Arc, Mutex};  let data = Arc::new(Mutex::new(vec![1, 2, 3])); let data_clone = data.clone(); // Creates another Arc pointing to the same Mutex  {     let mut lock = data.lock().unwrap();     lock.push(4); }  // Changes are visible through the clone because they share the same underlying data assert_eq!(*data_clone.lock().unwrap(), vec![1, 2, 3, 4]); ```
library/core/src/clone.rs	Clone::clone	impl Clone for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/clone.rs	Clone::clone	impl Clone for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/clone.rs	Clone::clone	impl Clone for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/clone.rs	Clone::clone	impl Clone for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/clone.rs	Clone::clone	impl Clone for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/clone.rs	Clone::clone	impl Clone for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/clone.rs	Clone::clone	impl Clone for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/clone.rs	Clone::clone	impl Clone for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/clone.rs	Clone::clone	impl Clone for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/clone.rs	Clone::clone	impl Clone for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/clone.rs	Clone::clone	impl Clone for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/clone.rs	Clone::clone	impl Clone for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/clone.rs	Clone::clone	impl Clone for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/clone.rs	Clone::clone	impl Clone for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/clone.rs	Clone::clone	impl Clone for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/clone.rs	Clone::clone	impl<T: PointeeSized> Clone for *T	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/clone.rs	Clone::clone	impl<T: PointeeSized> Clone for *mut T	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/clone.rs	Clone::clone	impl<T: PointeeSized> Clone for &T	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/clone.rs	Clone::clone_from		trait method definition with default	public	safe	false	false	not applicable	false	false	Performs copy-assignment from `source`.  `a.clone_from(&b)` is equivalent to `a = b.clone()` in functionality, but can be overridden to reuse the resources of `a` to avoid unnecessary allocations.
library/core/src/cmp.rs	Ordering::as_raw	impl Ordering	method	private	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	Ordering::is_eq	impl Ordering	method	public	safe	false	false	not applicable	false	true	Returns `true` if the ordering is the `Equal` variant.  # Examples  ``` use std::cmp::Ordering;  assert_eq!(Ordering::Less.is_eq(), false); assert_eq!(Ordering::Equal.is_eq(), true); assert_eq!(Ordering::Greater.is_eq(), false); ```
library/core/src/cmp.rs	Ordering::is_ge	impl Ordering	method	public	safe	false	false	not applicable	false	true	Returns `true` if the ordering is either the `Greater` or `Equal` variant.  # Examples  ``` use std::cmp::Ordering;  assert_eq!(Ordering::Less.is_ge(), false); assert_eq!(Ordering::Equal.is_ge(), true); assert_eq!(Ordering::Greater.is_ge(), true); ```
library/core/src/cmp.rs	Ordering::is_gt	impl Ordering	method	public	safe	false	false	not applicable	false	true	Returns `true` if the ordering is the `Greater` variant.  # Examples  ``` use std::cmp::Ordering;  assert_eq!(Ordering::Less.is_gt(), false); assert_eq!(Ordering::Equal.is_gt(), false); assert_eq!(Ordering::Greater.is_gt(), true); ```
library/core/src/cmp.rs	Ordering::is_le	impl Ordering	method	public	safe	false	false	not applicable	false	true	Returns `true` if the ordering is either the `Less` or `Equal` variant.  # Examples  ``` use std::cmp::Ordering;  assert_eq!(Ordering::Less.is_le(), true); assert_eq!(Ordering::Equal.is_le(), true); assert_eq!(Ordering::Greater.is_le(), false); ```
library/core/src/cmp.rs	Ordering::is_lt	impl Ordering	method	public	safe	false	false	not applicable	false	true	Returns `true` if the ordering is the `Less` variant.  # Examples  ``` use std::cmp::Ordering;  assert_eq!(Ordering::Less.is_lt(), true); assert_eq!(Ordering::Equal.is_lt(), false); assert_eq!(Ordering::Greater.is_lt(), false); ```
library/core/src/cmp.rs	Ordering::is_ne	impl Ordering	method	public	safe	false	false	not applicable	false	true	Returns `true` if the ordering is not the `Equal` variant.  # Examples  ``` use std::cmp::Ordering;  assert_eq!(Ordering::Less.is_ne(), true); assert_eq!(Ordering::Equal.is_ne(), false); assert_eq!(Ordering::Greater.is_ne(), true); ```
library/core/src/cmp.rs	Ordering::reverse	impl Ordering	method	public	safe	false	false	not applicable	false	true	Reverses the `Ordering`.  * `Less` becomes `Greater`. * `Greater` becomes `Less`. * `Equal` becomes `Equal`.  # Examples  Basic behavior:  ``` use std::cmp::Ordering;  assert_eq!(Ordering::Less.reverse(), Ordering::Greater); assert_eq!(Ordering::Equal.reverse(), Ordering::Equal); assert_eq!(Ordering::Greater.reverse(), Ordering::Less); ```  This method can be used to reverse a comparison:  ``` let data: &mut [_] = &mut [2, 10, 5, 8];  // sort the array from largest to smallest. data.sort_by(|a, b| a.cmp(b).reverse());  let b: &mut [_] = &mut [10, 8, 5, 2]; assert!(data == b); ```
library/core/src/cmp.rs	Ordering::then	impl Ordering	method	public	safe	false	false	not applicable	false	true	Chains two orderings.  Returns `self` when it's not `Equal`. Otherwise returns `other`.  # Examples  ``` use std::cmp::Ordering;  let result = Ordering::Equal.then(Ordering::Less); assert_eq!(result, Ordering::Less);  let result = Ordering::Less.then(Ordering::Equal); assert_eq!(result, Ordering::Less);  let result = Ordering::Less.then(Ordering::Greater); assert_eq!(result, Ordering::Less);  let result = Ordering::Equal.then(Ordering::Equal); assert_eq!(result, Ordering::Equal);  let x: (i64, i64, i64) = (1, 2, 7); let y: (i64, i64, i64) = (1, 5, 3); let result = x.0.cmp(&y.0).then(x.1.cmp(&y.1)).then(x.2.cmp(&y.2));  assert_eq!(result, Ordering::Less); ```
library/core/src/cmp.rs	default_chaining_impl		function	private	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	max		function	public	safe	false	false	not applicable	false	true	Compares and returns the maximum of two values.  Returns the second argument if the comparison determines them to be equal.  Internally uses an alias to [`Ord::max`].  # Examples  ``` use std::cmp;  assert_eq!(cmp::max(1, 2), 2); assert_eq!(cmp::max(2, 2), 2); ``` ``` use std::cmp::{self, Ordering};  #[derive(Eq)] struct Equal(&'static str);  impl PartialEq for Equal {     fn eq(&self, other: &Self) -> bool { true } } impl PartialOrd for Equal {     fn partial_cmp(&self, other: &Self) -> Option<Ordering> { Some(Ordering::Equal) } } impl Ord for Equal {     fn cmp(&self, other: &Self) -> Ordering { Ordering::Equal } }  assert_eq!(cmp::max(Equal("v1"), Equal("v2")).0, "v2"); ```
library/core/src/cmp.rs	min		function	public	safe	false	false	not applicable	false	true	Compares and returns the minimum of two values.  Returns the first argument if the comparison determines them to be equal.  Internally uses an alias to [`Ord::min`].  # Examples  ``` use std::cmp;  assert_eq!(cmp::min(1, 2), 1); assert_eq!(cmp::min(2, 2), 2); ``` ``` use std::cmp::{self, Ordering};  #[derive(Eq)] struct Equal(&'static str);  impl PartialEq for Equal {     fn eq(&self, other: &Self) -> bool { true } } impl PartialOrd for Equal {     fn partial_cmp(&self, other: &Self) -> Option<Ordering> { Some(Ordering::Equal) } } impl Ord for Equal {     fn cmp(&self, other: &Self) -> Ordering { Ordering::Equal } }  assert_eq!(cmp::min(Equal("v1"), Equal("v2")).0, "v1"); ```
library/core/src/cmp.rs	Eq::assert_receiver_is_total_eq		trait method definition with default	public	safe	true	false	not applicable	false	false	
library/core/src/cmp.rs	Ord::clamp		trait method definition with default	public	safe	false	false	not applicable	true	true	Restrict a value to a certain interval.  Returns `max` if `self` is greater than `max`, and `min` if `self` is less than `min`. Otherwise this returns `self`.  # Panics  Panics if `min > max`.  # Examples  ``` assert_eq!((-3).clamp(-2, 1), -2); assert_eq!(0.clamp(-2, 1), 0); assert_eq!(2.clamp(-2, 1), 1); ```
library/core/src/cmp.rs	Ord::clamp	impl Ord for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	Ord::cmp		trait method definition	public	safe	false	false	not applicable	false	true	This method returns an [`Ordering`] between `self` and `other`.  By convention, `self.cmp(&other)` returns the ordering matching the expression `self <operator> other` if true.  # Examples  ``` use std::cmp::Ordering;  assert_eq!(5.cmp(&10), Ordering::Less); assert_eq!(10.cmp(&5), Ordering::Greater); assert_eq!(5.cmp(&5), Ordering::Equal); ```
library/core/src/cmp.rs	Ord::cmp	impl Ord for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	Ord::cmp	impl Ord for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	Ord::cmp	impl Ord for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	Ord::cmp	impl Ord for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	Ord::cmp	impl Ord for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	Ord::cmp	impl Ord for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	Ord::cmp	impl Ord for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	Ord::cmp	impl Ord for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	Ord::cmp	impl Ord for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	Ord::cmp	impl Ord for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	Ord::cmp	impl Ord for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	Ord::cmp	impl Ord for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	Ord::cmp	impl Ord for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	Ord::max		trait method definition with default	public	safe	false	false	not applicable	false	true	Compares and returns the maximum of two values.  Returns the second argument if the comparison determines them to be equal.  # Examples  ``` assert_eq!(1.max(2), 2); assert_eq!(2.max(2), 2); ``` ``` use std::cmp::Ordering;  #[derive(Eq)] struct Equal(&'static str);  impl PartialEq for Equal {     fn eq(&self, other: &Self) -> bool { true } } impl PartialOrd for Equal {     fn partial_cmp(&self, other: &Self) -> Option<Ordering> { Some(Ordering::Equal) } } impl Ord for Equal {     fn cmp(&self, other: &Self) -> Ordering { Ordering::Equal } }  assert_eq!(Equal("self").max(Equal("other")).0, "other"); ```
library/core/src/cmp.rs	Ord::max	impl Ord for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	Ord::min		trait method definition with default	public	safe	false	false	not applicable	false	true	Compares and returns the minimum of two values.  Returns the first argument if the comparison determines them to be equal.  # Examples  ``` assert_eq!(1.min(2), 1); assert_eq!(2.min(2), 2); ``` ``` use std::cmp::Ordering;  #[derive(Eq)] struct Equal(&'static str);  impl PartialEq for Equal {     fn eq(&self, other: &Self) -> bool { true } } impl PartialOrd for Equal {     fn partial_cmp(&self, other: &Self) -> Option<Ordering> { Some(Ordering::Equal) } } impl Ord for Equal {     fn cmp(&self, other: &Self) -> Ordering { Ordering::Equal } }  assert_eq!(Equal("self").min(Equal("other")).0, "self"); ```
library/core/src/cmp.rs	Ord::min	impl Ord for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::eq		trait method definition	public	safe	false	false	not applicable	false	false	Tests for `self` and `other` values to be equal, and is used by `==`.
library/core/src/cmp.rs	PartialEq::eq	impl PartialEq for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::eq	impl PartialEq for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::eq	impl PartialEq for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::eq	impl PartialEq for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::eq	impl PartialEq for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::eq	impl PartialEq for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::eq	impl PartialEq for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::eq	impl PartialEq for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::eq	impl PartialEq for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::eq	impl PartialEq for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::eq	impl PartialEq for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::eq	impl PartialEq for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::eq	impl PartialEq for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::eq	impl PartialEq for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::eq	impl PartialEq for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::ne		trait method definition with default	public	safe	false	false	not applicable	false	false	Tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.
library/core/src/cmp.rs	PartialEq::ne	impl PartialEq for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::ne	impl PartialEq for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::ne	impl PartialEq for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::ne	impl PartialEq for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::ne	impl PartialEq for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::ne	impl PartialEq for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::ne	impl PartialEq for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::ne	impl PartialEq for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::ne	impl PartialEq for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::ne	impl PartialEq for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::ne	impl PartialEq for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::ne	impl PartialEq for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::ne	impl PartialEq for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::ne	impl PartialEq for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialEq::ne	impl PartialEq for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_ge		trait method definition with default	public	safe	true	false	not applicable	false	false	Same as `__chaining_lt`, but for `>=` instead of `<`.
library/core/src/cmp.rs	PartialOrd::__chaining_ge	impl PartialOrd for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_ge	impl PartialOrd for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_ge	impl PartialOrd for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_ge	impl PartialOrd for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_ge	impl PartialOrd for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_ge	impl PartialOrd for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_ge	impl PartialOrd for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_ge	impl PartialOrd for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_ge	impl PartialOrd for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_ge	impl PartialOrd for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_ge	impl PartialOrd for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_ge	impl PartialOrd for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_ge	impl PartialOrd for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_ge	impl PartialOrd for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_ge	impl PartialOrd for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_gt		trait method definition with default	public	safe	true	false	not applicable	false	false	Same as `__chaining_lt`, but for `>` instead of `<`.
library/core/src/cmp.rs	PartialOrd::__chaining_gt	impl PartialOrd for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_gt	impl PartialOrd for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_gt	impl PartialOrd for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_gt	impl PartialOrd for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_gt	impl PartialOrd for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_gt	impl PartialOrd for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_gt	impl PartialOrd for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_gt	impl PartialOrd for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_gt	impl PartialOrd for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_gt	impl PartialOrd for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_gt	impl PartialOrd for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_gt	impl PartialOrd for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_gt	impl PartialOrd for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_gt	impl PartialOrd for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_gt	impl PartialOrd for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_le		trait method definition with default	public	safe	true	false	not applicable	false	false	Same as `__chaining_lt`, but for `<=` instead of `<`.
library/core/src/cmp.rs	PartialOrd::__chaining_le	impl PartialOrd for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_le	impl PartialOrd for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_le	impl PartialOrd for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_le	impl PartialOrd for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_le	impl PartialOrd for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_le	impl PartialOrd for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_le	impl PartialOrd for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_le	impl PartialOrd for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_le	impl PartialOrd for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_le	impl PartialOrd for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_le	impl PartialOrd for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_le	impl PartialOrd for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_le	impl PartialOrd for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_le	impl PartialOrd for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_le	impl PartialOrd for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_lt		trait method definition with default	public	safe	true	false	not applicable	false	false	If `self == other`, returns `ControlFlow::Continue(())`. Otherwise, returns `ControlFlow::Break(self < other)`.  This is useful for chaining together calls when implementing a lexical `PartialOrd::lt`, as it allows types (like primitives) which can cheaply check `==` and `<` separately to do rather than needing to calculate (then optimize out) the three-way `Ordering` result.
library/core/src/cmp.rs	PartialOrd::__chaining_lt	impl PartialOrd for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_lt	impl PartialOrd for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_lt	impl PartialOrd for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_lt	impl PartialOrd for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_lt	impl PartialOrd for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_lt	impl PartialOrd for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_lt	impl PartialOrd for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_lt	impl PartialOrd for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_lt	impl PartialOrd for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_lt	impl PartialOrd for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_lt	impl PartialOrd for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_lt	impl PartialOrd for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_lt	impl PartialOrd for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_lt	impl PartialOrd for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::__chaining_lt	impl PartialOrd for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::ge		trait method definition with default	public	safe	false	false	not applicable	false	true	Tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.  # Examples  ``` assert_eq!(1.0 >= 1.0, true); assert_eq!(1.0 >= 2.0, false); assert_eq!(2.0 >= 1.0, true); ```
library/core/src/cmp.rs	PartialOrd::ge	impl PartialOrd for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::ge	impl PartialOrd for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::ge	impl PartialOrd for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::ge	impl PartialOrd for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::ge	impl PartialOrd for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::ge	impl PartialOrd for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::ge	impl PartialOrd for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::ge	impl PartialOrd for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::ge	impl PartialOrd for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::ge	impl PartialOrd for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::ge	impl PartialOrd for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::ge	impl PartialOrd for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::ge	impl PartialOrd for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::ge	impl PartialOrd for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::ge	impl PartialOrd for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::gt		trait method definition with default	public	safe	false	false	not applicable	false	true	Tests greater than (for `self` and `other`) and is used by the `>` operator.  # Examples  ``` assert_eq!(1.0 > 1.0, false); assert_eq!(1.0 > 2.0, false); assert_eq!(2.0 > 1.0, true); ```
library/core/src/cmp.rs	PartialOrd::gt	impl PartialOrd for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::gt	impl PartialOrd for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::gt	impl PartialOrd for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::gt	impl PartialOrd for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::gt	impl PartialOrd for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::gt	impl PartialOrd for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::gt	impl PartialOrd for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::gt	impl PartialOrd for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::gt	impl PartialOrd for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::gt	impl PartialOrd for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::gt	impl PartialOrd for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::gt	impl PartialOrd for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::gt	impl PartialOrd for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::gt	impl PartialOrd for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::gt	impl PartialOrd for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::le		trait method definition with default	public	safe	false	false	not applicable	false	true	Tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.  # Examples  ``` assert_eq!(1.0 <= 1.0, true); assert_eq!(1.0 <= 2.0, true); assert_eq!(2.0 <= 1.0, false); ```
library/core/src/cmp.rs	PartialOrd::le	impl PartialOrd for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::le	impl PartialOrd for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::le	impl PartialOrd for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::le	impl PartialOrd for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::le	impl PartialOrd for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::le	impl PartialOrd for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::le	impl PartialOrd for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::le	impl PartialOrd for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::le	impl PartialOrd for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::le	impl PartialOrd for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::le	impl PartialOrd for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::le	impl PartialOrd for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::le	impl PartialOrd for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::le	impl PartialOrd for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::le	impl PartialOrd for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::lt		trait method definition with default	public	safe	false	false	not applicable	false	true	Tests less than (for `self` and `other`) and is used by the `<` operator.  # Examples  ``` assert_eq!(1.0 < 1.0, false); assert_eq!(1.0 < 2.0, true); assert_eq!(2.0 < 1.0, false); ```
library/core/src/cmp.rs	PartialOrd::lt	impl PartialOrd for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::lt	impl PartialOrd for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::lt	impl PartialOrd for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::lt	impl PartialOrd for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::lt	impl PartialOrd for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::lt	impl PartialOrd for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::lt	impl PartialOrd for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::lt	impl PartialOrd for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::lt	impl PartialOrd for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::lt	impl PartialOrd for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::lt	impl PartialOrd for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::lt	impl PartialOrd for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::lt	impl PartialOrd for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::lt	impl PartialOrd for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::lt	impl PartialOrd for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::partial_cmp		trait method definition	public	safe	false	false	not applicable	false	true	This method returns an ordering between `self` and `other` values if one exists.  # Examples  ``` use std::cmp::Ordering;  let result = 1.0.partial_cmp(&2.0); assert_eq!(result, Some(Ordering::Less));  let result = 1.0.partial_cmp(&1.0); assert_eq!(result, Some(Ordering::Equal));  let result = 2.0.partial_cmp(&1.0); assert_eq!(result, Some(Ordering::Greater)); ```  When comparison is impossible:  ``` let result = f64::NAN.partial_cmp(&1.0); assert_eq!(result, None); ```
library/core/src/cmp.rs	PartialOrd::partial_cmp	impl PartialOrd for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::partial_cmp	impl PartialOrd for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::partial_cmp	impl PartialOrd for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::partial_cmp	impl PartialOrd for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::partial_cmp	impl PartialOrd for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::partial_cmp	impl PartialOrd for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::partial_cmp	impl PartialOrd for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::partial_cmp	impl PartialOrd for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::partial_cmp	impl PartialOrd for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::partial_cmp	impl PartialOrd for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::partial_cmp	impl PartialOrd for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::partial_cmp	impl PartialOrd for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::partial_cmp	impl PartialOrd for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::partial_cmp	impl PartialOrd for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/cmp.rs	PartialOrd::partial_cmp	impl PartialOrd for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/convert/mod.rs	TryFrom::try_from		trait method definition	public	safe	false	false	not applicable	false	false	Performs the conversion.
library/core/src/convert/mod.rs	TryInto::try_into		trait method definition	public	safe	false	false	not applicable	false	false	Performs the conversion.
library/core/src/convert/mod.rs	identity		function	public	safe	false	false	not applicable	false	true	The identity function.  Two things are important to note about this function:  - It is not always equivalent to a closure like `|x| x`, since the   closure may coerce `x` into a different type.  - It moves the input `x` passed to the function.  While it might seem strange to have a function that just returns back the input, there are some interesting uses.  # Examples  Using `identity` to do nothing in a sequence of other, interesting, functions:  ```rust use std::convert::identity;  fn manipulation(x: u32) -> u32 {     // Let's pretend that adding one is an interesting function.     x + 1 }  let _arr = &[identity, manipulation]; ```  Using `identity` as a "do nothing" base case in a conditional:  ```rust use std::convert::identity;  # let condition = true; # # fn manipulation(x: u32) -> u32 { x + 1 } # let do_stuff = if condition { manipulation } else { identity };  // Do more interesting stuff...  let _results = do_stuff(42); ```  Using `identity` to keep the `Some` variants of an iterator of `Option<T>`:  ```rust use std::convert::identity;  let iter = [Some(1), None, Some(3)].into_iter(); let filtered = iter.filter_map(identity).collect::<Vec<_>>(); assert_eq!(vec![1, 3], filtered); ```
library/core/src/convert/mod.rs	AsMut::as_mut		trait method definition	public	safe	false	false	not applicable	false	false	Converts this type into a mutable reference of the (usually inferred) input type.
library/core/src/convert/mod.rs	AsMut::as_mut	impl<T, U: PointeeSized> AsMut<U> for &mut T where T: AsMut<U> + PointeeSized	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/convert/mod.rs	AsMut::as_mut	impl<T> AsMut<[T]> for [T]	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/convert/mod.rs	AsMut::as_mut	impl AsMut<str> for str	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/convert/mod.rs	AsRef::as_ref		trait method definition	public	safe	false	false	not applicable	false	false	Converts this type into a shared reference of the (usually inferred) input type.
library/core/src/convert/mod.rs	AsRef::as_ref	impl<T, U: PointeeSized> AsRef<U> for &T where T: AsRef<U> + PointeeSized	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/convert/mod.rs	AsRef::as_ref	impl<T, U: PointeeSized> AsRef<U> for &mut T where T: AsRef<U> + PointeeSized	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/convert/mod.rs	Clone::clone	impl Clone for Infallible	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/convert/mod.rs	From::from		trait method definition	public	safe	false	false	not applicable	false	false	Converts to this type from the input type.
library/core/src/convert/mod.rs	From::from	impl<T> From<T> for T	trait method implementation	public	safe	false	false	not applicable	false	false	Returns the argument unchanged.
library/core/src/convert/mod.rs	Into::into		trait method definition	public	safe	false	false	not applicable	false	false	Converts this type into the (usually inferred) input type.
library/core/src/convert/mod.rs	Into::into	impl<T, U> Into<U> for T where U: From<T>	trait method implementation	public	safe	false	false	not applicable	false	false	Calls `U::from(self)`.  That is, this conversion is whatever the implementation of <code>[From]&lt;T&gt; for U</code> chooses to do.
library/core/src/convert/mod.rs	Option::try_from	impl<T, U> TryFrom<U> for Option<T> where U: Into<T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/convert/mod.rs	Option::try_into	impl<T, U> TryInto<U> for Option<T> where U: TryFrom<T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/default.rs	Default::default		trait method definition	public	safe	false	false	not applicable	false	true	Returns the "default value" for a type.  Default values are often some kind of initial value, identity value, or anything else that may make sense as a default.  # Examples  Using built-in default values:  ``` let i: i8 = Default::default(); let (x, y): (Option<String>, f64) = Default::default(); let (a, b, (c, d)): (i32, u32, (bool, bool)) = Default::default(); ```  Making your own:  ``` # #[allow(dead_code)] enum Kind {     A,     B,     C, }  impl Default for Kind {     fn default() -> Self { Kind::A } } ```
library/core/src/default.rs	Default::default	impl Default for u32	trait method implementation	public	safe	false	false	not applicable	false	false	Returns the default value of `0`
library/core/src/hint.rs	unreachable_unchecked		function	public	unsafe	false	false	documented	false	true	Informs the compiler that the site which is calling this function is not reachable, possibly enabling further optimizations.  # Safety  Reaching this function is *Undefined Behavior*.  As the compiler assumes that all forms of Undefined Behavior can never happen, it will eliminate all branches in the surrounding code that it can determine will invariably lead to a call to `unreachable_unchecked()`.  If the assumptions embedded in using this function turn out to be wrong - that is, if the site which is calling `unreachable_unchecked()` is actually reachable at runtime - the compiler may have generated nonsensical machine instructions for this situation, including in seemingly unrelated code, causing difficult-to-debug problems.  Use this function sparingly. Consider using the [`unreachable!`] macro, which may prevent some optimizations but will safely panic in case it is actually reached at runtime. Benchmark your code to find out if using `unreachable_unchecked()` comes with a performance benefit.  # Examples  `unreachable_unchecked()` can be used in situations where the compiler can't prove invariants that were previously established. Such situations have a higher chance of occurring if those invariants are upheld by external code that the compiler can't analyze. ``` fn prepare_inputs(divisors: &mut Vec<u32>) {     // Note to future-self when making changes: The invariant established     // here is NOT checked in `do_computation()`; if this changes, you HAVE     // to change `do_computation()`.     divisors.retain(|divisor| *divisor != 0) }  /// # Safety /// All elements of `divisor` must be non-zero. unsafe fn do_computation(i: u32, divisors: &[u32]) -> u32 {     divisors.iter().fold(i, |acc, divisor| {         // Convince the compiler that a division by zero can't happen here         // and a check is not needed below.         if *divisor == 0 {             // Safety: `divisor` can't be zero because of `prepare_inputs`,             // but the compiler does not know about this. We *promise*             // that we always call `prepare_inputs`.             unsafe { std::hint::unreachable_unchecked() }         }         // The compiler would normally introduce a check here that prevents         // a division by zero. However, if `divisor` was zero, the branch         // above would reach what we explicitly marked as unreachable.         // The compiler concludes that `divisor` can't be zero at this point         // and removes the - now proven useless - check.         acc / divisor     }) }  let mut divisors = vec![2, 0, 4]; prepare_inputs(&mut divisors); let result = unsafe {     // Safety: prepare_inputs() guarantees that divisors is non-zero     do_computation(100, &divisors) }; assert_eq!(result, 12);  ```  While using `unreachable_unchecked()` is perfectly sound in the following example, as the compiler is able to prove that a division by zero is not possible, benchmarking reveals that `unreachable_unchecked()` provides no benefit over using [`unreachable!`], while the latter does not introduce the possibility of Undefined Behavior.  ``` fn div_1(a: u32, b: u32) -> u32 {     use std::hint::unreachable_unchecked;      // `b.saturating_add(1)` is always positive (not zero),     // hence `checked_div` will never return `None`.     // Therefore, the else branch is unreachable.     a.checked_div(b.saturating_add(1))         .unwrap_or_else(|| unsafe { unreachable_unchecked() }) }  assert_eq!(div_1(7, 0), 7); assert_eq!(div_1(9, 1), 4); assert_eq!(div_1(11, u32::MAX), 0); ```
library/core/src/intrinsics/mod.rs	abort		function	public	safe	false	true	not applicable	false	false	Aborts the execution of the process.  Note that, unlike most intrinsics, this is safe to call; it does not require an `unsafe` block. Therefore, implementations must not require the user to uphold any safety invariants.  [`std::process::abort`](../../std/process/fn.abort.html) is to be preferred if possible, as its behavior is more user-friendly and more stable.  The current implementation of `intrinsics::abort` is to invoke an invalid instruction, on most platforms. On Unix, the process will probably terminate with a signal like `SIGABRT`, `SIGILL`, `SIGTRAP`, `SIGSEGV` or `SIGBUS`.  The precise behavior is not guaranteed and not stable.
library/core/src/intrinsics/mod.rs	aggregate_raw_ptr		function	public	safe	false	true	not applicable	false	false	Lowers in MIR to `Rvalue::Aggregate` with `AggregateKind::RawPtr`.  This is used to implement functions like `slice::from_raw_parts_mut` and `ptr::from_raw_parts` in a way compatible with the compiler being able to change the possible layouts of pointers.
library/core/src/intrinsics/mod.rs	align_of		function	public	safe	false	true	not applicable	false	false	The minimum alignment of a type.  Note that, unlike most intrinsics, this is safe to call; it does not require an `unsafe` block. Therefore, implementations must not require the user to uphold any safety invariants.  The stabilized version of this intrinsic is [`align_of`].
library/core/src/intrinsics/mod.rs	atomic_and		function	public	unsafe	false	true	missing	false	false	Bitwise and with the current value, returning the previous value. `T` must be an integer or pointer type. If `T` is a pointer type, the provenance of `src` is ignored: both the return value and the new value stored at `*dst` will have the provenance of the old value stored there.  The stabilized version of this intrinsic is available on the [`atomic`] types via the `fetch_and` method. For example, [`AtomicBool::fetch_and`].
library/core/src/intrinsics/mod.rs	atomic_cxchg		function	public	unsafe	false	true	missing	false	false	Stores a value if the current value is the same as the `old` value. `T` must be an integer or pointer type.  The stabilized version of this intrinsic is available on the [`atomic`] types via the `compare_exchange` method. For example, [`AtomicBool::compare_exchange`].
library/core/src/intrinsics/mod.rs	atomic_cxchgweak		function	public	unsafe	false	true	missing	false	false	Stores a value if the current value is the same as the `old` value. `T` must be an integer or pointer type. The comparison may spuriously fail.  The stabilized version of this intrinsic is available on the [`atomic`] types via the `compare_exchange_weak` method. For example, [`AtomicBool::compare_exchange_weak`].
library/core/src/intrinsics/mod.rs	atomic_load		function	public	unsafe	false	true	missing	false	false	Loads the current value of the pointer. `T` must be an integer or pointer type.  The stabilized version of this intrinsic is available on the [`atomic`] types via the `load` method. For example, [`AtomicBool::load`].
library/core/src/intrinsics/mod.rs	atomic_nand		function	public	unsafe	false	true	missing	false	false	Bitwise nand with the current value, returning the previous value. `T` must be an integer or pointer type. If `T` is a pointer type, the provenance of `src` is ignored: both the return value and the new value stored at `*dst` will have the provenance of the old value stored there.  The stabilized version of this intrinsic is available on the [`AtomicBool`] type via the `fetch_nand` method. For example, [`AtomicBool::fetch_nand`].
library/core/src/intrinsics/mod.rs	atomic_or		function	public	unsafe	false	true	missing	false	false	Bitwise or with the current value, returning the previous value. `T` must be an integer or pointer type. If `T` is a pointer type, the provenance of `src` is ignored: both the return value and the new value stored at `*dst` will have the provenance of the old value stored there.  The stabilized version of this intrinsic is available on the [`atomic`] types via the `fetch_or` method. For example, [`AtomicBool::fetch_or`].
library/core/src/intrinsics/mod.rs	atomic_store		function	public	unsafe	false	true	missing	false	false	Stores the value at the specified memory location. `T` must be an integer or pointer type.  The stabilized version of this intrinsic is available on the [`atomic`] types via the `store` method. For example, [`AtomicBool::store`].
library/core/src/intrinsics/mod.rs	atomic_umax		function	public	unsafe	false	true	missing	false	false	Maximum with the current value using an unsigned comparison. `T` must be an unsigned integer type.  The stabilized version of this intrinsic is available on the [`atomic`] unsigned integer types via the `fetch_max` method. For example, [`AtomicU32::fetch_max`].
library/core/src/intrinsics/mod.rs	atomic_umin		function	public	unsafe	false	true	missing	false	false	Minimum with the current value using an unsigned comparison. `T` must be an unsigned integer type.  The stabilized version of this intrinsic is available on the [`atomic`] unsigned integer types via the `fetch_min` method. For example, [`AtomicU32::fetch_min`].
library/core/src/intrinsics/mod.rs	atomic_xadd		function	public	unsafe	false	true	missing	false	false	Adds to the current value, returning the previous value. `T` must be an integer or pointer type. If `T` is a pointer type, the provenance of `src` is ignored: both the return value and the new value stored at `*dst` will have the provenance of the old value stored there.  The stabilized version of this intrinsic is available on the [`atomic`] types via the `fetch_add` method. For example, [`AtomicIsize::fetch_add`].
library/core/src/intrinsics/mod.rs	atomic_xchg		function	public	unsafe	false	true	missing	false	false	Stores the value at the specified memory location, returning the old value. `T` must be an integer or pointer type.  The stabilized version of this intrinsic is available on the [`atomic`] types via the `swap` method. For example, [`AtomicBool::swap`].
library/core/src/intrinsics/mod.rs	atomic_xor		function	public	unsafe	false	true	missing	false	false	Bitwise xor with the current value, returning the previous value. `T` must be an integer or pointer type. If `T` is a pointer type, the provenance of `src` is ignored: both the return value and the new value stored at `*dst` will have the provenance of the old value stored there.  The stabilized version of this intrinsic is available on the [`atomic`] types via the `fetch_xor` method. For example, [`AtomicBool::fetch_xor`].
library/core/src/intrinsics/mod.rs	atomic_xsub		function	public	unsafe	false	true	missing	false	false	Subtract from the current value, returning the previous value. `T` must be an integer or pointer type. If `T` is a pointer type, the provenance of `src` is ignored: both the return value and the new value stored at `*dst` will have the provenance of the old value stored there.  The stabilized version of this intrinsic is available on the [`atomic`] types via the `fetch_sub` method. For example, [`AtomicIsize::fetch_sub`].
library/core/src/intrinsics/mod.rs	const_eval_select		function	public	safe	false	true	not applicable	false	false	Selects which function to call depending on the context.  If this function is evaluated at compile-time, then a call to this intrinsic will be replaced with a call to `called_in_const`. It gets replaced with a call to `called_at_rt` otherwise.  This function is safe to call, but note the stability concerns below.  # Type Requirements  The two functions must be both function items. They cannot be function pointers or closures. The first function must be a `const fn`.  `arg` will be the tupled arguments that will be passed to either one of the two functions, therefore, both functions must accept the same type of arguments. Both functions must return RET.  # Stability concerns  Rust has not yet decided that `const fn` are allowed to tell whether they run at compile-time or at runtime. Therefore, when using this intrinsic anywhere that can be reached from stable, it is crucial that the end-to-end behavior of the stable `const fn` is the same for both modes of execution. (Here, Undefined Behavior is considered "the same" as any other behavior, so if the function exhibits UB at runtime then it may do whatever it wants at compile-time.)  Here is an example of how this could cause a problem: ```no_run #![feature(const_eval_select)] #![feature(core_intrinsics)] # #![allow(internal_features)] use std::intrinsics::const_eval_select;  // Standard library pub const fn inconsistent() -> i32 {     fn runtime() -> i32 { 1 }     const fn compiletime() -> i32 { 2 }      // ⚠ This code violates the required equivalence of `compiletime`     // and `runtime`.     const_eval_select((), compiletime, runtime) }  // User Crate const X: i32 = inconsistent(); let x = inconsistent(); assert_eq!(x, X); ```  Currently such an assertion would always succeed; until Rust decides otherwise, that principle should not be violated.
library/core/src/intrinsics/mod.rs	const_make_global		function	public	unsafe	false	true	missing	false	false	
library/core/src/intrinsics/mod.rs	ctpop		function	public	safe	false	true	not applicable	false	false	Returns the number of bits set in an integer type `T`  Note that, unlike most intrinsics, this is safe to call; it does not require an `unsafe` block. Therefore, implementations must not require the user to uphold any safety invariants.  The stabilized versions of this intrinsic are available on the integer primitives via the `count_ones` method. For example, [`u32::count_ones`]
library/core/src/intrinsics/mod.rs	discriminant_value		function	public	safe	false	true	not applicable	false	false	Returns the value of the discriminant for the variant in 'v'; if `T` has no discriminant, returns `0`.  Note that, unlike most intrinsics, this is safe to call; it does not require an `unsafe` block. Therefore, implementations must not require the user to uphold any safety invariants.  The stabilized version of this intrinsic is [`core::mem::discriminant`].
library/core/src/intrinsics/mod.rs	ptr_guaranteed_cmp		function	public	safe	false	true	not applicable	false	false	See documentation of `<*const T>::guaranteed_eq` for details. Returns `2` if the result is unknown. Returns `1` if the pointers are guaranteed equal. Returns `0` if the pointers are guaranteed inequal.
library/core/src/intrinsics/mod.rs	read_via_copy		function	public	unsafe	false	true	missing	false	false	This is an implementation detail of [`crate::ptr::read`] and should not be used anywhere else.  See its comments for why this exists.  This intrinsic can *only* be called where the pointer is a local without projections (`read_via_copy(ptr)`, not `read_via_copy(*ptr)`) so that it trivially obeys runtime-MIR rules about derefs in operands.
library/core/src/intrinsics/mod.rs	size_of		function	public	safe	false	true	not applicable	false	false	The size of a type in bytes.  Note that, unlike most intrinsics, this is safe to call; it does not require an `unsafe` block. Therefore, implementations must not require the user to uphold any safety invariants.  More specifically, this is the offset in bytes between successive items of the same type, including alignment padding.  The stabilized version of this intrinsic is [`size_of`].
library/core/src/intrinsics/mod.rs	three_way_compare		function	public	safe	false	true	not applicable	false	false	Does a three-way comparison between the two arguments, which must be of character or integer (signed or unsigned) type.  This was originally added because it greatly simplified the MIR in `cmp` implementations, and then LLVM 20 added a backend intrinsic for it too.  The stabilized version of this intrinsic is [`Ord::cmp`].
library/core/src/intrinsics/mod.rs	transmute		function	public	unsafe	false	true	missing	false	true	Reinterprets the bits of a value of one type as another type.  Both types must have the same size. Compilation will fail if this is not guaranteed.  `transmute` is semantically equivalent to a bitwise move of one type into another. It copies the bits from the source value into the destination value, then forgets the original. Note that source and destination are passed by-value, which means if `Src` or `Dst` contain padding, that padding is *not* guaranteed to be preserved by `transmute`.  Both the argument and the result must be [valid](../../nomicon/what-unsafe-does.html) at their given type. Violating this condition leads to [undefined behavior][ub]. The compiler will generate code *assuming that you, the programmer, ensure that there will never be undefined behavior*. It is therefore your responsibility to guarantee that every value passed to `transmute` is valid at both types `Src` and `Dst`. Failing to uphold this condition may lead to unexpected and unstable compilation results. This makes `transmute` **incredibly unsafe**. `transmute` should be the absolute last resort.  Because `transmute` is a by-value operation, alignment of the *transmuted values themselves* is not a concern. As with any other function, the compiler already ensures both `Src` and `Dst` are properly aligned. However, when transmuting values that *point elsewhere* (such as pointers, references, boxes…), the caller has to ensure proper alignment of the pointed-to values.  The [nomicon](../../nomicon/transmutes.html) has additional documentation.  [ub]: ../../reference/behavior-considered-undefined.html  # Transmutation between pointers and integers  Special care has to be taken when transmuting between pointers and integers, e.g. transmuting between `*const ()` and `usize`.  Transmuting *pointers to integers* in a `const` context is [undefined behavior][ub], unless the pointer was originally created *from* an integer. (That includes this function specifically, integer-to-pointer casts, and helpers like [`dangling`][crate::ptr::dangling], but also semantically-equivalent conversions such as punning through `repr(C)` union fields.) Any attempt to use the resulting value for integer operations will abort const-evaluation. (And even outside `const`, such transmutation is touching on many unspecified aspects of the Rust memory model and should be avoided. See below for alternatives.)  Transmuting *integers to pointers* is a largely unspecified operation. It is likely *not* equivalent to an `as` cast. Doing non-zero-sized memory accesses with a pointer constructed this way is currently considered undefined behavior.  All this also applies when the integer is nested inside an array, tuple, struct, or enum. However, `MaybeUninit<usize>` is not considered an integer type for the purpose of this section. Transmuting `*const ()` to `MaybeUninit<usize>` is fine---but then calling `assume_init()` on that result is considered as completing the pointer-to-integer transmute and thus runs into the issues discussed above.  In particular, doing a pointer-to-integer-to-pointer roundtrip via `transmute` is *not* a lossless process. If you want to round-trip a pointer through an integer in a way that you can get back the original pointer, you need to use `as` casts, or replace the integer type by `MaybeUninit<$int>` (and never call `assume_init()`). If you are looking for a way to store data of arbitrary type, also use `MaybeUninit<T>` (that will also handle uninitialized memory due to padding). If you specifically need to store something that is "either an integer or a pointer", use `*mut ()`: integers can be converted to pointers and back without any loss (via `as` casts or via `transmute`).  # Examples  There are a few things that `transmute` is really useful for.  Turning a pointer into a function pointer. This is *not* portable to machines where function pointers and data pointers have different sizes.  ``` fn foo() -> i32 {     0 } // Crucially, we `as`-cast to a raw pointer before `transmute`ing to a function pointer. // This avoids an integer-to-pointer `transmute`, which can be problematic. // Transmuting between raw pointers and function pointers (i.e., two pointer types) is fine. let pointer = foo as *const (); let function = unsafe {     std::mem::transmute::<*const (), fn() -> i32>(pointer) }; assert_eq!(function(), 0); ```  Extending a lifetime, or shortening an invariant lifetime. This is advanced, very unsafe Rust!  ``` struct R<'a>(&'a i32); unsafe fn extend_lifetime<'b>(r: R<'b>) -> R<'static> {     unsafe { std::mem::transmute::<R<'b>, R<'static>>(r) } }  unsafe fn shorten_invariant_lifetime<'b, 'c>(r: &'b mut R<'static>)                                              -> &'b mut R<'c> {     unsafe { std::mem::transmute::<&'b mut R<'static>, &'b mut R<'c>>(r) } } ```  # Alternatives  Don't despair: many uses of `transmute` can be achieved through other means. Below are common applications of `transmute` which can be replaced with safer constructs.  Turning raw bytes (`[u8; SZ]`) into `u32`, `f64`, etc.:  ``` # #![allow(unnecessary_transmutes)] let raw_bytes = [0x78, 0x56, 0x34, 0x12];  let num = unsafe {     std::mem::transmute::<[u8; 4], u32>(raw_bytes) };  // use `u32::from_ne_bytes` instead let num = u32::from_ne_bytes(raw_bytes); // or use `u32::from_le_bytes` or `u32::from_be_bytes` to specify the endianness let num = u32::from_le_bytes(raw_bytes); assert_eq!(num, 0x12345678); let num = u32::from_be_bytes(raw_bytes); assert_eq!(num, 0x78563412); ```  Turning a pointer into a `usize`:  ```no_run let ptr = &0; let ptr_num_transmute = unsafe {     std::mem::transmute::<&i32, usize>(ptr) };  // Use an `as` cast instead let ptr_num_cast = ptr as *const i32 as usize; ```  Note that using `transmute` to turn a pointer to a `usize` is (as noted above) [undefined behavior][ub] in `const` contexts. Also outside of consts, this operation might not behave as expected -- this is touching on many unspecified aspects of the Rust memory model. Depending on what the code is doing, the following alternatives are preferable to pointer-to-integer transmutation: - If the code just wants to store data of arbitrary type in some buffer and needs to pick a   type for that buffer, it can use [`MaybeUninit`][crate::mem::MaybeUninit]. - If the code actually wants to work on the address the pointer points to, it can use `as`   casts or [`ptr.addr()`][pointer::addr].  Turning a `*mut T` into a `&mut T`:  ``` let ptr: *mut i32 = &mut 0; let ref_transmuted = unsafe {     std::mem::transmute::<*mut i32, &mut i32>(ptr) };  // Use a reborrow instead let ref_casted = unsafe { &mut *ptr }; ```  Turning a `&mut T` into a `&mut U`:  ``` let ptr = &mut 0; let val_transmuted = unsafe {     std::mem::transmute::<&mut i32, &mut u32>(ptr) };  // Now, put together `as` and reborrowing - note the chaining of `as` // `as` is not transitive let val_casts = unsafe { &mut *(ptr as *mut i32 as *mut u32) }; ```  Turning a `&str` into a `&[u8]`:  ``` // this is not a good way to do this. let slice = unsafe { std::mem::transmute::<&str, &[u8]>("Rust") }; assert_eq!(slice, &[82, 117, 115, 116]);  // You could use `str::as_bytes` let slice = "Rust".as_bytes(); assert_eq!(slice, &[82, 117, 115, 116]);  // Or, just use a byte string, if you have control over the string // literal assert_eq!(b"Rust", &[82, 117, 115, 116]); ```  Turning a `Vec<&T>` into a `Vec<Option<&T>>`.  To transmute the inner type of the contents of a container, you must make sure to not violate any of the container's invariants. For `Vec`, this means that both the size *and alignment* of the inner types have to match. Other containers might rely on the size of the type, alignment, or even the `TypeId`, in which case transmuting wouldn't be possible at all without violating the container invariants.  ``` let store = [0, 1, 2, 3]; let v_orig = store.iter().collect::<Vec<&i32>>();  // clone the vector as we will reuse them later let v_clone = v_orig.clone();  // Using transmute: this relies on the unspecified data layout of `Vec`, which is a // bad idea and could cause Undefined Behavior. // However, it is no-copy. let v_transmuted = unsafe {     std::mem::transmute::<Vec<&i32>, Vec<Option<&i32>>>(v_clone) };  let v_clone = v_orig.clone();  // This is the suggested, safe way. // It may copy the entire vector into a new one though, but also may not. let v_collected = v_clone.into_iter()                          .map(Some)                          .collect::<Vec<Option<&i32>>>();  let v_clone = v_orig.clone();  // This is the proper no-copy, unsafe way of "transmuting" a `Vec`, without relying on the // data layout. Instead of literally calling `transmute`, we perform a pointer cast, but // in terms of converting the original inner type (`&i32`) to the new one (`Option<&i32>`), // this has all the same caveats. Besides the information provided above, also consult the // [`from_raw_parts`] documentation. let v_from_raw = unsafe {     // Ensure the original vector is not dropped.     let mut v_clone = std::mem::ManuallyDrop::new(v_clone);     Vec::from_raw_parts(v_clone.as_mut_ptr() as *mut Option<&i32>,                         v_clone.len(),                         v_clone.capacity()) }; ```  [`from_raw_parts`]: ../../std/vec/struct.Vec.html#method.from_raw_parts  Implementing `split_at_mut`:  ``` use std::{slice, mem};  // There are multiple ways to do this, and there are multiple problems // with the following (transmute) way. fn split_at_mut_transmute<T>(slice: &mut [T], mid: usize)                              -> (&mut [T], &mut [T]) {     let len = slice.len();     assert!(mid <= len);     unsafe {         let slice2 = mem::transmute::<&mut [T], &mut [T]>(slice);         // first: transmute is not type safe; all it checks is that T and         // U are of the same size. Second, right here, you have two         // mutable references pointing to the same memory.         (&mut slice[0..mid], &mut slice2[mid..len])     } }  // This gets rid of the type safety problems; `&mut *` will *only* give // you a `&mut T` from a `&mut T` or `*mut T`. fn split_at_mut_casts<T>(slice: &mut [T], mid: usize)                          -> (&mut [T], &mut [T]) {     let len = slice.len();     assert!(mid <= len);     unsafe {         let slice2 = &mut *(slice as *mut [T]);         // however, you still have two mutable references pointing to         // the same memory.         (&mut slice[0..mid], &mut slice2[mid..len])     } }  // This is how the standard library does it. This is the best method, if // you need to do something like this fn split_at_stdlib<T>(slice: &mut [T], mid: usize)                       -> (&mut [T], &mut [T]) {     let len = slice.len();     assert!(mid <= len);     unsafe {         let ptr = slice.as_mut_ptr();         // This now has three mutable references pointing at the same         // memory. `slice`, the rvalue ret.0, and the rvalue ret.1.         // `slice` is never used after `let ptr = ...`, and so one can         // treat it as "dead", and therefore, you only have two real         // mutable slices.         (slice::from_raw_parts_mut(ptr, mid),          slice::from_raw_parts_mut(ptr.add(mid), len - mid))     } } ```
library/core/src/intrinsics/mod.rs	ub_checks		function	public	safe	false	true	not applicable	false	false	Returns whether we should perform some UB-checking at runtime. This eventually evaluates to `cfg!(ub_checks)`, but behaves different from `cfg!` when mixing crates built with different flags: if the crate has UB checks enabled or carries the `#[rustc_preserve_ub_checks]` attribute, evaluation is delayed until monomorphization (or until the call gets inlined into a crate that does not delay evaluation further); otherwise it can happen any time.  The common case here is a user program built with ub_checks linked against the distributed sysroot which is built without ub_checks but with `#[rustc_preserve_ub_checks]`. For code that gets monomorphized in the user crate (i.e., generic functions and functions with `#[inline]`), gating assertions on `ub_checks()` rather than `cfg!(ub_checks)` means that assertions are enabled whenever the *user crate* has UB checks enabled. However, if the user has UB checks disabled, the checks will still get optimized out. This intrinsic is primarily used by [`crate::ub_checks::assert_unsafe_precondition`].
library/core/src/intrinsics/mod.rs	unchecked_sub		function	public	unsafe	false	true	missing	false	false	Returns the result of an unchecked subtraction, resulting in undefined behavior when `x - y > T::MAX` or `x - y < T::MIN`.  The stable counterpart of this intrinsic is `unchecked_sub` on the various integer types, such as [`u16::unchecked_sub`] and [`i64::unchecked_sub`].
library/core/src/intrinsics/mod.rs	unreachable		function	public	unsafe	false	true	missing	false	false	Informs the optimizer that this point in the code is not reachable, enabling further optimizations.  N.B., this is very different from the `unreachable!()` macro: Unlike the macro, which panics when it is executed, it is *undefined behavior* to reach code marked with this function.  The stabilized version of this intrinsic is [`core::hint::unreachable_unchecked`].
library/core/src/intrinsics/mod.rs	write_via_move		function	public	unsafe	false	true	missing	false	false	This is an implementation detail of [`crate::ptr::write`] and should not be used anywhere else.  See its comments for why this exists.  This intrinsic can *only* be called where the pointer is a local without projections (`write_via_move(ptr, x)`, not `write_via_move(*ptr, x)`) so that it trivially obeys runtime-MIR rules about derefs in operands.
library/core/src/intrinsics/mod.rs	Eq::assert_receiver_is_total_eq	impl Eq for AtomicOrdering	trait method implementation	public	safe	true	true	not applicable	false	false	
library/core/src/intrinsics/mod.rs	PartialEq::eq	impl PartialEq for AtomicOrdering	trait method implementation	public	safe	false	true	not applicable	false	false	
library/core/src/iter/traits/collect.rs	IntoIterator::into_iter		trait method definition	public	safe	false	false	not applicable	false	true	Creates an iterator from a value.  See the [module-level documentation] for more.  [module-level documentation]: crate::iter  # Examples  ``` let v = [1, 2, 3]; let mut iter = v.into_iter();  assert_eq!(Some(1), iter.next()); assert_eq!(Some(2), iter.next()); assert_eq!(Some(3), iter.next()); assert_eq!(None, iter.next()); ```
library/core/src/iter/traits/iterator.rs	Iterator::next		trait method definition	public	safe	false	false	not applicable	false	true	Advances the iterator and returns the next value.  Returns [`None`] when iteration is finished. Individual iterator implementations may choose to resume iteration, and so calling `next()` again may or may not eventually start returning [`Some(Item)`] again at some point.  [`Some(Item)`]: Some  # Examples  ``` let a = [1, 2, 3];  let mut iter = a.into_iter();  // A call to next() returns the next value... assert_eq!(Some(1), iter.next()); assert_eq!(Some(2), iter.next()); assert_eq!(Some(3), iter.next());  // ... and then None once it's over. assert_eq!(None, iter.next());  // More calls may or may not return `None`. Here, they always will. assert_eq!(None, iter.next()); assert_eq!(None, iter.next()); ```
library/core/src/mem/mod.rs	align_of		function	public	safe	false	false	not applicable	false	true	Returns the [ABI]-required minimum alignment of a type in bytes.  Every reference to a value of the type `T` must be a multiple of this number.  This is the alignment used for struct fields. It may be smaller than the preferred alignment.  [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface  # Examples  ``` assert_eq!(4, align_of::<i32>()); ```
library/core/src/mem/mod.rs	drop		function	public	safe	false	false	not applicable	false	true	Disposes of a value.  This does so by calling the argument's implementation of [`Drop`][drop].  This effectively does nothing for types which implement `Copy`, e.g. integers. Such values are copied and _then_ moved into the function, so the value persists after this function call.  This function is not magic; it is literally defined as  ``` pub fn drop<T>(_x: T) {} ```  Because `_x` is moved into the function, it is automatically dropped before the function returns.  [drop]: Drop  # Examples  Basic usage:  ``` let v = vec![1, 2, 3];  drop(v); // explicitly drop the vector ```  Since [`RefCell`] enforces the borrow rules at runtime, `drop` can release a [`RefCell`] borrow:  ``` use std::cell::RefCell;  let x = RefCell::new(1);  let mut mutable_borrow = x.borrow_mut(); *mutable_borrow = 1;  drop(mutable_borrow); // relinquish the mutable borrow on this slot  let borrow = x.borrow(); println!("{}", *borrow); ```  Integers and other types implementing [`Copy`] are unaffected by `drop`.  ``` # #![allow(dropping_copy_types)] #[derive(Copy, Clone)] struct Foo(u8);  let x = 1; let y = Foo(2); drop(x); // a copy of `x` is moved and dropped drop(y); // a copy of `y` is moved and dropped  println!("x: {}, y: {}", x, y.0); // still available ```  [`RefCell`]: crate::cell::RefCell
library/core/src/mem/mod.rs	size_of		function	public	safe	false	false	not applicable	false	true	Returns the size of a type in bytes.  More specifically, this is the offset in bytes between successive elements in an array with that item type including alignment padding. Thus, for any type `T` and length `n`, `[T; n]` has a size of `n * size_of::<T>()`.  In general, the size of a type is not stable across compilations, but specific types such as primitives are.  The following table gives the size for primitives.  Type | `size_of::<Type>()` ---- | --------------- () | 0 bool | 1 u8 | 1 u16 | 2 u32 | 4 u64 | 8 u128 | 16 i8 | 1 i16 | 2 i32 | 4 i64 | 8 i128 | 16 f32 | 4 f64 | 8 char | 4  Furthermore, `usize` and `isize` have the same size.  The types [`*const T`], `&T`, [`Box<T>`], [`Option<&T>`], and `Option<Box<T>>` all have the same size. If `T` is `Sized`, all of those types have the same size as `usize`.  The mutability of a pointer does not change its size. As such, `&T` and `&mut T` have the same size. Likewise for `*const T` and `*mut T`.  # Size of `#[repr(C)]` items  The `C` representation for items has a defined layout. With this layout, the size of items is also stable as long as all fields have a stable size.  ## Size of Structs  For `struct`s, the size is determined by the following algorithm.  For each field in the struct ordered by declaration order:  1. Add the size of the field. 2. Round up the current size to the nearest multiple of the next field's [alignment].  Finally, round the size of the struct to the nearest multiple of its [alignment]. The alignment of the struct is usually the largest alignment of all its fields; this can be changed with the use of `repr(align(N))`.  Unlike `C`, zero sized structs are not rounded up to one byte in size.  ## Size of Enums  Enums that carry no data other than the discriminant have the same size as C enums on the platform they are compiled for.  ## Size of Unions  The size of a union is the size of its largest field.  Unlike `C`, zero sized unions are not rounded up to one byte in size.  # Examples  ``` // Some primitives assert_eq!(4, size_of::<i32>()); assert_eq!(8, size_of::<f64>()); assert_eq!(0, size_of::<()>());  // Some arrays assert_eq!(8, size_of::<[i32; 2]>()); assert_eq!(12, size_of::<[i32; 3]>()); assert_eq!(0, size_of::<[i32; 0]>());   // Pointer size equality assert_eq!(size_of::<&i32>(), size_of::<*const i32>()); assert_eq!(size_of::<&i32>(), size_of::<Box<i32>>()); assert_eq!(size_of::<&i32>(), size_of::<Option<&i32>>()); assert_eq!(size_of::<Box<i32>>(), size_of::<Option<Box<i32>>>()); ```  Using `#[repr(C)]`.  ``` #[repr(C)] struct FieldStruct {     first: u8,     second: u16,     third: u8 }  // The size of the first field is 1, so add 1 to the size. Size is 1. // The alignment of the second field is 2, so add 1 to the size for padding. Size is 2. // The size of the second field is 2, so add 2 to the size. Size is 4. // The alignment of the third field is 1, so add 0 to the size for padding. Size is 4. // The size of the third field is 1, so add 1 to the size. Size is 5. // Finally, the alignment of the struct is 2 (because the largest alignment amongst its // fields is 2), so add 1 to the size for padding. Size is 6. assert_eq!(6, size_of::<FieldStruct>());  #[repr(C)] struct TupleStruct(u8, u16, u8);  // Tuple structs follow the same rules. assert_eq!(6, size_of::<TupleStruct>());  // Note that reordering the fields can lower the size. We can remove both padding bytes // by putting `third` before `second`. #[repr(C)] struct FieldStructOptimized {     first: u8,     third: u8,     second: u16 }  assert_eq!(4, size_of::<FieldStructOptimized>());  // Union size is the size of the largest field. #[repr(C)] union ExampleUnion {     smaller: u8,     larger: u16 }  assert_eq!(2, size_of::<ExampleUnion>()); ```  [alignment]: align_of [`*const T`]: primitive@pointer [`Box<T>`]: ../../std/boxed/struct.Box.html [`Option<&T>`]: crate::option::Option 
library/core/src/num/mod.rs	u128::count_ones	impl u128	method	public	safe	false	false	not applicable	false	true	Returns the number of ones in the binary representation of `self`.  # Examples  ``` let n = 0b01001100u128; assert_eq!(n.count_ones(), 3);  let max = u128::MAX; assert_eq!(max.count_ones(), 128);  let zero = 0u128; assert_eq!(zero.count_ones(), 0); ```
library/core/src/num/mod.rs	u128::is_power_of_two	impl u128	method	public	safe	false	false	not applicable	false	true	Returns `true` if and only if `self == 2^k` for some unsigned integer `k`.  # Examples  ``` assert!(16u128.is_power_of_two()); assert!(!10u128.is_power_of_two()); ```
library/core/src/num/mod.rs	u16::count_ones	impl u16	method	public	safe	false	false	not applicable	false	true	Returns the number of ones in the binary representation of `self`.  # Examples  ``` let n = 0b01001100u16; assert_eq!(n.count_ones(), 3);  let max = u16::MAX; assert_eq!(max.count_ones(), 16);  let zero = 0u16; assert_eq!(zero.count_ones(), 0); ```
library/core/src/num/mod.rs	u16::is_power_of_two	impl u16	method	public	safe	false	false	not applicable	false	true	Returns `true` if and only if `self == 2^k` for some unsigned integer `k`.  # Examples  ``` assert!(16u16.is_power_of_two()); assert!(!10u16.is_power_of_two()); ```
library/core/src/num/mod.rs	u32::count_ones	impl u32	method	public	safe	false	false	not applicable	false	true	Returns the number of ones in the binary representation of `self`.  # Examples  ``` let n = 0b01001100u32; assert_eq!(n.count_ones(), 3);  let max = u32::MAX; assert_eq!(max.count_ones(), 32);  let zero = 0u32; assert_eq!(zero.count_ones(), 0); ```
library/core/src/num/mod.rs	u32::is_power_of_two	impl u32	method	public	safe	false	false	not applicable	false	true	Returns `true` if and only if `self == 2^k` for some unsigned integer `k`.  # Examples  ``` assert!(16u32.is_power_of_two()); assert!(!10u32.is_power_of_two()); ```
library/core/src/num/mod.rs	u64::count_ones	impl u64	method	public	safe	false	false	not applicable	false	true	Returns the number of ones in the binary representation of `self`.  # Examples  ``` let n = 0b01001100u64; assert_eq!(n.count_ones(), 3);  let max = u64::MAX; assert_eq!(max.count_ones(), 64);  let zero = 0u64; assert_eq!(zero.count_ones(), 0); ```
library/core/src/num/mod.rs	u64::is_power_of_two	impl u64	method	public	safe	false	false	not applicable	false	true	Returns `true` if and only if `self == 2^k` for some unsigned integer `k`.  # Examples  ``` assert!(16u64.is_power_of_two()); assert!(!10u64.is_power_of_two()); ```
library/core/src/num/mod.rs	u8::count_ones	impl u8	method	public	safe	false	false	not applicable	false	true	Returns the number of ones in the binary representation of `self`.  # Examples  ``` let n = 0b01001100u8; assert_eq!(n.count_ones(), 3);  let max = u8::MAX; assert_eq!(max.count_ones(), 8);  let zero = 0u8; assert_eq!(zero.count_ones(), 0); ```
library/core/src/num/mod.rs	u8::is_power_of_two	impl u8	method	public	safe	false	false	not applicable	false	true	Returns `true` if and only if `self == 2^k` for some unsigned integer `k`.  # Examples  ``` assert!(16u8.is_power_of_two()); assert!(!10u8.is_power_of_two()); ```
library/core/src/num/mod.rs	usize::count_ones	impl usize	method	public	safe	false	false	not applicable	false	true	Returns the number of ones in the binary representation of `self`.  # Examples  ``` let n = 0b01001100usize; assert_eq!(n.count_ones(), 3);  let max = usize::MAX; assert_eq!(max.count_ones(), 64);  let zero = 0usize; assert_eq!(zero.count_ones(), 0); ```
library/core/src/num/mod.rs	usize::is_power_of_two	impl usize	method	public	safe	false	false	not applicable	false	true	Returns `true` if and only if `self == 2^k` for some unsigned integer `k`.  # Examples  ``` assert!(16usize.is_power_of_two()); assert!(!10usize.is_power_of_two()); ```
library/core/src/ops/arith.rs	Add::add		trait method definition	public	safe	false	false	not applicable	false	true	Performs the `+` operation.  # Example  ``` assert_eq!(12 + 1, 13); ```
library/core/src/ops/arith.rs	Add::add	impl Add for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl<'a> Add<usize> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&usize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&usize> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl<'a> Add<u8> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&u8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&u8> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl<'a> Add<u16> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&u16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&u16> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl<'a> Add<u32> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&u32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&u32> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl<'a> Add<u64> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&u64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&u64> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl<'a> Add<u128> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&u128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&u128> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl<'a> Add<isize> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&isize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&isize> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl<'a> Add<i8> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&i8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&i8> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl<'a> Add<i16> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&i16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&i16> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl<'a> Add<i32> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&i32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&i32> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl<'a> Add<i64> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&i64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&i64> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl<'a> Add<i128> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&i128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&i128> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl<'a> Add<f32> for &'a f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&f32> for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&f32> for &f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl<'a> Add<f64> for &'a f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&f64> for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Add::add	impl Add<&f64> for &f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign		trait method definition	public	safe	false	false	not applicable	false	true	Performs the `+=` operation.  # Example  ``` let mut x: u32 = 12; x += 1; assert_eq!(x, 13); ```
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign<&usize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign<&u8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign<&u16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign<&u32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign<&u64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign<&u128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign<&isize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign<&i8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign<&i16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign<&i32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign<&i64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign<&i128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign<&f32> for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	AddAssign::add_assign	impl AddAssign<&f64> for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div		trait method definition	public	safe	false	false	not applicable	false	true	Performs the `/` operation.  # Example  ``` assert_eq!(12 / 2, 6); ```
library/core/src/ops/arith.rs	Div::div	impl Div for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl<'a> Div<usize> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&usize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&usize> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl<'a> Div<u8> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&u8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&u8> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl<'a> Div<u16> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&u16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&u16> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl<'a> Div<u32> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&u32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&u32> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl<'a> Div<u64> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&u64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&u64> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl<'a> Div<u128> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&u128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&u128> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl<'a> Div<isize> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&isize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&isize> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl<'a> Div<i8> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&i8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&i8> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl<'a> Div<i16> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&i16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&i16> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl<'a> Div<i32> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&i32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&i32> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl<'a> Div<i64> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&i64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&i64> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl<'a> Div<i128> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&i128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&i128> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl<'a> Div<f32> for &'a f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&f32> for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&f32> for &f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl<'a> Div<f64> for &'a f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&f64> for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Div::div	impl Div<&f64> for &f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign		trait method definition	public	safe	false	false	not applicable	false	true	Performs the `/=` operation.  # Example  ``` let mut x: u32 = 12; x /= 2; assert_eq!(x, 6); ```
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign<&usize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign<&u8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign<&u16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign<&u32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign<&u64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign<&u128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign<&isize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign<&i8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign<&i16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign<&i32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign<&i64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign<&i128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign<&f32> for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	DivAssign::div_assign	impl DivAssign<&f64> for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul		trait method definition	public	safe	false	false	not applicable	false	true	Performs the `*` operation.  # Example  ``` assert_eq!(12 * 2, 24); ```
library/core/src/ops/arith.rs	Mul::mul	impl Mul for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl<'a> Mul<usize> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&usize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&usize> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl<'a> Mul<u8> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&u8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&u8> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl<'a> Mul<u16> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&u16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&u16> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl<'a> Mul<u32> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&u32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&u32> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl<'a> Mul<u64> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&u64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&u64> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl<'a> Mul<u128> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&u128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&u128> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl<'a> Mul<isize> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&isize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&isize> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl<'a> Mul<i8> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&i8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&i8> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl<'a> Mul<i16> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&i16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&i16> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl<'a> Mul<i32> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&i32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&i32> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl<'a> Mul<i64> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&i64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&i64> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl<'a> Mul<i128> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&i128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&i128> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl<'a> Mul<f32> for &'a f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&f32> for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&f32> for &f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl<'a> Mul<f64> for &'a f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&f64> for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Mul::mul	impl Mul<&f64> for &f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign		trait method definition	public	safe	false	false	not applicable	false	true	Performs the `*=` operation.  # Example  ``` let mut x: u32 = 12; x *= 2; assert_eq!(x, 24); ```
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign<&usize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign<&u8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign<&u16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign<&u32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign<&u64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign<&u128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign<&isize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign<&i8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign<&i16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign<&i32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign<&i64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign<&i128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign<&f32> for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	MulAssign::mul_assign	impl MulAssign<&f64> for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Neg::neg		trait method definition	public	safe	false	false	not applicable	false	true	Performs the unary `-` operation.  # Example  ``` let x: i32 = 12; assert_eq!(-x, -12); ```
library/core/src/ops/arith.rs	Neg::neg	impl Neg for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Neg::neg	impl Neg for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Neg::neg	impl Neg for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Neg::neg	impl Neg for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Neg::neg	impl Neg for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Neg::neg	impl Neg for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Neg::neg	impl Neg for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Neg::neg	impl Neg for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Neg::neg	impl Neg for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Neg::neg	impl Neg for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Neg::neg	impl Neg for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Neg::neg	impl Neg for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Neg::neg	impl Neg for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Neg::neg	impl Neg for &f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Neg::neg	impl Neg for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Neg::neg	impl Neg for &f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem		trait method definition	public	safe	false	false	not applicable	false	true	Performs the `%` operation.  # Example  ``` assert_eq!(12 % 10, 2); ```
library/core/src/ops/arith.rs	Rem::rem	impl Rem for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl<'a> Rem<usize> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&usize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&usize> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl<'a> Rem<u8> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&u8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&u8> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl<'a> Rem<u16> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&u16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&u16> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl<'a> Rem<u32> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&u32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&u32> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl<'a> Rem<u64> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&u64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&u64> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl<'a> Rem<u128> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&u128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&u128> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl<'a> Rem<isize> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&isize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&isize> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl<'a> Rem<i8> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&i8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&i8> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl<'a> Rem<i16> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&i16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&i16> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl<'a> Rem<i32> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&i32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&i32> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl<'a> Rem<i64> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&i64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&i64> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl<'a> Rem<i128> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&i128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&i128> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl<'a> Rem<f32> for &'a f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&f32> for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&f32> for &f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl<'a> Rem<f64> for &'a f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&f64> for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Rem::rem	impl Rem<&f64> for &f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign		trait method definition	public	safe	false	false	not applicable	false	true	Performs the `%=` operation.  # Example  ``` let mut x: u32 = 12; x %= 10; assert_eq!(x, 2); ```
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign<&usize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign<&u8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign<&u16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign<&u32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign<&u64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign<&u128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign<&isize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign<&i8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign<&i16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign<&i32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign<&i64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign<&i128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign<&f32> for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	RemAssign::rem_assign	impl RemAssign<&f64> for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub		trait method definition	public	safe	false	false	not applicable	false	true	Performs the `-` operation.  # Example  ``` assert_eq!(12 - 1, 11); ```
library/core/src/ops/arith.rs	Sub::sub	impl Sub for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl<'a> Sub<usize> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&usize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&usize> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl<'a> Sub<u8> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&u8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&u8> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl<'a> Sub<u16> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&u16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&u16> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl<'a> Sub<u32> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&u32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&u32> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl<'a> Sub<u64> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&u64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&u64> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl<'a> Sub<u128> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&u128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&u128> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl<'a> Sub<isize> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&isize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&isize> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl<'a> Sub<i8> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&i8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&i8> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl<'a> Sub<i16> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&i16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&i16> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl<'a> Sub<i32> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&i32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&i32> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl<'a> Sub<i64> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&i64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&i64> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl<'a> Sub<i128> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&i128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&i128> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl<'a> Sub<f32> for &'a f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&f32> for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&f32> for &f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl<'a> Sub<f64> for &'a f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&f64> for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	Sub::sub	impl Sub<&f64> for &f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign		trait method definition	public	safe	false	false	not applicable	false	true	Performs the `-=` operation.  # Example  ``` let mut x: u32 = 12; x -= 1; assert_eq!(x, 11); ```
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign<&usize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign<&u8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign<&u16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign<&u32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign<&u64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign<&u128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign<&isize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign<&i8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign<&i16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign<&i32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign<&i64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign<&i128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign<&f32> for f32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/arith.rs	SubAssign::sub_assign	impl SubAssign<&f64> for f64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand		trait method definition	public	safe	false	false	not applicable	false	true	Performs the `&` operation.  # Examples  ``` assert_eq!(true & false, false); assert_eq!(true & true, true); assert_eq!(5u8 & 1u8, 1); assert_eq!(5u8 & 2u8, 0); ```
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl<'a> BitAnd<bool> for &'a bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&bool> for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&bool> for &bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl<'a> BitAnd<usize> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&usize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&usize> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl<'a> BitAnd<u8> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&u8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&u8> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl<'a> BitAnd<u16> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&u16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&u16> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl<'a> BitAnd<u32> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&u32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&u32> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl<'a> BitAnd<u64> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&u64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&u64> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl<'a> BitAnd<u128> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&u128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&u128> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl<'a> BitAnd<isize> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&isize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&isize> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl<'a> BitAnd<i8> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&i8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&i8> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl<'a> BitAnd<i16> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&i16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&i16> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl<'a> BitAnd<i32> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&i32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&i32> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl<'a> BitAnd<i64> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&i64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&i64> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl<'a> BitAnd<i128> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&i128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAnd::bitand	impl BitAnd<&i128> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign		trait method definition	public	safe	false	false	not applicable	false	true	Performs the `&=` operation.  # Examples  ``` let mut x = true; x &= false; assert_eq!(x, false);  let mut x = true; x &= true; assert_eq!(x, true);  let mut x: u8 = 5; x &= 1; assert_eq!(x, 1);  let mut x: u8 = 5; x &= 2; assert_eq!(x, 0); ```
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign<&bool> for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign<&usize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign<&u8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign<&u16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign<&u32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign<&u64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign<&u128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign<&isize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign<&i8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign<&i16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign<&i32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign<&i64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitAndAssign::bitand_assign	impl BitAndAssign<&i128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor		trait method definition	public	safe	false	false	not applicable	false	true	Performs the `|` operation.  # Examples  ``` assert_eq!(true | false, true); assert_eq!(false | false, false); assert_eq!(5u8 | 1u8, 5); assert_eq!(5u8 | 2u8, 7); ```
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl<'a> BitOr<bool> for &'a bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&bool> for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&bool> for &bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl<'a> BitOr<usize> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&usize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&usize> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl<'a> BitOr<u8> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&u8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&u8> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl<'a> BitOr<u16> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&u16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&u16> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl<'a> BitOr<u32> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&u32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&u32> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl<'a> BitOr<u64> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&u64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&u64> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl<'a> BitOr<u128> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&u128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&u128> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl<'a> BitOr<isize> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&isize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&isize> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl<'a> BitOr<i8> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&i8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&i8> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl<'a> BitOr<i16> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&i16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&i16> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl<'a> BitOr<i32> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&i32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&i32> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl<'a> BitOr<i64> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&i64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&i64> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl<'a> BitOr<i128> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&i128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOr::bitor	impl BitOr<&i128> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign		trait method definition	public	safe	false	false	not applicable	false	true	Performs the `|=` operation.  # Examples  ``` let mut x = true; x |= false; assert_eq!(x, true);  let mut x = false; x |= false; assert_eq!(x, false);  let mut x: u8 = 5; x |= 1; assert_eq!(x, 5);  let mut x: u8 = 5; x |= 2; assert_eq!(x, 7); ```
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign<&bool> for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign<&usize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign<&u8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign<&u16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign<&u32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign<&u64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign<&u128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign<&isize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign<&i8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign<&i16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign<&i32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign<&i64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitOrAssign::bitor_assign	impl BitOrAssign<&i128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor		trait method definition	public	safe	false	false	not applicable	false	true	Performs the `^` operation.  # Examples  ``` assert_eq!(true ^ false, true); assert_eq!(true ^ true, false); assert_eq!(5u8 ^ 1u8, 4); assert_eq!(5u8 ^ 2u8, 7); ```
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl<'a> BitXor<bool> for &'a bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&bool> for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&bool> for &bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl<'a> BitXor<usize> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&usize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&usize> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl<'a> BitXor<u8> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&u8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&u8> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl<'a> BitXor<u16> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&u16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&u16> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl<'a> BitXor<u32> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&u32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&u32> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl<'a> BitXor<u64> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&u64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&u64> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl<'a> BitXor<u128> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&u128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&u128> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl<'a> BitXor<isize> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&isize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&isize> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl<'a> BitXor<i8> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&i8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&i8> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl<'a> BitXor<i16> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&i16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&i16> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl<'a> BitXor<i32> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&i32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&i32> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl<'a> BitXor<i64> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&i64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&i64> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl<'a> BitXor<i128> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&i128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXor::bitxor	impl BitXor<&i128> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign		trait method definition	public	safe	false	false	not applicable	false	true	Performs the `^=` operation.  # Examples  ``` let mut x = true; x ^= false; assert_eq!(x, true);  let mut x = true; x ^= true; assert_eq!(x, false);  let mut x: u8 = 5; x ^= 1; assert_eq!(x, 4);  let mut x: u8 = 5; x ^= 2; assert_eq!(x, 7); ```
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign<&bool> for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign<&usize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign<&u8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign<&u16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign<&u32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign<&u64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign<&u128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign<&isize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign<&i8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign<&i16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign<&i32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign<&i64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	BitXorAssign::bitxor_assign	impl BitXorAssign<&i128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not		trait method definition	public	safe	false	false	not applicable	false	true	Performs the unary `!` operation.  # Examples  ``` assert_eq!(!true, false); assert_eq!(!false, true); assert_eq!(!1u8, 254); assert_eq!(!0u8, 255); ```
library/core/src/ops/bit.rs	Not::not	impl Not for bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for &bool	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Not::not	impl Not for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl		trait method definition	public	safe	false	false	not applicable	false	true	Performs the `<<` operation.  # Examples  ``` assert_eq!(5u8 << 1, 10); assert_eq!(1u8 << 1, 2); ```
library/core/src/ops/bit.rs	Shl::shl	impl Shl for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u8> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u16> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u16> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u32> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u32> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u64> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u64> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u128> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u128> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<usize> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<usize> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i8> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i16> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i16> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i32> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i32> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i64> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i64> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i128> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i128> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<isize> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<isize> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u8> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u8> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u16> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u32> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u32> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u64> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u64> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u128> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u128> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<usize> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<usize> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i8> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i8> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i16> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i32> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i32> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i64> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i64> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i128> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i128> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<isize> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<isize> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u8> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u8> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u16> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u16> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u32> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u64> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u64> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u128> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u128> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<usize> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<usize> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i8> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i8> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i16> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i16> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i32> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i64> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i64> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i128> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i128> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<isize> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<isize> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u8> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u8> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u16> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u16> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u32> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u32> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u64> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u128> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u128> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<usize> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<usize> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i8> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i8> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i16> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i16> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i32> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i32> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i64> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i128> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i128> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<isize> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<isize> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u8> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u8> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u16> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u16> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u32> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u32> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u64> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u64> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u128> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<usize> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<usize> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i8> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i8> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i16> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i16> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i32> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i32> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i64> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i64> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i128> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<isize> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<isize> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u8> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u8> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u16> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u16> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u32> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u32> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u64> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u64> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u128> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u128> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<usize> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i8> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i8> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i16> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i16> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i32> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i32> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i64> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i64> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i128> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i128> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<isize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<isize> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u8> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u16> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u16> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u32> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u32> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u64> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u64> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u128> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u128> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<usize> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<usize> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i8> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i16> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i16> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i32> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i32> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i64> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i64> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i128> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i128> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<isize> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<isize> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u8> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u8> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u16> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u32> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u32> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u64> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u64> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u128> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u128> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<usize> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<usize> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i8> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i8> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i16> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i32> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i32> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i64> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i64> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i128> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i128> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<isize> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<isize> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u8> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u8> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u16> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u16> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u32> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u64> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u64> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u128> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u128> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<usize> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<usize> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i8> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i8> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i16> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i16> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i32> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i64> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i64> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i128> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i128> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<isize> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<isize> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u8> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u8> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u16> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u16> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u32> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u32> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u64> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u128> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u128> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<usize> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<usize> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i8> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i8> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i16> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i16> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i32> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i32> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i64> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i128> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i128> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<isize> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<isize> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u8> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u8> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u16> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u16> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u32> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u32> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u64> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u64> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u128> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<usize> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<usize> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i8> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i8> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i16> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i16> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i32> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i32> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i64> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i64> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i128> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<isize> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<isize> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u8> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u8> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u8> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u16> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u16> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u16> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u32> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u32> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u32> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u64> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u64> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u64> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<u128> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<u128> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&u128> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<usize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<usize> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&usize> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i8> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i8> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i8> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i16> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i16> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i16> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i32> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i32> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i32> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i64> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i64> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i64> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<i128> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<i128> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&i128> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl<'a> Shl<isize> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shl::shl	impl Shl<&isize> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign		trait method definition	public	safe	false	false	not applicable	false	true	Performs the `<<=` operation.  # Examples  ``` let mut x: u8 = 5; x <<= 1; assert_eq!(x, 10);  let mut x: u8 = 1; x <<= 1; assert_eq!(x, 2); ```
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u16> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u16> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u32> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u32> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u64> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u64> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u128> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u128> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<usize> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&usize> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i16> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i16> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i32> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i32> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i64> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i64> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i128> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i128> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<isize> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&isize> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u8> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u8> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u32> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u32> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u64> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u64> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u128> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u128> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<usize> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&usize> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i8> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i8> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i32> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i32> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i64> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i64> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i128> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i128> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<isize> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&isize> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u8> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u8> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u16> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u16> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u64> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u64> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u128> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u128> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<usize> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&usize> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i8> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i8> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i16> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i16> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i64> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i64> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i128> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i128> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<isize> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&isize> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u8> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u8> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u16> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u16> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u32> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u32> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u128> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u128> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<usize> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&usize> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i8> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i8> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i16> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i16> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i32> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i32> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i128> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i128> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<isize> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&isize> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u8> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u8> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u16> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u16> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u32> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u32> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u64> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u64> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<usize> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&usize> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i8> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i8> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i16> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i16> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i32> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i32> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i64> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i64> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<isize> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&isize> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u8> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u8> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u16> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u16> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u32> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u32> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u64> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u64> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u128> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u128> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&usize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i8> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i8> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i16> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i16> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i32> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i32> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i64> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i64> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i128> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i128> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<isize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&isize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u16> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u16> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u32> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u32> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u64> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u64> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u128> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u128> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<usize> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&usize> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i16> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i16> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i32> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i32> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i64> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i64> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i128> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i128> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<isize> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&isize> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u8> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u8> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u32> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u32> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u64> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u64> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u128> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u128> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<usize> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&usize> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i8> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i8> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i32> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i32> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i64> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i64> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i128> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i128> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<isize> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&isize> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u8> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u8> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u16> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u16> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u64> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u64> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u128> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u128> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<usize> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&usize> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i8> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i8> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i16> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i16> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i64> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i64> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i128> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i128> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<isize> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&isize> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u8> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u8> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u16> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u16> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u32> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u32> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u128> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u128> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<usize> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&usize> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i8> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i8> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i16> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i16> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i32> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i32> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i128> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i128> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<isize> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&isize> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u8> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u8> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u16> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u16> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u32> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u32> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u64> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u64> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<usize> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&usize> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i8> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i8> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i16> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i16> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i32> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i32> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i64> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i64> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<isize> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&isize> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u8> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u8> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u16> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u16> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u32> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u32> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u64> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u64> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<u128> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&u128> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<usize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&usize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i8> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i8> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i16> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i16> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i32> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i32> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i64> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i64> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<i128> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&i128> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShlAssign::shl_assign	impl ShlAssign<&isize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr		trait method definition	public	safe	false	false	not applicable	false	true	Performs the `>>` operation.  # Examples  ``` assert_eq!(5u8 >> 1, 2); assert_eq!(2u8 >> 1, 1); ```
library/core/src/ops/bit.rs	Shr::shr	impl Shr for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u8> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u16> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u16> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u32> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u32> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u64> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u64> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u128> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u128> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<usize> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<usize> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i8> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i16> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i16> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i32> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i32> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i64> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i64> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i128> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i128> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<isize> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<isize> for &'a u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for &u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u8> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u8> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u16> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u32> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u32> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u64> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u64> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u128> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u128> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<usize> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<usize> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i8> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i8> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i16> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i32> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i32> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i64> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i64> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i128> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i128> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<isize> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<isize> for &'a u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for &u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u8> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u8> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u16> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u16> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u32> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u64> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u64> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u128> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u128> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<usize> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<usize> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i8> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i8> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i16> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i16> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i32> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i64> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i64> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i128> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i128> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<isize> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<isize> for &'a u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for &u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u8> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u8> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u16> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u16> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u32> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u32> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u64> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u128> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u128> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<usize> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<usize> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i8> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i8> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i16> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i16> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i32> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i32> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i64> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i128> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i128> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<isize> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<isize> for &'a u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for &u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u8> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u8> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u16> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u16> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u32> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u32> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u64> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u64> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u128> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<usize> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<usize> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i8> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i8> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i16> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i16> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i32> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i32> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i64> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i64> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i128> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<isize> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<isize> for &'a u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for &u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u8> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u8> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u16> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u16> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u32> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u32> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u64> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u64> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u128> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u128> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<usize> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i8> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i8> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i16> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i16> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i32> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i32> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i64> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i64> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i128> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i128> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<isize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<isize> for &'a usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for &usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u8> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u16> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u16> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u32> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u32> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u64> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u64> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u128> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u128> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<usize> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<usize> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i8> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i16> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i16> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i32> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i32> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i64> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i64> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i128> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i128> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<isize> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<isize> for &'a i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for &i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u8> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u8> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u16> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u32> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u32> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u64> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u64> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u128> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u128> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<usize> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<usize> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i8> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i8> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i16> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i32> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i32> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i64> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i64> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i128> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i128> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<isize> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<isize> for &'a i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for &i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u8> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u8> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u16> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u16> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u32> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u64> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u64> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u128> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u128> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<usize> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<usize> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i8> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i8> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i16> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i16> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i32> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i64> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i64> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i128> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i128> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<isize> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<isize> for &'a i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for &i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u8> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u8> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u16> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u16> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u32> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u32> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u64> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u128> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u128> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<usize> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<usize> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i8> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i8> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i16> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i16> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i32> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i32> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i64> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i128> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i128> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<isize> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<isize> for &'a i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for &i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u8> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u8> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u16> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u16> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u32> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u32> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u64> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u64> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u128> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<usize> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<usize> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i8> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i8> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i16> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i16> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i32> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i32> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i64> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i64> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i128> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<isize> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<isize> for &'a i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for &i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u8> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u8> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u8> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u16> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u16> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u16> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u32> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u32> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u32> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u64> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u64> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u64> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<u128> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<u128> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&u128> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<usize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<usize> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&usize> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i8> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i8> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i8> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i16> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i16> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i16> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i32> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i32> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i32> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i64> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i64> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i64> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<i128> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<i128> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&i128> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl<'a> Shr<isize> for &'a isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	Shr::shr	impl Shr<&isize> for &isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign		trait method definition	public	safe	false	false	not applicable	false	true	Performs the `>>=` operation.  # Examples  ``` let mut x: u8 = 5; x >>= 1; assert_eq!(x, 2);  let mut x: u8 = 2; x >>= 1; assert_eq!(x, 1); ```
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u16> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u16> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u32> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u32> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u64> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u64> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u128> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u128> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<usize> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&usize> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i8> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i16> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i16> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i32> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i32> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i64> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i64> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i128> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i128> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<isize> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&isize> for u8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u8> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u8> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u32> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u32> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u64> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u64> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u128> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u128> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<usize> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&usize> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i8> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i8> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i16> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i32> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i32> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i64> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i64> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i128> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i128> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<isize> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&isize> for u16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u8> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u8> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u16> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u16> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u64> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u64> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u128> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u128> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<usize> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&usize> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i8> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i8> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i16> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i16> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i32> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i64> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i64> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i128> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i128> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<isize> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&isize> for u32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u8> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u8> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u16> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u16> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u32> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u32> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u128> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u128> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<usize> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&usize> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i8> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i8> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i16> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i16> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i32> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i32> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i64> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i128> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i128> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<isize> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&isize> for u64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u8> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u8> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u16> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u16> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u32> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u32> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u64> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u64> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<usize> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&usize> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i8> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i8> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i16> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i16> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i32> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i32> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i64> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i64> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i128> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<isize> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&isize> for u128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u8> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u8> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u16> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u16> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u32> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u32> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u64> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u64> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u128> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u128> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&usize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i8> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i8> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i16> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i16> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i32> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i32> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i64> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i64> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i128> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i128> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<isize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&isize> for usize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u16> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u16> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u32> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u32> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u64> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u64> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u128> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u128> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<usize> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&usize> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i8> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i16> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i16> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i32> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i32> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i64> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i64> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i128> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i128> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<isize> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&isize> for i8	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u8> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u8> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u32> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u32> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u64> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u64> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u128> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u128> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<usize> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&usize> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i8> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i8> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i16> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i32> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i32> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i64> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i64> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i128> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i128> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<isize> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&isize> for i16	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u8> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u8> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u16> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u16> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u64> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u64> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u128> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u128> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<usize> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&usize> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i8> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i8> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i16> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i16> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i32> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i64> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i64> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i128> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i128> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<isize> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&isize> for i32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u8> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u8> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u16> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u16> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u32> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u32> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u128> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u128> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<usize> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&usize> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i8> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i8> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i16> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i16> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i32> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i32> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i64> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i128> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i128> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<isize> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&isize> for i64	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u8> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u8> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u16> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u16> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u32> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u32> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u64> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u64> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<usize> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&usize> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i8> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i8> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i16> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i16> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i32> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i32> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i64> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i64> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i128> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<isize> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&isize> for i128	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u8> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u8> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u16> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u16> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u32> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u32> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u64> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u64> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<u128> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&u128> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<usize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&usize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i8> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i8> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i16> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i16> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i32> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i32> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i64> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i64> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<i128> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&i128> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/bit.rs	ShrAssign::shr_assign	impl ShrAssign<&isize> for isize	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/control_flow.rs	ControlFlow::branch	impl<B, C> Try for ControlFlow<B, C>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/control_flow.rs	ControlFlow::break_value	impl<B, C> ControlFlow<B, C>	method	public	safe	false	false	not applicable	false	true	Converts the `ControlFlow` into an `Option` which is `Some` if the `ControlFlow` was `Break` and `None` otherwise.  # Examples  ``` use std::ops::ControlFlow;  assert_eq!(ControlFlow::<&str, i32>::Break("Stop right there!").break_value(), Some("Stop right there!")); assert_eq!(ControlFlow::<&str, i32>::Continue(3).break_value(), None); ```
library/core/src/ops/control_flow.rs	ControlFlow::continue_value	impl<B, C> ControlFlow<B, C>	method	public	safe	false	false	not applicable	false	true	Converts the `ControlFlow` into an `Option` which is `Some` if the `ControlFlow` was `Continue` and `None` otherwise.  # Examples  ``` use std::ops::ControlFlow;  assert_eq!(ControlFlow::<&str, i32>::Break("Stop right there!").continue_value(), None); assert_eq!(ControlFlow::<&str, i32>::Continue(3).continue_value(), Some(3)); ```
library/core/src/ops/control_flow.rs	ControlFlow::from_output	impl<B, C> Try for ControlFlow<B, C>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/control_flow.rs	ControlFlow::from_residual	impl<B, C> FromResidual<ControlFlow<B, Infallible>> for ControlFlow<B, C>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/control_flow.rs	ControlFlow::into_value	impl<T> ControlFlow<T, T>	method	public	safe	false	false	not applicable	false	true	Extracts the value `T` that is wrapped by `ControlFlow<T, T>`.  # Examples  ``` #![feature(control_flow_into_value)] use std::ops::ControlFlow;  assert_eq!(ControlFlow::<i32, i32>::Break(1024).into_value(), 1024); assert_eq!(ControlFlow::<i32, i32>::Continue(512).into_value(), 512); ```
library/core/src/ops/control_flow.rs	ControlFlow::is_break	impl<B, C> ControlFlow<B, C>	method	public	safe	false	false	not applicable	false	true	Returns `true` if this is a `Break` variant.  # Examples  ``` use std::ops::ControlFlow;  assert!(ControlFlow::<&str, i32>::Break("Stop right there!").is_break()); assert!(!ControlFlow::<&str, i32>::Continue(3).is_break()); ```
library/core/src/ops/control_flow.rs	ControlFlow::is_continue	impl<B, C> ControlFlow<B, C>	method	public	safe	false	false	not applicable	false	true	Returns `true` if this is a `Continue` variant.  # Examples  ``` use std::ops::ControlFlow;  assert!(!ControlFlow::<&str, i32>::Break("Stop right there!").is_continue()); assert!(ControlFlow::<&str, i32>::Continue(3).is_continue()); ```
library/core/src/ops/control_flow.rs	ControlFlow::map_break	impl<B, C> ControlFlow<B, C>	method	public	safe	false	false	not applicable	false	false	Maps `ControlFlow<B, C>` to `ControlFlow<T, C>` by applying a function to the break value in case it exists.
library/core/src/ops/control_flow.rs	ControlFlow::map_continue	impl<B, C> ControlFlow<B, C>	method	public	safe	false	false	not applicable	false	false	Maps `ControlFlow<B, C>` to `ControlFlow<B, T>` by applying a function to the continue value in case it exists.
library/core/src/ops/deref.rs	Deref::deref		trait method definition	public	safe	false	false	not applicable	false	false	Dereferences the value.
library/core/src/ops/deref.rs	Deref::deref	impl<T: ?Sized> Deref for &T	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/deref.rs	Deref::deref	impl<T: ?Sized> Deref for &mut T	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/deref.rs	DerefMut::deref_mut		trait method definition	public	safe	false	false	not applicable	false	false	Mutably dereferences the value.
library/core/src/ops/deref.rs	DerefMut::deref_mut	impl<T: ?Sized> DerefMut for &mut T	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/drop.rs	Drop::drop		trait method definition	public	safe	false	false	not applicable	true	false	Executes the destructor for this type.  This method is called implicitly when the value goes out of scope, and cannot be called explicitly (this is compiler error [E0040]). However, the [`mem::drop`] function in the prelude can be used to call the argument's `Drop` implementation.  When this method has been called, `self` has not yet been deallocated. That only happens after the method is over. If this wasn't the case, `self` would be a dangling reference.  # Panics  Implementations should generally avoid [`panic!`]ing, because `drop()` may itself be called during unwinding due to a panic, and if the `drop()` panics in that situation (a “double panic”), this will likely abort the program. It is possible to check [`panicking()`] first, which may be desirable for a `Drop` implementation that is reporting a bug of the kind “you didn't finish using this before it was dropped”; but most types should simply clean up their owned allocations or other resources and return normally from `drop()`, regardless of what state they are in.  Note that even if this panics, the value is considered to be dropped; you must not cause `drop` to be called again. This is normally automatically handled by the compiler, but when using unsafe code, can sometimes occur unintentionally, particularly when using [`ptr::drop_in_place`].  [E0040]: ../../error_codes/E0040.html [`panic!`]: crate::panic! [`panicking()`]: ../../std/thread/fn.panicking.html [`mem::drop`]: drop [`ptr::drop_in_place`]: crate::ptr::drop_in_place
library/core/src/ops/function.rs	Fn::call		trait method definition	public	safe	false	true	not applicable	false	false	Performs the call operation.
library/core/src/ops/function.rs	Fn::call	impl<A: Tuple, F> Fn<A> for &F where F: Fn<A> + ?Sized	trait method implementation	public	safe	false	true	not applicable	false	false	
library/core/src/ops/function.rs	FnMut::call_mut		trait method definition	public	safe	false	true	not applicable	false	false	Performs the call operation.
library/core/src/ops/function.rs	FnMut::call_mut	impl<A: Tuple, F> FnMut<A> for &F where F: Fn<A> + ?Sized	trait method implementation	public	safe	false	true	not applicable	false	false	
library/core/src/ops/function.rs	FnMut::call_mut	impl<A: Tuple, F> FnMut<A> for &mut F where F: FnMut<A> + ?Sized	trait method implementation	public	safe	false	true	not applicable	false	false	
library/core/src/ops/function.rs	FnOnce::call_once		trait method definition	public	safe	false	true	not applicable	false	false	Performs the call operation.
library/core/src/ops/function.rs	FnOnce::call_once	impl<A: Tuple, F> FnOnce<A> for &F where F: Fn<A> + ?Sized	trait method implementation	public	safe	false	true	not applicable	false	false	
library/core/src/ops/function.rs	FnOnce::call_once	impl<A: Tuple, F> FnOnce<A> for &mut F where F: FnMut<A> + ?Sized	trait method implementation	public	safe	false	true	not applicable	false	false	
library/core/src/ops/range.rs	Bound::as_mut	impl<T> Bound<T>	method	public	safe	false	true	not applicable	false	false	Converts from `&mut Bound<T>` to `Bound<&mut T>`.
library/core/src/ops/range.rs	Bound::as_ref	impl<T> Bound<T>	method	public	safe	false	false	not applicable	false	false	Converts from `&Bound<T>` to `Bound<&T>`.
library/core/src/ops/range.rs	Bound::cloned	impl<T: Clone> Bound<&T>	method	public	safe	false	false	not applicable	false	true	Map a `Bound<&T>` to a `Bound<T>` by cloning the contents of the bound.  # Examples  ``` use std::ops::Bound::*; use std::ops::RangeBounds;  assert_eq!((1..12).start_bound(), Included(&1)); assert_eq!((1..12).start_bound().cloned(), Included(1)); ```
library/core/src/ops/range.rs	Bound::map	impl<T> Bound<T>	method	public	safe	false	false	not applicable	false	true	Maps a `Bound<T>` to a `Bound<U>` by applying a function to the contained value (including both `Included` and `Excluded`), returning a `Bound` of the same kind.  # Examples  ``` use std::ops::Bound::*;  let bound_string = Included("Hello, World!");  assert_eq!(bound_string.map(|s| s.len()), Included(13)); ```  ``` use std::ops::Bound; use Bound::*;  let unbounded_string: Bound<String> = Unbounded;  assert_eq!(unbounded_string.map(|s| s.len()), Unbounded); ```
library/core/src/ops/range.rs	IntoBounds::into_bounds		trait method definition	public	safe	false	false	not applicable	false	true	Convert this range into the start and end bounds. Returns `(start_bound, end_bound)`.  # Examples  ``` #![feature(range_into_bounds)] use std::ops::Bound::*; use std::ops::IntoBounds;  assert_eq!((0..5).into_bounds(), (Included(0), Excluded(5))); assert_eq!((..=7).into_bounds(), (Unbounded, Included(7))); ```
library/core/src/ops/range.rs	IntoBounds::into_bounds	impl<T> IntoBounds<T> for (Bound<T>, Bound<T>)	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	OneSidedRange::bound		trait method definition	public	safe	false	true	not applicable	false	false	An internal-only helper function for `split_off` and `split_off_mut` that returns the bound of the one-sided range.
library/core/src/ops/range.rs	Range::end_bound	impl<T> RangeBounds<T> for Range<T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	Range::end_bound	impl<T> RangeBounds<T> for Range<&T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	Range::into_bounds	impl<T> IntoBounds<T> for Range<T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	Range::start_bound	impl<T> RangeBounds<T> for Range<T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	Range::start_bound	impl<T> RangeBounds<T> for Range<&T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeBounds::end_bound		trait method definition	public	safe	false	false	not applicable	false	true	End index bound.  Returns the end value as a `Bound`.  # Examples  ``` use std::ops::Bound::*; use std::ops::RangeBounds;  assert_eq!((3..).end_bound(), Unbounded); assert_eq!((3..10).end_bound(), Excluded(&10)); ```
library/core/src/ops/range.rs	RangeBounds::end_bound	impl<T> RangeBounds<T> for (Bound<T>, Bound<T>)	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeBounds::start_bound		trait method definition	public	safe	false	false	not applicable	false	true	Start index bound.  Returns the start value as a `Bound`.  # Examples  ``` use std::ops::Bound::*; use std::ops::RangeBounds;  assert_eq!((..10).start_bound(), Unbounded); assert_eq!((3..10).start_bound(), Included(&3)); ```
library/core/src/ops/range.rs	RangeBounds::start_bound	impl<T> RangeBounds<T> for (Bound<T>, Bound<T>)	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeFrom::bound	impl<T> OneSidedRange<T> for RangeFrom<T> where Self: RangeBounds<T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeFrom::end_bound	impl<T> RangeBounds<T> for RangeFrom<T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeFrom::end_bound	impl<T> RangeBounds<T> for RangeFrom<&T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeFrom::into_bounds	impl<T> IntoBounds<T> for RangeFrom<T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeFrom::start_bound	impl<T> RangeBounds<T> for RangeFrom<T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeFrom::start_bound	impl<T> RangeBounds<T> for RangeFrom<&T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeFull::end_bound	impl<T: ?Sized> RangeBounds<T> for RangeFull	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeFull::into_bounds	impl<T> IntoBounds<T> for RangeFull	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeFull::start_bound	impl<T: ?Sized> RangeBounds<T> for RangeFull	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeInclusive::end	impl<Idx> RangeInclusive<Idx>	method	public	safe	false	false	not applicable	false	true	Returns the upper bound of the range (inclusive).  When using an inclusive range for iteration, the values of [`start()`] and `end()` are unspecified after the iteration ended. To determine whether the inclusive range is empty, use the [`is_empty()`] method instead of comparing `start() > end()`.  Note: the value returned by this method is unspecified after the range has been iterated to exhaustion.  [`start()`]: RangeInclusive::start [`is_empty()`]: RangeInclusive::is_empty  # Examples  ``` assert_eq!((3..=5).end(), &5); ```
library/core/src/ops/range.rs	RangeInclusive::end_bound	impl<T> RangeBounds<T> for RangeInclusive<T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeInclusive::end_bound	impl<T> RangeBounds<T> for RangeInclusive<&T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeInclusive::into_bounds	impl<T> IntoBounds<T> for RangeInclusive<T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeInclusive::new	impl<Idx> RangeInclusive<Idx>	method	public	safe	false	false	not applicable	false	true	Creates a new inclusive range. Equivalent to writing `start..=end`.  # Examples  ``` use std::ops::RangeInclusive;  assert_eq!(3..=5, RangeInclusive::new(3, 5)); ```
library/core/src/ops/range.rs	RangeInclusive::start	impl<Idx> RangeInclusive<Idx>	method	public	safe	false	false	not applicable	false	true	Returns the lower bound of the range (inclusive).  When using an inclusive range for iteration, the values of `start()` and [`end()`] are unspecified after the iteration ended. To determine whether the inclusive range is empty, use the [`is_empty()`] method instead of comparing `start() > end()`.  Note: the value returned by this method is unspecified after the range has been iterated to exhaustion.  [`end()`]: RangeInclusive::end [`is_empty()`]: RangeInclusive::is_empty  # Examples  ``` assert_eq!((3..=5).start(), &3); ```
library/core/src/ops/range.rs	RangeInclusive::start_bound	impl<T> RangeBounds<T> for RangeInclusive<T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeInclusive::start_bound	impl<T> RangeBounds<T> for RangeInclusive<&T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeTo::bound	impl<T> OneSidedRange<T> for RangeTo<T> where Self: RangeBounds<T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeTo::end_bound	impl<T> RangeBounds<T> for RangeTo<T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeTo::end_bound	impl<T> RangeBounds<T> for RangeTo<&T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeTo::into_bounds	impl<T> IntoBounds<T> for RangeTo<T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeTo::start_bound	impl<T> RangeBounds<T> for RangeTo<T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeTo::start_bound	impl<T> RangeBounds<T> for RangeTo<&T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeToInclusive::bound	impl<T> OneSidedRange<T> for RangeToInclusive<T> where Self: RangeBounds<T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeToInclusive::end_bound	impl<T> RangeBounds<T> for RangeToInclusive<T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeToInclusive::end_bound	impl<T> RangeBounds<T> for RangeToInclusive<&T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeToInclusive::into_bounds	impl<T> IntoBounds<T> for RangeToInclusive<T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeToInclusive::start_bound	impl<T> RangeBounds<T> for RangeToInclusive<T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/range.rs	RangeToInclusive::start_bound	impl<T> RangeBounds<T> for RangeToInclusive<&T>	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ops/try_trait.rs	FromResidual::from_residual		trait method definition	public	safe	false	false	not applicable	false	true	Constructs the type from a compatible `Residual` type.  This should be implemented consistently with the `branch` method such that applying the `?` operator will get back an equivalent residual: `FromResidual::from_residual(r).branch() --> ControlFlow::Break(r)`. (The residual is not mandated to be *identical* when interconversion is involved.)  # Examples  ``` #![feature(try_trait_v2)] use std::ops::{ControlFlow, FromResidual};  assert_eq!(Result::<String, i64>::from_residual(Err(3_u8)), Err(3)); assert_eq!(Option::<String>::from_residual(None), None); assert_eq!(     ControlFlow::<_, String>::from_residual(ControlFlow::Break(5)),     ControlFlow::Break(5), ); ```
library/core/src/ops/try_trait.rs	Try::branch		trait method definition	public	safe	false	false	not applicable	false	true	Used in `?` to decide whether the operator should produce a value (because this returned [`ControlFlow::Continue`]) or propagate a value back to the caller (because this returned [`ControlFlow::Break`]).  # Examples  ``` #![feature(try_trait_v2)] use std::ops::{ControlFlow, Try};  assert_eq!(Ok::<_, String>(3).branch(), ControlFlow::Continue(3)); assert_eq!(Err::<String, _>(3).branch(), ControlFlow::Break(Err(3)));  assert_eq!(Some(3).branch(), ControlFlow::Continue(3)); assert_eq!(None::<String>.branch(), ControlFlow::Break(None));  assert_eq!(ControlFlow::<String, _>::Continue(3).branch(), ControlFlow::Continue(3)); assert_eq!(     ControlFlow::<_, String>::Break(3).branch(),     ControlFlow::Break(ControlFlow::Break(3)), ); ```
library/core/src/ops/try_trait.rs	Try::from_output		trait method definition	public	safe	false	false	not applicable	false	true	Constructs the type from its `Output` type.  This should be implemented consistently with the `branch` method such that applying the `?` operator will get back the original value: `Try::from_output(x).branch() --> ControlFlow::Continue(x)`.  # Examples  ``` #![feature(try_trait_v2)] use std::ops::Try;  assert_eq!(<Result<_, String> as Try>::from_output(3), Ok(3)); assert_eq!(<Option<_> as Try>::from_output(4), Some(4)); assert_eq!(     <std::ops::ControlFlow<String, _> as Try>::from_output(5),     std::ops::ControlFlow::Continue(5), );  # fn make_question_mark_work() -> Option<()> { assert_eq!(Option::from_output(4)?, 4); # None } # make_question_mark_work();  // This is used, for example, on the accumulator in `try_fold`: let r = std::iter::empty().try_fold(4, |_, ()| -> Option<_> { unreachable!() }); assert_eq!(r, Some(4)); ```
library/core/src/option.rs	Clone::clone	impl<T> Clone for Option<T> where T: Clone	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/option.rs	Clone::clone_from	impl<T> Clone for Option<T> where T: Clone	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/option.rs	Default::default	impl<T> Default for Option<T>	trait method implementation	public	safe	false	false	not applicable	false	true	Returns [`None`][Option::None].  # Examples  ``` let opt: Option<u32> = Option::default(); assert!(opt.is_none()); ```
library/core/src/option.rs	From::from	impl<T> From<T> for Option<T>	trait method implementation	public	safe	false	false	not applicable	false	true	Moves `val` into a new [`Some`].  # Examples  ``` let o: Option<u8> = Option::from(67);  assert_eq!(Some(67), o); ```
library/core/src/option.rs	From::from	impl<'a, T> From<&'a Option<T>> for Option<&'a T>	trait method implementation	public	safe	false	false	not applicable	false	true	Converts from `&Option<T>` to `Option<&T>`.  # Examples  Converts an <code>[Option]<[String]></code> into an <code>[Option]<[usize]></code>, preserving the original. The [`map`] method takes the `self` argument by value, consuming the original, so this technique uses `from` to first take an [`Option`] to a reference to the value inside the original.  [`map`]: Option::map [String]: ../../std/string/struct.String.html "String"  ``` let s: Option<String> = Some(String::from("Hello, Rustaceans!")); let o: Option<usize> = Option::from(&s).map(|ss: &String| ss.len());  println!("Can still print s: {s:?}");  assert_eq!(o, Some(18)); ```
library/core/src/option.rs	From::from	impl<'a, T> From<&'a mut Option<T>> for Option<&'a mut T>	trait method implementation	public	safe	false	false	not applicable	false	true	Converts from `&mut Option<T>` to `Option<&mut T>`  # Examples  ``` let mut s = Some(String::from("Hello")); let o: Option<&mut String> = Option::from(&mut s);  match o {     Some(t) => *t = String::from("Hello, Rustaceans!"),     None => (), }  assert_eq!(s, Some(String::from("Hello, Rustaceans!"))); ```
library/core/src/option.rs	Option::and	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Returns [`None`] if the option is [`None`], otherwise returns `optb`.  Arguments passed to `and` are eagerly evaluated; if you are passing the result of a function call, it is recommended to use [`and_then`], which is lazily evaluated.  [`and_then`]: Option::and_then  # Examples  ``` let x = Some(2); let y: Option<&str> = None; assert_eq!(x.and(y), None);  let x: Option<u32> = None; let y = Some("foo"); assert_eq!(x.and(y), None);  let x = Some(2); let y = Some("foo"); assert_eq!(x.and(y), Some("foo"));  let x: Option<u32> = None; let y: Option<&str> = None; assert_eq!(x.and(y), None); ```
library/core/src/option.rs	Option::and_then	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Returns [`None`] if the option is [`None`], otherwise calls `f` with the wrapped value and returns the result.  Some languages call this operation flatmap.  # Examples  ``` fn sq_then_to_string(x: u32) -> Option<String> {     x.checked_mul(x).map(|sq| sq.to_string()) }  assert_eq!(Some(2).and_then(sq_then_to_string), Some(4.to_string())); assert_eq!(Some(1_000_000).and_then(sq_then_to_string), None); // overflowed! assert_eq!(None.and_then(sq_then_to_string), None); ```  Often used to chain fallible operations that may return [`None`].  ``` let arr_2d = [["A0", "A1"], ["B0", "B1"]];  let item_0_1 = arr_2d.get(0).and_then(|row| row.get(1)); assert_eq!(item_0_1, Some(&"A1"));  let item_2_0 = arr_2d.get(2).and_then(|row| row.get(0)); assert_eq!(item_2_0, None); ```
library/core/src/option.rs	Option::as_deref	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Converts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.  Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via [`Deref`].  # Examples  ``` let x: Option<String> = Some("hey".to_owned()); assert_eq!(x.as_deref(), Some("hey"));  let x: Option<String> = None; assert_eq!(x.as_deref(), None); ```
library/core/src/option.rs	Option::as_deref_mut	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.  Leaves the original `Option` in-place, creating a new one containing a mutable reference to the inner type's [`Deref::Target`] type.  # Examples  ``` let mut x: Option<String> = Some("hey".to_owned()); assert_eq!(x.as_deref_mut().map(|x| {     x.make_ascii_uppercase();     x }), Some("HEY".to_owned().as_mut_str())); ```
library/core/src/option.rs	Option::as_mut	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Converts from `&mut Option<T>` to `Option<&mut T>`.  # Examples  ``` let mut x = Some(2); match x.as_mut() {     Some(v) => *v = 42,     None => {}, } assert_eq!(x, Some(42)); ```
library/core/src/option.rs	Option::as_ref	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Converts from `&Option<T>` to `Option<&T>`.  # Examples  Calculates the length of an <code>Option<[String]></code> as an <code>Option<[usize]></code> without moving the [`String`]. The [`map`] method takes the `self` argument by value, consuming the original, so this technique uses `as_ref` to first take an `Option` to a reference to the value inside the original.  [`map`]: Option::map [String]: ../../std/string/struct.String.html "String" [`String`]: ../../std/string/struct.String.html "String"  ``` let text: Option<String> = Some("Hello, world!".to_string()); // First, cast `Option<String>` to `Option<&String>` with `as_ref`, // then consume *that* with `map`, leaving `text` on the stack. let text_length: Option<usize> = text.as_ref().map(|s| s.len()); println!("still can print text: {text:?}"); ```
library/core/src/option.rs	Option::cloned	impl<T> Option<&T>	method	public	safe	false	false	not applicable	false	true	Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.  # Examples  ``` let x = 12; let opt_x = Some(&x); assert_eq!(opt_x, Some(&12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12)); ```
library/core/src/option.rs	Option::cloned	impl<T> Option<&mut T>	method	public	safe	false	false	not applicable	false	true	Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.  # Examples  ``` let mut x = 12; let opt_x = Some(&mut x); assert_eq!(opt_x, Some(&mut 12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12)); ```
library/core/src/option.rs	Option::copied	impl<T> Option<&T>	method	public	safe	false	false	not applicable	false	true	Maps an `Option<&T>` to an `Option<T>` by copying the contents of the option.  # Examples  ``` let x = 12; let opt_x = Some(&x); assert_eq!(opt_x, Some(&12)); let copied = opt_x.copied(); assert_eq!(copied, Some(12)); ```
library/core/src/option.rs	Option::copied	impl<T> Option<&mut T>	method	public	safe	false	false	not applicable	false	true	Maps an `Option<&mut T>` to an `Option<T>` by copying the contents of the option.  # Examples  ``` let mut x = 12; let opt_x = Some(&mut x); assert_eq!(opt_x, Some(&mut 12)); let copied = opt_x.copied(); assert_eq!(copied, Some(12)); ```
library/core/src/option.rs	Option::filter	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Returns [`None`] if the option is [`None`], otherwise calls `predicate` with the wrapped value and returns:  - [`Some(t)`] if `predicate` returns `true` (where `t` is the wrapped   value), and - [`None`] if `predicate` returns `false`.  This function works similar to [`Iterator::filter()`]. You can imagine the `Option<T>` being an iterator over one or zero elements. `filter()` lets you decide which elements to keep.  # Examples  ```rust fn is_even(n: &i32) -> bool {     n % 2 == 0 }  assert_eq!(None.filter(is_even), None); assert_eq!(Some(3).filter(is_even), None); assert_eq!(Some(4).filter(is_even), Some(4)); ```  [`Some(t)`]: Some
library/core/src/option.rs	Option::flatten	impl<T> Option<Option<T>>	method	public	safe	false	false	not applicable	false	true	Converts from `Option<Option<T>>` to `Option<T>`.  # Examples  Basic usage:  ``` let x: Option<Option<u32>> = Some(Some(6)); assert_eq!(Some(6), x.flatten());  let x: Option<Option<u32>> = Some(None); assert_eq!(None, x.flatten());  let x: Option<Option<u32>> = None; assert_eq!(None, x.flatten()); ```  Flattening only removes one level of nesting at a time:  ``` let x: Option<Option<Option<u32>>> = Some(Some(Some(6))); assert_eq!(Some(Some(6)), x.flatten()); assert_eq!(Some(6), x.flatten().flatten()); ```
library/core/src/option.rs	Option::inspect	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Calls a function with a reference to the contained value if [`Some`].  Returns the original option.  # Examples  ``` let list = vec![1, 2, 3];  // prints "got: 2" let x = list     .get(1)     .inspect(|x| println!("got: {x}"))     .expect("list should be long enough");  // prints nothing list.get(5).inspect(|x| println!("got: {x}")); ```
library/core/src/option.rs	Option::is_none_or	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Returns `true` if the option is a [`None`] or the value inside of it matches a predicate.  # Examples  ``` let x: Option<u32> = Some(2); assert_eq!(x.is_none_or(|x| x > 1), true);  let x: Option<u32> = Some(0); assert_eq!(x.is_none_or(|x| x > 1), false);  let x: Option<u32> = None; assert_eq!(x.is_none_or(|x| x > 1), true);  let x: Option<String> = Some("ownership".to_string()); assert_eq!(x.as_ref().is_none_or(|x| x.len() > 1), true); println!("still alive {:?}", x); ```
library/core/src/option.rs	Option::is_some	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Returns `true` if the option is a [`Some`] value.  # Examples  ``` let x: Option<u32> = Some(2); assert_eq!(x.is_some(), true);  let x: Option<u32> = None; assert_eq!(x.is_some(), false); ```
library/core/src/option.rs	Option::is_some_and	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Returns `true` if the option is a [`Some`] and the value inside of it matches a predicate.  # Examples  ``` let x: Option<u32> = Some(2); assert_eq!(x.is_some_and(|x| x > 1), true);  let x: Option<u32> = Some(0); assert_eq!(x.is_some_and(|x| x > 1), false);  let x: Option<u32> = None; assert_eq!(x.is_some_and(|x| x > 1), false);  let x: Option<String> = Some("ownership".to_string()); assert_eq!(x.as_ref().is_some_and(|x| x.len() > 1), true); println!("still alive {:?}", x); ```
library/core/src/option.rs	Option::iter	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Returns an iterator over the possibly contained value.  # Examples  ``` let x = Some(4); assert_eq!(x.iter().next(), Some(&4));  let x: Option<u32> = None; assert_eq!(x.iter().next(), None); ```
library/core/src/option.rs	Option::iter_mut	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Returns a mutable iterator over the possibly contained value.  # Examples  ``` let mut x = Some(4); match x.iter_mut().next() {     Some(v) => *v = 42,     None => {}, } assert_eq!(x, Some(42));  let mut x: Option<u32> = None; assert_eq!(x.iter_mut().next(), None); ```
library/core/src/option.rs	Option::map	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Maps an `Option<T>` to `Option<U>` by applying a function to a contained value (if `Some`) or returns `None` (if `None`).  # Examples  Calculates the length of an <code>Option<[String]></code> as an <code>Option<[usize]></code>, consuming the original:  [String]: ../../std/string/struct.String.html "String" ``` let maybe_some_string = Some(String::from("Hello, World!")); // `Option::map` takes self *by value*, consuming `maybe_some_string` let maybe_some_len = maybe_some_string.map(|s| s.len()); assert_eq!(maybe_some_len, Some(13));  let x: Option<&str> = None; assert_eq!(x.map(|s| s.len()), None); ```
library/core/src/option.rs	Option::map_or	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Returns the provided default result (if none), or applies a function to the contained value (if any).  Arguments passed to `map_or` are eagerly evaluated; if you are passing the result of a function call, it is recommended to use [`map_or_else`], which is lazily evaluated.  [`map_or_else`]: Option::map_or_else  # Examples  ``` let x = Some("foo"); assert_eq!(x.map_or(42, |v| v.len()), 3);  let x: Option<&str> = None; assert_eq!(x.map_or(42, |v| v.len()), 42); ```
library/core/src/option.rs	Option::map_or_default	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Maps an `Option<T>` to a `U` by applying function `f` to the contained value if the option is [`Some`], otherwise if [`None`], returns the [default value] for the type `U`.  # Examples  ``` #![feature(result_option_map_or_default)]  let x: Option<&str> = Some("hi"); let y: Option<&str> = None;  assert_eq!(x.map_or_default(|x| x.len()), 2); assert_eq!(y.map_or_default(|y| y.len()), 0); ```  [default value]: Default::default
library/core/src/option.rs	Option::map_or_else	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Computes a default function result (if none), or applies a different function to the contained value (if any).  # Basic examples  ``` let k = 21;  let x = Some("foo"); assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 3);  let x: Option<&str> = None; assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 42); ```  # Handling a Result-based fallback  A somewhat common occurrence when dealing with optional values in combination with [`Result<T, E>`] is the case where one wants to invoke a fallible fallback if the option is not present.  This example parses a command line argument (if present), or the contents of a file to an integer.  However, unlike accessing the command line argument, reading the file is fallible, so it must be wrapped with `Ok`.  ```no_run # fn main() -> Result<(), Box<dyn std::error::Error>> { let v: u64 = std::env::args()    .nth(1)    .map_or_else(|| std::fs::read_to_string("/etc/someconfig.conf"), Ok)?    .parse()?; #   Ok(()) # } ```
library/core/src/option.rs	Option::ok_or	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err)`].  Arguments passed to `ok_or` are eagerly evaluated; if you are passing the result of a function call, it is recommended to use [`ok_or_else`], which is lazily evaluated.  [`Ok(v)`]: Ok [`Err(err)`]: Err [`Some(v)`]: Some [`ok_or_else`]: Option::ok_or_else  # Examples  ``` let x = Some("foo"); assert_eq!(x.ok_or(0), Ok("foo"));  let x: Option<&str> = None; assert_eq!(x.ok_or(0), Err(0)); ```
library/core/src/option.rs	Option::ok_or_else	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err())`].  [`Ok(v)`]: Ok [`Err(err())`]: Err [`Some(v)`]: Some  # Examples  ``` let x = Some("foo"); assert_eq!(x.ok_or_else(|| 0), Ok("foo"));  let x: Option<&str> = None; assert_eq!(x.ok_or_else(|| 0), Err(0)); ```
library/core/src/option.rs	Option::or	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Returns the option if it contains a value, otherwise returns `optb`.  Arguments passed to `or` are eagerly evaluated; if you are passing the result of a function call, it is recommended to use [`or_else`], which is lazily evaluated.  [`or_else`]: Option::or_else  # Examples  ``` let x = Some(2); let y = None; assert_eq!(x.or(y), Some(2));  let x = None; let y = Some(100); assert_eq!(x.or(y), Some(100));  let x = Some(2); let y = Some(100); assert_eq!(x.or(y), Some(2));  let x: Option<u32> = None; let y = None; assert_eq!(x.or(y), None); ```
library/core/src/option.rs	Option::or_else	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Returns the option if it contains a value, otherwise calls `f` and returns the result.  # Examples  ``` fn nobody() -> Option<&'static str> { None } fn vikings() -> Option<&'static str> { Some("vikings") }  assert_eq!(Some("barbarians").or_else(vikings), Some("barbarians")); assert_eq!(None.or_else(vikings), Some("vikings")); assert_eq!(None.or_else(nobody), None); ```
library/core/src/option.rs	Option::transpose	impl<T, E> Option<Result<T, E>>	method	public	safe	false	false	not applicable	false	true	Transposes an `Option` of a [`Result`] into a [`Result`] of an `Option`.  [`None`] will be mapped to <code>[Ok]\([None])</code>. <code>[Some]\([Ok]\(\_))</code> and <code>[Some]\([Err]\(\_))</code> will be mapped to <code>[Ok]\([Some]\(\_))</code> and <code>[Err]\(\_)</code>.  # Examples  ``` #[derive(Debug, Eq, PartialEq)] struct SomeErr;  let x: Result<Option<i32>, SomeErr> = Ok(Some(5)); let y: Option<Result<i32, SomeErr>> = Some(Ok(5)); assert_eq!(x, y.transpose()); ```
library/core/src/option.rs	Option::unwrap_or	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Returns the contained [`Some`] value or a provided default.  Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing the result of a function call, it is recommended to use [`unwrap_or_else`], which is lazily evaluated.  [`unwrap_or_else`]: Option::unwrap_or_else  # Examples  ``` assert_eq!(Some("car").unwrap_or("bike"), "car"); assert_eq!(None.unwrap_or("bike"), "bike"); ```
library/core/src/option.rs	Option::unwrap_or_default	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Returns the contained [`Some`] value or a default.  Consumes the `self` argument then, if [`Some`], returns the contained value, otherwise if [`None`], returns the [default value] for that type.  # Examples  ``` let x: Option<u32> = None; let y: Option<u32> = Some(12);  assert_eq!(x.unwrap_or_default(), 0); assert_eq!(y.unwrap_or_default(), 12); ```  [default value]: Default::default [`parse`]: str::parse [`FromStr`]: crate::str::FromStr
library/core/src/option.rs	Option::unwrap_or_else	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Returns the contained [`Some`] value or computes it from a closure.  # Examples  ``` let k = 10; assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4); assert_eq!(None.unwrap_or_else(|| 2 * k), 20); ```
library/core/src/option.rs	Option::unzip	impl<T, U> Option<(T, U)>	method	public	safe	false	false	not applicable	false	true	Unzips an option containing a tuple of two options.  If `self` is `Some((a, b))` this method returns `(Some(a), Some(b))`. Otherwise, `(None, None)` is returned.  # Examples  ``` let x = Some((1, "hi")); let y = None::<(u8, u32)>;  assert_eq!(x.unzip(), (Some(1), Some("hi"))); assert_eq!(y.unzip(), (None, None)); ```
library/core/src/option.rs	Option::xor	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns [`None`].  # Examples  ``` let x = Some(2); let y: Option<u32> = None; assert_eq!(x.xor(y), Some(2));  let x: Option<u32> = None; let y = Some(2); assert_eq!(x.xor(y), Some(2));  let x = Some(2); let y = Some(2); assert_eq!(x.xor(y), None);  let x: Option<u32> = None; let y: Option<u32> = None; assert_eq!(x.xor(y), None); ```
library/core/src/option.rs	Option::zip	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Zips `self` with another `Option`.  If `self` is `Some(s)` and `other` is `Some(o)`, this method returns `Some((s, o))`. Otherwise, `None` is returned.  # Examples  ``` let x = Some(1); let y = Some("hi"); let z = None::<u8>;  assert_eq!(x.zip(y), Some((1, "hi"))); assert_eq!(x.zip(z), None); ```
library/core/src/option.rs	Option::zip_with	impl<T> Option<T>	method	public	safe	false	false	not applicable	false	true	Zips `self` and another `Option` with function `f`.  If `self` is `Some(s)` and `other` is `Some(o)`, this method returns `Some(f(s, o))`. Otherwise, `None` is returned.  # Examples  ``` #![feature(option_zip)]  #[derive(Debug, PartialEq)] struct Point {     x: f64,     y: f64, }  impl Point {     fn new(x: f64, y: f64) -> Self {         Self { x, y }     } }  let x = Some(17.5); let y = Some(42.7);  assert_eq!(x.zip_with(y, Point::new), Some(Point { x: 17.5, y: 42.7 })); assert_eq!(x.zip_with(None, Point::new), None); ```
library/core/src/panic/location.rs	Location::column	impl<'a> Location<'a>	method	public	safe	false	false	not applicable	false	true	Returns the column from which the panic originated.  # Examples  ```should_panic use std::panic;  panic::set_hook(Box::new(|panic_info| {     if let Some(location) = panic_info.location() {         println!("panic occurred at column {}", location.column());     } else {         println!("panic occurred but can't get location information...");     } }));  panic!("Normal panic"); ```
library/core/src/panic/location.rs	Location::line	impl<'a> Location<'a>	method	public	safe	false	false	not applicable	false	true	Returns the line number from which the panic originated.  # Examples  ```should_panic use std::panic;  panic::set_hook(Box::new(|panic_info| {     if let Some(location) = panic_info.location() {         println!("panic occurred at line {}", location.line());     } else {         println!("panic occurred but can't get location information...");     } }));  panic!("Normal panic"); ```
library/core/src/panicking.rs	panic		function	public	safe	false	true	not applicable	false	false	The underlying implementation of core's `panic!` macro when no formatting is used.
library/core/src/panicking.rs	panic_cannot_unwind		function	private	safe	false	true	not applicable	false	false	Panics because we cannot unwind out of a function.  This is a separate function to avoid the codesize impact of each crate containing the string to pass to `panic_nounwind`.  This function is called directly by the codegen backend, and must not have any extra arguments (including those synthesized by track_caller).
library/core/src/panicking.rs	panic_fmt		function	private	safe	false	true	not applicable	false	false	FIXME(pvdrz): This is just a hack so we can get `panic` working.
library/core/src/panicking.rs	panic_nounwind		function	public	safe	false	true	not applicable	false	false	Like `panic`, but without unwinding and track_caller to reduce the impact on codesize on the caller. If you want `#[track_caller]` for nicer errors, call `panic_nounwind_fmt` directly.
library/core/src/panicking.rs	panic_nounwind_fmt		function	public	safe	false	true	not applicable	false	false	FIXME(pvdrz): This is just a hack so we can get `panic_nounwind` working.
library/core/src/ptr/alignment.rs	Clone::clone	impl Clone for Alignment	trait method implementation	public	safe	false	true	not applicable	false	false	
library/core/src/ptr/alignment.rs	Clone::clone	impl Clone for AlignmentEnum	trait method implementation	public	safe	false	true	not applicable	false	false	
library/core/src/ptr/alignment.rs	Alignment::as_usize	impl Alignment	method	public	safe	false	true	not applicable	false	false	Returns the alignment as a [`usize`].
library/core/src/ptr/alignment.rs	Alignment::new	impl Alignment	method	public	safe	false	true	not applicable	false	false	Creates an `Alignment` from a `usize`, or returns `None` if it's not a power of two.  Note that `0` is not a power of two, nor a valid alignment.
library/core/src/ptr/alignment.rs	Alignment::new_unchecked	impl Alignment	method	public	unsafe	false	true	documented	false	false	Creates an `Alignment` from a power-of-two `usize`.  # Safety  `align` must be a power of two.  Equivalently, it must be `1 << exp` for some `exp` in `0..usize::BITS`. It must *not* be zero.
library/core/src/ptr/const_ptr.rs	PartialEq::eq	impl<T: PointeeSized> PartialEq for *T	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/ptr/metadata.rs	from_raw_parts		function	public	safe	false	true	not applicable	false	false	Forms a (possibly-wide) raw pointer from a data pointer and metadata.  This function is safe but the returned pointer is not necessarily safe to dereference. For slices, see the documentation of [`slice::from_raw_parts`] for safety requirements. For trait objects, the metadata must come from a pointer to the same underlying erased type.  [`slice::from_raw_parts`]: crate::slice::from_raw_parts
library/core/src/ptr/metadata.rs	from_raw_parts_mut		function	public	safe	false	true	not applicable	false	false	Performs the same functionality as [`from_raw_parts`], except that a raw `*mut` pointer is returned, as opposed to a raw `*const` pointer.  See the documentation of [`from_raw_parts`] for more details.
library/core/src/ptr/mod.rs	null		function	public	safe	false	false	not applicable	false	true	Creates a null raw pointer.  This function is equivalent to zero-initializing the pointer: `MaybeUninit::<*const T>::zeroed().assume_init()`. The resulting pointer has the address 0.  # Examples  ``` use std::ptr;  let p: *const i32 = ptr::null(); assert!(p.is_null()); assert_eq!(p as usize, 0); // this pointer has the address 0 ```
library/core/src/ptr/mod.rs	null_mut		function	public	safe	false	false	not applicable	false	true	Creates a null mutable raw pointer.  This function is equivalent to zero-initializing the pointer: `MaybeUninit::<*mut T>::zeroed().assume_init()`. The resulting pointer has the address 0.  # Examples  ``` use std::ptr;  let p: *mut i32 = ptr::null_mut(); assert!(p.is_null()); assert_eq!(p as usize, 0); // this pointer has the address 0 ```
library/core/src/ptr/mod.rs	read		function	public	unsafe	false	false	documented	false	true	Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.  # Safety  Behavior is undefined if any of the following conditions are violated:  * `src` must be [valid] for reads.  * `src` must be properly aligned. Use [`read_unaligned`] if this is not the   case.  * `src` must point to a properly initialized value of type `T`.  Note that even if `T` has size `0`, the pointer must be properly aligned.  # Examples  Basic usage:  ``` let x = 12; let y = &x as *const i32;  unsafe {     assert_eq!(std::ptr::read(y), 12); } ```  Manually implement [`mem::swap`]:  ``` use std::ptr;  fn swap<T>(a: &mut T, b: &mut T) {     unsafe {         // Create a bitwise copy of the value at `a` in `tmp`.         let tmp = ptr::read(a);          // Exiting at this point (either by explicitly returning or by         // calling a function which panics) would cause the value in `tmp` to         // be dropped while the same value is still referenced by `a`. This         // could trigger undefined behavior if `T` is not `Copy`.          // Create a bitwise copy of the value at `b` in `a`.         // This is safe because mutable references cannot alias.         ptr::copy_nonoverlapping(b, a, 1);          // As above, exiting here could trigger undefined behavior because         // the same value is referenced by `a` and `b`.          // Move `tmp` into `b`.         ptr::write(b, tmp);          // `tmp` has been moved (`write` takes ownership of its second argument),         // so nothing is dropped implicitly here.     } }  let mut foo = "foo".to_owned(); let mut bar = "bar".to_owned();  swap(&mut foo, &mut bar);  assert_eq!(foo, "bar"); assert_eq!(bar, "foo"); ```  ## Ownership of the Returned Value  `read` creates a bitwise copy of `T`, regardless of whether `T` is [`Copy`]. If `T` is not [`Copy`], using both the returned value and the value at `*src` can violate memory safety. Note that assigning to `*src` counts as a use because it will attempt to drop the value at `*src`.  [`write()`] can be used to overwrite data without causing it to be dropped.  ``` use std::ptr;  let mut s = String::from("foo"); unsafe {     // `s2` now points to the same underlying memory as `s`.     let mut s2: String = ptr::read(&s);      assert_eq!(s2, "foo");      // Assigning to `s2` causes its original value to be dropped. Beyond     // this point, `s` must no longer be used, as the underlying memory has     // been freed.     s2 = String::default();     assert_eq!(s2, "");      // Assigning to `s` would cause the old value to be dropped again,     // resulting in undefined behavior.     // s = String::from("bar"); // ERROR      // `ptr::write` can be used to overwrite a value without dropping it.     ptr::write(&mut s, String::from("bar")); }  assert_eq!(s, "bar"); ```  [valid]: self#safety
library/core/src/ptr/mod.rs	without_provenance		function	public	safe	false	false	not applicable	false	false	Creates a pointer with the given address and no [provenance][crate::ptr#provenance].  This is equivalent to `ptr::null().with_addr(addr)`.  Without provenance, this pointer is not associated with any actual allocation. Such a no-provenance pointer may be used for zero-sized memory accesses (if suitably aligned), but non-zero-sized memory accesses with a no-provenance pointer are UB. No-provenance pointers are little more than a `usize` address in disguise.  This is different from `addr as *const T`, which creates a pointer that picks up a previously exposed provenance. See [`with_exposed_provenance`] for more details on that operation.  This is a [Strict Provenance][crate::ptr#strict-provenance] API.
library/core/src/ptr/mod.rs	without_provenance_mut		function	public	safe	false	false	not applicable	false	false	Creates a pointer with the given address and no [provenance][crate::ptr#provenance].  This is equivalent to `ptr::null_mut().with_addr(addr)`.  Without provenance, this pointer is not associated with any actual allocation. Such a no-provenance pointer may be used for zero-sized memory accesses (if suitably aligned), but non-zero-sized memory accesses with a no-provenance pointer are UB. No-provenance pointers are little more than a `usize` address in disguise.  This is different from `addr as *mut T`, which creates a pointer that picks up a previously exposed provenance. See [`with_exposed_provenance_mut`] for more details on that operation.  This is a [Strict Provenance][crate::ptr#strict-provenance] API.
library/core/src/ptr/mod.rs	write		function	public	unsafe	false	false	documented	false	true	Overwrites a memory location with the given value without reading or dropping the old value.  `write` does not drop the contents of `dst`. This is safe, but it could leak allocations or resources, so care should be taken not to overwrite an object that should be dropped.  Additionally, it does not drop `src`. Semantically, `src` is moved into the location pointed to by `dst`.  This is appropriate for initializing uninitialized memory, or overwriting memory that has previously been [`read`] from.  # Safety  Behavior is undefined if any of the following conditions are violated:  * `dst` must be [valid] for writes.  * `dst` must be properly aligned. Use [`write_unaligned`] if this is not the   case.  Note that even if `T` has size `0`, the pointer must be properly aligned.  [valid]: self#safety  # Examples  Basic usage:  ``` let mut x = 0; let y = &mut x as *mut i32; let z = 12;  unsafe {     std::ptr::write(y, z);     assert_eq!(std::ptr::read(y), 12); } ```  Manually implement [`mem::swap`]:  ``` use std::ptr;  fn swap<T>(a: &mut T, b: &mut T) {     unsafe {         // Create a bitwise copy of the value at `a` in `tmp`.         let tmp = ptr::read(a);          // Exiting at this point (either by explicitly returning or by         // calling a function which panics) would cause the value in `tmp` to         // be dropped while the same value is still referenced by `a`. This         // could trigger undefined behavior if `T` is not `Copy`.          // Create a bitwise copy of the value at `b` in `a`.         // This is safe because mutable references cannot alias.         ptr::copy_nonoverlapping(b, a, 1);          // As above, exiting here could trigger undefined behavior because         // the same value is referenced by `a` and `b`.          // Move `tmp` into `b`.         ptr::write(b, tmp);          // `tmp` has been moved (`write` takes ownership of its second argument),         // so nothing is dropped implicitly here.     } }  let mut foo = "foo".to_owned(); let mut bar = "bar".to_owned();  swap(&mut foo, &mut bar);  assert_eq!(foo, "bar"); assert_eq!(bar, "foo"); ```
library/core/src/result.rs	Result::and	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Returns `res` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.  Arguments passed to `and` are eagerly evaluated; if you are passing the result of a function call, it is recommended to use [`and_then`], which is lazily evaluated.  [`and_then`]: Result::and_then  # Examples  ``` let x: Result<u32, &str> = Ok(2); let y: Result<&str, &str> = Err("late error"); assert_eq!(x.and(y), Err("late error"));  let x: Result<u32, &str> = Err("early error"); let y: Result<&str, &str> = Ok("foo"); assert_eq!(x.and(y), Err("early error"));  let x: Result<u32, &str> = Err("not a 2"); let y: Result<&str, &str> = Err("late error"); assert_eq!(x.and(y), Err("not a 2"));  let x: Result<u32, &str> = Ok(2); let y: Result<&str, &str> = Ok("different result type"); assert_eq!(x.and(y), Ok("different result type")); ```
library/core/src/result.rs	Result::and_then	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Calls `op` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.   This function can be used for control flow based on `Result` values.  # Examples  ``` fn sq_then_to_string(x: u32) -> Result<String, &'static str> {     x.checked_mul(x).map(|sq| sq.to_string()).ok_or("overflowed") }  assert_eq!(Ok(2).and_then(sq_then_to_string), Ok(4.to_string())); assert_eq!(Ok(1_000_000).and_then(sq_then_to_string), Err("overflowed")); assert_eq!(Err("not a number").and_then(sq_then_to_string), Err("not a number")); ```  Often used to chain fallible operations that may return [`Err`].  ``` use std::{io::ErrorKind, path::Path};  // Note: on Windows "/" maps to "C:\" let root_modified_time = Path::new("/").metadata().and_then(|md| md.modified()); assert!(root_modified_time.is_ok());  let should_fail = Path::new("/bad/path").metadata().and_then(|md| md.modified()); assert!(should_fail.is_err()); assert_eq!(should_fail.unwrap_err().kind(), ErrorKind::NotFound); ```
library/core/src/result.rs	Result::as_deref	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&<T as Deref>::Target, &E>`.  Coerces the [`Ok`] variant of the original [`Result`] via [`Deref`](crate::ops::Deref) and returns the new [`Result`].  # Examples  ``` let x: Result<String, u32> = Ok("hello".to_string()); let y: Result<&str, &u32> = Ok("hello"); assert_eq!(x.as_deref(), y);  let x: Result<String, u32> = Err(42); let y: Result<&str, &u32> = Err(&42); assert_eq!(x.as_deref(), y); ```
library/core/src/result.rs	Result::as_deref_mut	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Converts from `Result<T, E>` (or `&mut Result<T, E>`) to `Result<&mut <T as DerefMut>::Target, &mut E>`.  Coerces the [`Ok`] variant of the original [`Result`] via [`DerefMut`](crate::ops::DerefMut) and returns the new [`Result`].  # Examples  ``` let mut s = "HELLO".to_string(); let mut x: Result<String, u32> = Ok("hello".to_string()); let y: Result<&mut str, &mut u32> = Ok(&mut s); assert_eq!(x.as_deref_mut().map(|x| { x.make_ascii_uppercase(); x }), y);  let mut i = 42; let mut x: Result<String, u32> = Err(42); let y: Result<&mut str, &mut u32> = Err(&mut i); assert_eq!(x.as_deref_mut().map(|x| { x.make_ascii_uppercase(); x }), y); ```
library/core/src/result.rs	Result::as_mut	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Converts from `&mut Result<T, E>` to `Result<&mut T, &mut E>`.  # Examples  ``` fn mutate(r: &mut Result<i32, i32>) {     match r.as_mut() {         Ok(v) => *v = 42,         Err(e) => *e = 0,     } }  let mut x: Result<i32, i32> = Ok(2); mutate(&mut x); assert_eq!(x.unwrap(), 42);  let mut x: Result<i32, i32> = Err(13); mutate(&mut x); assert_eq!(x.unwrap_err(), 0); ```
library/core/src/result.rs	Result::as_ref	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Converts from `&Result<T, E>` to `Result<&T, &E>`.  Produces a new `Result`, containing a reference into the original, leaving the original in place.  # Examples  ``` let x: Result<u32, &str> = Ok(2); assert_eq!(x.as_ref(), Ok(&2));  let x: Result<u32, &str> = Err("Error"); assert_eq!(x.as_ref(), Err(&"Error")); ```
library/core/src/result.rs	Result::cloned	impl<T, E> Result<&T, E>	method	public	safe	false	false	not applicable	false	true	Maps a `Result<&T, E>` to a `Result<T, E>` by cloning the contents of the `Ok` part.  # Examples  ``` let val = 12; let x: Result<&i32, i32> = Ok(&val); assert_eq!(x, Ok(&12)); let cloned = x.cloned(); assert_eq!(cloned, Ok(12)); ```
library/core/src/result.rs	Result::cloned	impl<T, E> Result<&mut T, E>	method	public	safe	false	false	not applicable	false	true	Maps a `Result<&mut T, E>` to a `Result<T, E>` by cloning the contents of the `Ok` part.  # Examples  ``` let mut val = 12; let x: Result<&mut i32, i32> = Ok(&mut val); assert_eq!(x, Ok(&mut 12)); let cloned = x.cloned(); assert_eq!(cloned, Ok(12)); ```
library/core/src/result.rs	Result::copied	impl<T, E> Result<&T, E>	method	public	safe	false	false	not applicable	false	true	Maps a `Result<&T, E>` to a `Result<T, E>` by copying the contents of the `Ok` part.  # Examples  ``` let val = 12; let x: Result<&i32, i32> = Ok(&val); assert_eq!(x, Ok(&12)); let copied = x.copied(); assert_eq!(copied, Ok(12)); ```
library/core/src/result.rs	Result::copied	impl<T, E> Result<&mut T, E>	method	public	safe	false	false	not applicable	false	true	Maps a `Result<&mut T, E>` to a `Result<T, E>` by copying the contents of the `Ok` part.  # Examples  ``` let mut val = 12; let x: Result<&mut i32, i32> = Ok(&mut val); assert_eq!(x, Ok(&mut 12)); let copied = x.copied(); assert_eq!(copied, Ok(12)); ```
library/core/src/result.rs	Result::err	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Converts from `Result<T, E>` to [`Option<E>`].  Converts `self` into an [`Option<E>`], consuming `self`, and discarding the success value, if any.  # Examples  ``` let x: Result<u32, &str> = Ok(2); assert_eq!(x.err(), None);  let x: Result<u32, &str> = Err("Nothing here"); assert_eq!(x.err(), Some("Nothing here")); ```
library/core/src/result.rs	Result::inspect	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Calls a function with a reference to the contained value if [`Ok`].  Returns the original result.  # Examples  ``` let x: u8 = "4"     .parse::<u8>()     .inspect(|x| println!("original: {x}"))     .map(|x| x.pow(3))     .expect("failed to parse number"); ```
library/core/src/result.rs	Result::inspect_err	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Calls a function with a reference to the contained value if [`Err`].  Returns the original result.  # Examples  ``` use std::{fs, io};  fn read() -> io::Result<String> {     fs::read_to_string("address.txt")         .inspect_err(|e| eprintln!("failed to read file: {e}")) } ```
library/core/src/result.rs	Result::is_err	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Returns `true` if the result is [`Err`].  # Examples  ``` let x: Result<i32, &str> = Ok(-3); assert_eq!(x.is_err(), false);  let x: Result<i32, &str> = Err("Some error message"); assert_eq!(x.is_err(), true); ```
library/core/src/result.rs	Result::is_err_and	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Returns `true` if the result is [`Err`] and the value inside of it matches a predicate.  # Examples  ``` use std::io::{Error, ErrorKind};  let x: Result<u32, Error> = Err(Error::new(ErrorKind::NotFound, "!")); assert_eq!(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), true);  let x: Result<u32, Error> = Err(Error::new(ErrorKind::PermissionDenied, "!")); assert_eq!(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), false);  let x: Result<u32, Error> = Ok(123); assert_eq!(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), false);  let x: Result<u32, String> = Err("ownership".to_string()); assert_eq!(x.as_ref().is_err_and(|x| x.len() > 1), true); println!("still alive {:?}", x); ```
library/core/src/result.rs	Result::is_ok	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Returns `true` if the result is [`Ok`].  # Examples  ``` let x: Result<i32, &str> = Ok(-3); assert_eq!(x.is_ok(), true);  let x: Result<i32, &str> = Err("Some error message"); assert_eq!(x.is_ok(), false); ```
library/core/src/result.rs	Result::is_ok_and	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Returns `true` if the result is [`Ok`] and the value inside of it matches a predicate.  # Examples  ``` let x: Result<u32, &str> = Ok(2); assert_eq!(x.is_ok_and(|x| x > 1), true);  let x: Result<u32, &str> = Ok(0); assert_eq!(x.is_ok_and(|x| x > 1), false);  let x: Result<u32, &str> = Err("hey"); assert_eq!(x.is_ok_and(|x| x > 1), false);  let x: Result<String, &str> = Ok("ownership".to_string()); assert_eq!(x.as_ref().is_ok_and(|x| x.len() > 1), true); println!("still alive {:?}", x); ```
library/core/src/result.rs	Result::map	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained [`Ok`] value, leaving an [`Err`] value untouched.  This function can be used to compose the results of two functions.  # Examples  Print the numbers on each line of a string multiplied by two.  ``` let line = "1\n2\n3\n4\n";  for num in line.lines() {     match num.parse::<i32>().map(|i| i * 2) {         Ok(n) => println!("{n}"),         Err(..) => {}     } } ```
library/core/src/result.rs	Result::map_err	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained [`Err`] value, leaving an [`Ok`] value untouched.  This function can be used to pass through a successful result while handling an error.   # Examples  ``` fn stringify(x: u32) -> String { format!("error code: {x}") }  let x: Result<u32, u32> = Ok(2); assert_eq!(x.map_err(stringify), Ok(2));  let x: Result<u32, u32> = Err(13); assert_eq!(x.map_err(stringify), Err("error code: 13".to_string())); ```
library/core/src/result.rs	Result::map_or	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Returns the provided default (if [`Err`]), or applies a function to the contained value (if [`Ok`]).  Arguments passed to `map_or` are eagerly evaluated; if you are passing the result of a function call, it is recommended to use [`map_or_else`], which is lazily evaluated.  [`map_or_else`]: Result::map_or_else  # Examples  ``` let x: Result<_, &str> = Ok("foo"); assert_eq!(x.map_or(42, |v| v.len()), 3);  let x: Result<&str, _> = Err("bar"); assert_eq!(x.map_or(42, |v| v.len()), 42); ```
library/core/src/result.rs	Result::map_or_default	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Maps a `Result<T, E>` to a `U` by applying function `f` to the contained value if the result is [`Ok`], otherwise if [`Err`], returns the [default value] for the type `U`.  # Examples  ``` #![feature(result_option_map_or_default)]  let x: Result<_, &str> = Ok("foo"); let y: Result<&str, _> = Err("bar");  assert_eq!(x.map_or_default(|x| x.len()), 3); assert_eq!(y.map_or_default(|y| y.len()), 0); ```  [default value]: Default::default
library/core/src/result.rs	Result::map_or_else	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Maps a `Result<T, E>` to `U` by applying fallback function `default` to a contained [`Err`] value, or function `f` to a contained [`Ok`] value.  This function can be used to unpack a successful result while handling an error.   # Examples  ``` let k = 21;  let x : Result<_, &str> = Ok("foo"); assert_eq!(x.map_or_else(|e| k * 2, |v| v.len()), 3);  let x : Result<&str, _> = Err("bar"); assert_eq!(x.map_or_else(|e| k * 2, |v| v.len()), 42); ```
library/core/src/result.rs	Result::ok	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Converts from `Result<T, E>` to [`Option<T>`].  Converts `self` into an [`Option<T>`], consuming `self`, and discarding the error, if any.  # Examples  ``` let x: Result<u32, &str> = Ok(2); assert_eq!(x.ok(), Some(2));  let x: Result<u32, &str> = Err("Nothing here"); assert_eq!(x.ok(), None); ```
library/core/src/result.rs	Result::or	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.  Arguments passed to `or` are eagerly evaluated; if you are passing the result of a function call, it is recommended to use [`or_else`], which is lazily evaluated.  [`or_else`]: Result::or_else  # Examples  ``` let x: Result<u32, &str> = Ok(2); let y: Result<u32, &str> = Err("late error"); assert_eq!(x.or(y), Ok(2));  let x: Result<u32, &str> = Err("early error"); let y: Result<u32, &str> = Ok(2); assert_eq!(x.or(y), Ok(2));  let x: Result<u32, &str> = Err("not a 2"); let y: Result<u32, &str> = Err("late error"); assert_eq!(x.or(y), Err("late error"));  let x: Result<u32, &str> = Ok(2); let y: Result<u32, &str> = Ok(100); assert_eq!(x.or(y), Ok(2)); ```
library/core/src/result.rs	Result::or_else	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Calls `op` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.  This function can be used for control flow based on result values.   # Examples  ``` fn sq(x: u32) -> Result<u32, u32> { Ok(x * x) } fn err(x: u32) -> Result<u32, u32> { Err(x) }  assert_eq!(Ok(2).or_else(sq).or_else(sq), Ok(2)); assert_eq!(Ok(2).or_else(err).or_else(sq), Ok(2)); assert_eq!(Err(3).or_else(sq).or_else(err), Ok(9)); assert_eq!(Err(3).or_else(err).or_else(err), Err(3)); ```
library/core/src/result.rs	Result::transpose	impl<T, E> Result<Option<T>, E>	method	public	safe	false	false	not applicable	false	true	Transposes a `Result` of an `Option` into an `Option` of a `Result`.  `Ok(None)` will be mapped to `None`. `Ok(Some(_))` and `Err(_)` will be mapped to `Some(Ok(_))` and `Some(Err(_))`.  # Examples  ``` #[derive(Debug, Eq, PartialEq)] struct SomeErr;  let x: Result<Option<i32>, SomeErr> = Ok(Some(5)); let y: Option<Result<i32, SomeErr>> = Some(Ok(5)); assert_eq!(x.transpose(), y); ```
library/core/src/result.rs	Result::unwrap_or	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Returns the contained [`Ok`] value or a provided default.  Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing the result of a function call, it is recommended to use [`unwrap_or_else`], which is lazily evaluated.  [`unwrap_or_else`]: Result::unwrap_or_else  # Examples  ``` let default = 2; let x: Result<u32, &str> = Ok(9); assert_eq!(x.unwrap_or(default), 9);  let x: Result<u32, &str> = Err("error"); assert_eq!(x.unwrap_or(default), default); ```
library/core/src/result.rs	Result::unwrap_or_default	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Returns the contained [`Ok`] value or a default  Consumes the `self` argument then, if [`Ok`], returns the contained value, otherwise if [`Err`], returns the default value for that type.  # Examples  Converts a string to an integer, turning poorly-formed strings into 0 (the default value for integers). [`parse`] converts a string to any other type that implements [`FromStr`], returning an [`Err`] on error.  ``` let good_year_from_input = "1909"; let bad_year_from_input = "190blarg"; let good_year = good_year_from_input.parse().unwrap_or_default(); let bad_year = bad_year_from_input.parse().unwrap_or_default();  assert_eq!(1909, good_year); assert_eq!(0, bad_year); ```  [`parse`]: str::parse [`FromStr`]: crate::str::FromStr
library/core/src/result.rs	Result::unwrap_or_else	impl<T, E> Result<T, E>	method	public	safe	false	false	not applicable	false	true	Returns the contained [`Ok`] value or computes it from a closure.   # Examples  ``` fn count(x: &str) -> usize { x.len() }  assert_eq!(Ok(2).unwrap_or_else(count), 2); assert_eq!(Err("foo").unwrap_or_else(count), 3); ```
library/core/src/sync/atomic.rs	Clone::clone	impl Clone for Ordering	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/sync/atomic.rs	Default::default	impl Default for AtomicU32	trait method implementation	public	safe	false	false	not applicable	false	false	
library/core/src/sync/atomic.rs	From::from	impl From<u32> for AtomicU32	trait method implementation	public	safe	false	false	not applicable	false	false	Converts an `u32` into an `AtomicU32`.
library/core/src/sync/atomic.rs	AtomicU32::as_ptr	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Returns a mutable pointer to the underlying integer.  Doing non-atomic reads and writes on the resulting integer can be a data race. This method is mostly useful for FFI, where the function signature may use `*mut u32` instead of `&AtomicU32`.  Returning an `*mut` pointer from a shared reference to this atomic is safe because the atomic types work with interior mutability. All modifications of an atomic change the value through a shared reference, and can do so safely as long as they use atomic operations. Any use of the returned raw pointer requires an `unsafe` block and still has to uphold the same restriction: operations on it must be atomic.  # Examples  ```ignore (extern-declaration) # fn main() { use std::sync::atomic::AtomicU32;  extern "C" {     fn my_atomic_op(arg: *mut u32); }  let atomic = AtomicU32::new(1);  // SAFETY: Safe as long as `my_atomic_op` is atomic. unsafe {     my_atomic_op(atomic.as_ptr()); } # } ```
library/core/src/sync/atomic.rs	AtomicU32::compare_and_swap	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Stores a value into the atomic integer if the current value is the same as the `current` value.  The return value is always the previous value. If it is equal to `current`, then the value was updated.  `compare_and_swap` also takes an [`Ordering`] argument which describes the memory ordering of this operation. Notice that even when using [`AcqRel`], the operation might fail and hence just perform an `Acquire` load, but not have `Release` semantics. Using [`Acquire`] makes the store part of this operation [`Relaxed`] if it happens, and using [`Release`] makes the load part [`Relaxed`].  **Note**: This method is only available on platforms that support atomic operations on [`u32`].  # Migrating to `compare_exchange` and `compare_exchange_weak`  `compare_and_swap` is equivalent to `compare_exchange` with the following mapping for memory orderings:  Original | Success | Failure -------- | ------- | ------- Relaxed  | Relaxed | Relaxed Acquire  | Acquire | Acquire Release  | Release | Relaxed AcqRel   | AcqRel  | Acquire SeqCst   | SeqCst  | SeqCst  `compare_and_swap` and `compare_exchange` also differ in their return type. You can use `compare_exchange(...).unwrap_or_else(|x| x)` to recover the behavior of `compare_and_swap`, but in most cases it is more idiomatic to check whether the return value is `Ok` or `Err` rather than to infer success vs failure based on the value that was read.  During migration, consider whether it makes sense to use `compare_exchange_weak` instead. `compare_exchange_weak` is allowed to fail spuriously even when the comparison succeeds, which allows the compiler to generate better assembly code when the compare and swap is used in a loop.  # Examples  ``` use std::sync::atomic::{AtomicU32, Ordering};  let some_var = AtomicU32::new(5);  assert_eq!(some_var.compare_and_swap(5, 10, Ordering::Relaxed), 5); assert_eq!(some_var.load(Ordering::Relaxed), 10);  assert_eq!(some_var.compare_and_swap(6, 12, Ordering::Relaxed), 10); assert_eq!(some_var.load(Ordering::Relaxed), 10); ```
library/core/src/sync/atomic.rs	AtomicU32::compare_exchange	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Stores a value into the atomic integer if the current value is the same as the `current` value.  The return value is a result indicating whether the new value was written and containing the previous value. On success this value is guaranteed to be equal to `current`.  `compare_exchange` takes two [`Ordering`] arguments to describe the memory ordering of this operation. `success` describes the required ordering for the read-modify-write operation that takes place if the comparison with `current` succeeds. `failure` describes the required ordering for the load operation that takes place when the comparison fails. Using [`Acquire`] as success ordering makes the store part of this operation [`Relaxed`], and using [`Release`] makes the successful load [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].  **Note**: This method is only available on platforms that support atomic operations on [`u32`].  # Examples  ``` use std::sync::atomic::{AtomicU32, Ordering};  let some_var = AtomicU32::new(5);  assert_eq!(some_var.compare_exchange(5, 10,                                      Ordering::Acquire,                                      Ordering::Relaxed),            Ok(5)); assert_eq!(some_var.load(Ordering::Relaxed), 10);  assert_eq!(some_var.compare_exchange(6, 12,                                      Ordering::SeqCst,                                      Ordering::Acquire),            Err(10)); assert_eq!(some_var.load(Ordering::Relaxed), 10); ```  # Considerations  `compare_exchange` is a [compare-and-swap operation] and thus exhibits the usual downsides of CAS operations. In particular, a load of the value followed by a successful `compare_exchange` with the previous load *does not ensure* that other threads have not changed the value in the interim! This is usually important when the *equality* check in the `compare_exchange` is being used to check the *identity* of a value, but equality does not necessarily imply identity. This is a particularly common case for pointers, as a pointer holding the same address does not imply that the same object exists at that address! In this case, `compare_exchange` can lead to the [ABA problem].  [ABA Problem]: https://en.wikipedia.org/wiki/ABA_problem [compare-and-swap operation]: https://en.wikipedia.org/wiki/Compare-and-swap
library/core/src/sync/atomic.rs	AtomicU32::compare_exchange_weak	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Stores a value into the atomic integer if the current value is the same as the `current` value.  Unlike [`AtomicU32::compare_exchange`], this function is allowed to spuriously fail even when the comparison succeeds, which can result in more efficient code on some platforms. The return value is a result indicating whether the new value was written and containing the previous value.  `compare_exchange_weak` takes two [`Ordering`] arguments to describe the memory ordering of this operation. `success` describes the required ordering for the read-modify-write operation that takes place if the comparison with `current` succeeds. `failure` describes the required ordering for the load operation that takes place when the comparison fails. Using [`Acquire`] as success ordering makes the store part of this operation [`Relaxed`], and using [`Release`] makes the successful load [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].  **Note**: This method is only available on platforms that support atomic operations on [`u32`].  # Examples  ``` use std::sync::atomic::{AtomicU32, Ordering};  let val = AtomicU32::new(4);  let mut old = val.load(Ordering::Relaxed); loop {     let new = old * 2;     match val.compare_exchange_weak(old, new, Ordering::SeqCst, Ordering::Relaxed) {         Ok(_) => break,         Err(x) => old = x,     } } ```  # Considerations  `compare_exchange` is a [compare-and-swap operation] and thus exhibits the usual downsides of CAS operations. In particular, a load of the value followed by a successful `compare_exchange` with the previous load *does not ensure* that other threads have not changed the value in the interim. This is usually important when the *equality* check in the `compare_exchange` is being used to check the *identity* of a value, but equality does not necessarily imply identity. This is a particularly common case for pointers, as a pointer holding the same address does not imply that the same object exists at that address! In this case, `compare_exchange` can lead to the [ABA problem].  [ABA Problem]: https://en.wikipedia.org/wiki/ABA_problem [compare-and-swap operation]: https://en.wikipedia.org/wiki/Compare-and-swap
library/core/src/sync/atomic.rs	AtomicU32::fetch_add	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Adds to the current value, returning the previous value.  This operation wraps around on overflow.  `fetch_add` takes an [`Ordering`] argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using [`Acquire`] makes the store part of this operation [`Relaxed`], and using [`Release`] makes the load part [`Relaxed`].  **Note**: This method is only available on platforms that support atomic operations on [`u32`].  # Examples  ``` use std::sync::atomic::{AtomicU32, Ordering};  let foo = AtomicU32::new(0); assert_eq!(foo.fetch_add(10, Ordering::SeqCst), 0); assert_eq!(foo.load(Ordering::SeqCst), 10); ```
library/core/src/sync/atomic.rs	AtomicU32::fetch_and	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Bitwise "and" with the current value.  Performs a bitwise "and" operation on the current value and the argument `val`, and sets the new value to the result.  Returns the previous value.  `fetch_and` takes an [`Ordering`] argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using [`Acquire`] makes the store part of this operation [`Relaxed`], and using [`Release`] makes the load part [`Relaxed`].  **Note**: This method is only available on platforms that support atomic operations on [`u32`].  # Examples  ``` use std::sync::atomic::{AtomicU32, Ordering};  let foo = AtomicU32::new(0b101101); assert_eq!(foo.fetch_and(0b110011, Ordering::SeqCst), 0b101101); assert_eq!(foo.load(Ordering::SeqCst), 0b100001); ```
library/core/src/sync/atomic.rs	AtomicU32::fetch_max	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Maximum with the current value.  Finds the maximum of the current value and the argument `val`, and sets the new value to the result.  Returns the previous value.  `fetch_max` takes an [`Ordering`] argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using [`Acquire`] makes the store part of this operation [`Relaxed`], and using [`Release`] makes the load part [`Relaxed`].  **Note**: This method is only available on platforms that support atomic operations on [`u32`].  # Examples  ``` use std::sync::atomic::{AtomicU32, Ordering};  let foo = AtomicU32::new(23); assert_eq!(foo.fetch_max(42, Ordering::SeqCst), 23); assert_eq!(foo.load(Ordering::SeqCst), 42); ```  If you want to obtain the maximum value in one step, you can use the following:  ``` use std::sync::atomic::{AtomicU32, Ordering};  let foo = AtomicU32::new(23); let bar = 42; let max_foo = foo.fetch_max(bar, Ordering::SeqCst).max(bar); assert!(max_foo == 42); ```
library/core/src/sync/atomic.rs	AtomicU32::fetch_min	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Minimum with the current value.  Finds the minimum of the current value and the argument `val`, and sets the new value to the result.  Returns the previous value.  `fetch_min` takes an [`Ordering`] argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using [`Acquire`] makes the store part of this operation [`Relaxed`], and using [`Release`] makes the load part [`Relaxed`].  **Note**: This method is only available on platforms that support atomic operations on [`u32`].  # Examples  ``` use std::sync::atomic::{AtomicU32, Ordering};  let foo = AtomicU32::new(23); assert_eq!(foo.fetch_min(42, Ordering::Relaxed), 23); assert_eq!(foo.load(Ordering::Relaxed), 23); assert_eq!(foo.fetch_min(22, Ordering::Relaxed), 23); assert_eq!(foo.load(Ordering::Relaxed), 22); ```  If you want to obtain the minimum value in one step, you can use the following:  ``` use std::sync::atomic::{AtomicU32, Ordering};  let foo = AtomicU32::new(23); let bar = 12; let min_foo = foo.fetch_min(bar, Ordering::SeqCst).min(bar); assert_eq!(min_foo, 12); ```
library/core/src/sync/atomic.rs	AtomicU32::fetch_nand	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Bitwise "nand" with the current value.  Performs a bitwise "nand" operation on the current value and the argument `val`, and sets the new value to the result.  Returns the previous value.  `fetch_nand` takes an [`Ordering`] argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using [`Acquire`] makes the store part of this operation [`Relaxed`], and using [`Release`] makes the load part [`Relaxed`].  **Note**: This method is only available on platforms that support atomic operations on [`u32`].  # Examples  ``` use std::sync::atomic::{AtomicU32, Ordering};  let foo = AtomicU32::new(0x13); assert_eq!(foo.fetch_nand(0x31, Ordering::SeqCst), 0x13); assert_eq!(foo.load(Ordering::SeqCst), !(0x13 & 0x31)); ```
library/core/src/sync/atomic.rs	AtomicU32::fetch_or	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Bitwise "or" with the current value.  Performs a bitwise "or" operation on the current value and the argument `val`, and sets the new value to the result.  Returns the previous value.  `fetch_or` takes an [`Ordering`] argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using [`Acquire`] makes the store part of this operation [`Relaxed`], and using [`Release`] makes the load part [`Relaxed`].  **Note**: This method is only available on platforms that support atomic operations on [`u32`].  # Examples  ``` use std::sync::atomic::{AtomicU32, Ordering};  let foo = AtomicU32::new(0b101101); assert_eq!(foo.fetch_or(0b110011, Ordering::SeqCst), 0b101101); assert_eq!(foo.load(Ordering::SeqCst), 0b111111); ```
library/core/src/sync/atomic.rs	AtomicU32::fetch_sub	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Subtracts from the current value, returning the previous value.  This operation wraps around on overflow.  `fetch_sub` takes an [`Ordering`] argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using [`Acquire`] makes the store part of this operation [`Relaxed`], and using [`Release`] makes the load part [`Relaxed`].  **Note**: This method is only available on platforms that support atomic operations on [`u32`].  # Examples  ``` use std::sync::atomic::{AtomicU32, Ordering};  let foo = AtomicU32::new(20); assert_eq!(foo.fetch_sub(10, Ordering::SeqCst), 20); assert_eq!(foo.load(Ordering::SeqCst), 10); ```
library/core/src/sync/atomic.rs	AtomicU32::fetch_update	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.  Note: This may call the function multiple times if the value has been changed from other threads in the meantime, as long as the function returns `Some(_)`, but the function will have been applied only once to the stored value.  `fetch_update` takes two [`Ordering`] arguments to describe the memory ordering of this operation. The first describes the required ordering for when the operation finally succeeds while the second describes the required ordering for loads. These correspond to the success and failure orderings of [`AtomicU32::compare_exchange`] respectively.  Using [`Acquire`] as success ordering makes the store part of this operation [`Relaxed`], and using [`Release`] makes the final successful load [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].  **Note**: This method is only available on platforms that support atomic operations on [`u32`].  # Considerations  This method is not magic; it is not provided by the hardware, and does not act like a critical section or mutex.  It is implemented on top of an atomic [compare-and-swap operation], and thus is subject to the usual drawbacks of CAS operations. In particular, be careful of the [ABA problem] if this atomic integer is an index or more generally if knowledge of only the *bitwise value* of the atomic is not in and of itself sufficient to ensure any required preconditions.  [ABA Problem]: https://en.wikipedia.org/wiki/ABA_problem [compare-and-swap operation]: https://en.wikipedia.org/wiki/Compare-and-swap  # Examples  ```rust use std::sync::atomic::{AtomicU32, Ordering};  let x = AtomicU32::new(7); assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |_| None), Err(7)); assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(7)); assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(8)); assert_eq!(x.load(Ordering::SeqCst), 9); ```
library/core/src/sync/atomic.rs	AtomicU32::fetch_xor	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Bitwise "xor" with the current value.  Performs a bitwise "xor" operation on the current value and the argument `val`, and sets the new value to the result.  Returns the previous value.  `fetch_xor` takes an [`Ordering`] argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using [`Acquire`] makes the store part of this operation [`Relaxed`], and using [`Release`] makes the load part [`Relaxed`].  **Note**: This method is only available on platforms that support atomic operations on [`u32`].  # Examples  ``` use std::sync::atomic::{AtomicU32, Ordering};  let foo = AtomicU32::new(0b101101); assert_eq!(foo.fetch_xor(0b110011, Ordering::SeqCst), 0b101101); assert_eq!(foo.load(Ordering::SeqCst), 0b011110); ```
library/core/src/sync/atomic.rs	AtomicU32::from_mut	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Get atomic access to a `&mut u32`.  **Note:** This function is only available on targets where `AtomicU32` has the same alignment as `u32`.  # Examples  ``` #![feature(atomic_from_mut)] use std::sync::atomic::{AtomicU32, Ordering};  let mut some_int = 123; let a = AtomicU32::from_mut(&mut some_int); a.store(100, Ordering::Relaxed); assert_eq!(some_int, 100); ``` 
library/core/src/sync/atomic.rs	AtomicU32::from_mut_slice	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Get atomic access to a `&mut [u32]` slice.  # Examples  ```ignore-wasm #![feature(atomic_from_mut)] use std::sync::atomic::{AtomicU32, Ordering};  let mut some_ints = [0; 10]; let a = &*AtomicU32::from_mut_slice(&mut some_ints); std::thread::scope(|s| {     for i in 0..a.len() {         s.spawn(move || a[i].store(i as _, Ordering::Relaxed));     } }); for (i, n) in some_ints.into_iter().enumerate() {     assert_eq!(i, n as usize); } ```
library/core/src/sync/atomic.rs	AtomicU32::from_ptr	impl AtomicU32	method	public	unsafe	false	false	documented	false	true	Creates a new reference to an atomic integer from a pointer.  # Examples  ``` use std::sync::atomic::{self, AtomicU32};  // Get a pointer to an allocated value let ptr: *mut u32 = Box::into_raw(Box::new(0));  assert!(ptr.cast::<AtomicU32>().is_aligned());  {     // Create an atomic view of the allocated value     let atomic = unsafe {AtomicU32::from_ptr(ptr) };      // Use `atomic` for atomic operations, possibly share it with other threads     atomic.store(1, atomic::Ordering::Relaxed); }  // It's ok to non-atomically access the value behind `ptr`, // since the reference to the atomic ended its lifetime in the block above assert_eq!(unsafe { *ptr }, 1);  // Deallocate the value unsafe { drop(Box::from_raw(ptr)) } ```  # Safety  * `ptr` must be aligned to   `align_of::<AtomicU32>()`   (note that on some platforms this can be bigger than `align_of::<u32>()`). * `ptr` must be [valid] for both reads and writes for the whole lifetime `'a`. * You must adhere to the [Memory model for atomic accesses]. In particular, it is not   allowed to mix atomic and non-atomic accesses, or atomic accesses of different sizes,   without synchronization.  [valid]: crate::ptr#safety [Memory model for atomic accesses]: self#memory-model-for-atomic-accesses
library/core/src/sync/atomic.rs	AtomicU32::get_mut	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Returns a mutable reference to the underlying integer.  This is safe because the mutable reference guarantees that no other threads are concurrently accessing the atomic data.  # Examples  ``` use std::sync::atomic::{AtomicU32, Ordering};  let mut some_var = AtomicU32::new(10); assert_eq!(*some_var.get_mut(), 10); *some_var.get_mut() = 5; assert_eq!(some_var.load(Ordering::SeqCst), 5); ```
library/core/src/sync/atomic.rs	AtomicU32::get_mut_slice	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Get non-atomic access to a `&mut [AtomicU32]` slice  This is safe because the mutable reference guarantees that no other threads are concurrently accessing the atomic data.  # Examples  ```ignore-wasm #![feature(atomic_from_mut)] use std::sync::atomic::{AtomicU32, Ordering};  let mut some_ints = [const { AtomicU32::new(0) }; 10];  let view: &mut [u32] = AtomicU32::get_mut_slice(&mut some_ints); assert_eq!(view, [0; 10]); view     .iter_mut()     .enumerate()     .for_each(|(idx, int)| *int = idx as _);  std::thread::scope(|s| {     some_ints         .iter()         .enumerate()         .for_each(|(idx, int)| {             s.spawn(move || assert_eq!(int.load(Ordering::Relaxed), idx as _));         }) }); ```
library/core/src/sync/atomic.rs	AtomicU32::into_inner	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Consumes the atomic and returns the contained value.  This is safe because passing `self` by value guarantees that no other threads are concurrently accessing the atomic data.  # Examples  ``` use std::sync::atomic::AtomicU32;  let some_var = AtomicU32::new(5); assert_eq!(some_var.into_inner(), 5); ```
library/core/src/sync/atomic.rs	AtomicU32::load	impl AtomicU32	method	public	safe	false	false	not applicable	true	true	Loads a value from the atomic integer.  `load` takes an [`Ordering`] argument which describes the memory ordering of this operation. Possible values are [`SeqCst`], [`Acquire`] and [`Relaxed`].  # Panics  Panics if `order` is [`Release`] or [`AcqRel`].  # Examples  ``` use std::sync::atomic::{AtomicU32, Ordering};  let some_var = AtomicU32::new(5);  assert_eq!(some_var.load(Ordering::Relaxed), 5); ```
library/core/src/sync/atomic.rs	AtomicU32::new	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Creates a new atomic integer.  # Examples  ``` use std::sync::atomic::AtomicU32;  let atomic_forty_two = AtomicU32::new(42); ```
library/core/src/sync/atomic.rs	AtomicU32::store	impl AtomicU32	method	public	safe	false	false	not applicable	true	true	Stores a value into the atomic integer.  `store` takes an [`Ordering`] argument which describes the memory ordering of this operation.  Possible values are [`SeqCst`], [`Release`] and [`Relaxed`].  # Panics  Panics if `order` is [`Acquire`] or [`AcqRel`].  # Examples  ``` use std::sync::atomic::{AtomicU32, Ordering};  let some_var = AtomicU32::new(5);  some_var.store(10, Ordering::Relaxed); assert_eq!(some_var.load(Ordering::Relaxed), 10); ```
library/core/src/sync/atomic.rs	AtomicU32::swap	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Stores a value into the atomic integer, returning the previous value.  `swap` takes an [`Ordering`] argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using [`Acquire`] makes the store part of this operation [`Relaxed`], and using [`Release`] makes the load part [`Relaxed`].  **Note**: This method is only available on platforms that support atomic operations on [`u32`].  # Examples  ``` use std::sync::atomic::{AtomicU32, Ordering};  let some_var = AtomicU32::new(5);  assert_eq!(some_var.swap(10, Ordering::Relaxed), 5); ```
library/core/src/sync/atomic.rs	AtomicU32::try_update	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.  See also: [`update`](`AtomicU32::update`).  Note: This may call the function multiple times if the value has been changed from other threads in the meantime, as long as the function returns `Some(_)`, but the function will have been applied only once to the stored value.  `try_update` takes two [`Ordering`] arguments to describe the memory ordering of this operation. The first describes the required ordering for when the operation finally succeeds while the second describes the required ordering for loads. These correspond to the success and failure orderings of [`AtomicU32::compare_exchange`] respectively.  Using [`Acquire`] as success ordering makes the store part of this operation [`Relaxed`], and using [`Release`] makes the final successful load [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].  **Note**: This method is only available on platforms that support atomic operations on [`u32`].  # Considerations  This method is not magic; it is not provided by the hardware, and does not act like a critical section or mutex.  It is implemented on top of an atomic [compare-and-swap operation], and thus is subject to the usual drawbacks of CAS operations. In particular, be careful of the [ABA problem] if this atomic integer is an index or more generally if knowledge of only the *bitwise value* of the atomic is not in and of itself sufficient to ensure any required preconditions.  [ABA Problem]: https://en.wikipedia.org/wiki/ABA_problem [compare-and-swap operation]: https://en.wikipedia.org/wiki/Compare-and-swap  # Examples  ```rust #![feature(atomic_try_update)] use std::sync::atomic::{AtomicU32, Ordering};  let x = AtomicU32::new(7); assert_eq!(x.try_update(Ordering::SeqCst, Ordering::SeqCst, |_| None), Err(7)); assert_eq!(x.try_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(7)); assert_eq!(x.try_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(8)); assert_eq!(x.load(Ordering::SeqCst), 9); ```
library/core/src/sync/atomic.rs	AtomicU32::update	impl AtomicU32	method	public	safe	false	false	not applicable	false	true	Fetches the value, applies a function to it that it return a new value. The new value is stored and the old value is returned.  See also: [`try_update`](`AtomicU32::try_update`).  Note: This may call the function multiple times if the value has been changed from other threads in the meantime, but the function will have been applied only once to the stored value.  `update` takes two [`Ordering`] arguments to describe the memory ordering of this operation. The first describes the required ordering for when the operation finally succeeds while the second describes the required ordering for loads. These correspond to the success and failure orderings of [`AtomicU32::compare_exchange`] respectively.  Using [`Acquire`] as success ordering makes the store part of this operation [`Relaxed`], and using [`Release`] makes the final successful load [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].  **Note**: This method is only available on platforms that support atomic operations on [`u32`].  # Considerations  [CAS operation]: https://en.wikipedia.org/wiki/Compare-and-swap This method is not magic; it is not provided by the hardware, and does not act like a critical section or mutex.  It is implemented on top of an atomic [compare-and-swap operation], and thus is subject to the usual drawbacks of CAS operations. In particular, be careful of the [ABA problem] if this atomic integer is an index or more generally if knowledge of only the *bitwise value* of the atomic is not in and of itself sufficient to ensure any required preconditions.  [ABA Problem]: https://en.wikipedia.org/wiki/ABA_problem [compare-and-swap operation]: https://en.wikipedia.org/wiki/Compare-and-swap  # Examples  ```rust #![feature(atomic_try_update)] use std::sync::atomic::{AtomicU32, Ordering};  let x = AtomicU32::new(7); assert_eq!(x.update(Ordering::SeqCst, Ordering::SeqCst, |x| x + 1), 7); assert_eq!(x.update(Ordering::SeqCst, Ordering::SeqCst, |x| x + 1), 8); assert_eq!(x.load(Ordering::SeqCst), 9); ```
library/core/src/sync/atomic.rs	atomic_add		function	private	unsafe	false	false	missing	false	false	Returns the previous value (like __sync_fetch_and_add).
library/core/src/sync/atomic.rs	atomic_and		function	private	unsafe	false	false	missing	false	false	
library/core/src/sync/atomic.rs	atomic_compare_exchange		function	public	unsafe	true	false	missing	false	false	Publicly exposed for stdarch; nobody else should use this.
library/core/src/sync/atomic.rs	atomic_compare_exchange_weak		function	private	unsafe	false	false	missing	false	false	
library/core/src/sync/atomic.rs	atomic_load		function	private	unsafe	false	false	missing	false	false	
library/core/src/sync/atomic.rs	atomic_nand		function	private	unsafe	false	false	missing	false	false	
library/core/src/sync/atomic.rs	atomic_or		function	private	unsafe	false	false	missing	false	false	
library/core/src/sync/atomic.rs	atomic_store		function	private	unsafe	false	false	missing	false	false	
library/core/src/sync/atomic.rs	atomic_sub		function	private	unsafe	false	false	missing	false	false	Returns the previous value (like __sync_fetch_and_sub).
library/core/src/sync/atomic.rs	atomic_swap		function	private	unsafe	false	false	missing	false	false	
library/core/src/sync/atomic.rs	atomic_umax		function	private	unsafe	false	false	missing	false	false	Updates `*dst` to the max value of `val` and the old value (unsigned comparison)
library/core/src/sync/atomic.rs	atomic_umin		function	private	unsafe	false	false	missing	false	false	Updates `*dst` to the min value of `val` and the old value (unsigned comparison)
library/core/src/sync/atomic.rs	atomic_xor		function	private	unsafe	false	false	missing	false	false	
library/core/src/sync/atomic.rs	strongest_failure_ordering		function	private	safe	false	false	not applicable	false	false	
library/core/src/ub_checks.rs	check_language_ub		function	private	safe	false	false	not applicable	false	false	Determines whether we should check for language UB.  The intention is to not do that when running in the interpreter, as that one has its own language UB checks which generally produce better errors.
library/core/src/ub_checks.rs	maybe_is_aligned_and_not_null		function	private	safe	false	false	not applicable	false	false	Checks whether `ptr` is properly aligned with respect to the given alignment, and if `is_zst == false`, that `ptr` is not null.  In `const` this is approximate and can fail spuriously. It is primarily intended for `assert_unsafe_precondition!` with `check_language_ub`, in which case the check is anyway not executed in `const`.
