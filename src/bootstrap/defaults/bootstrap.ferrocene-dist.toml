# SPDX-License-Identifier: MIT OR Apache-2.0
# SPDX-FileCopyrightText: The Ferrocene Developers

# Default configuration for a distribution and CI testing build of Ferrocene. It is *not*
# recommended to run this configuration during local development, except if your development
# configuration cannot reproduce a CI failure.

[build]
# Enable the generation of build metrics, which provide extra information on the duration of each
# step of the build. This is then used by scripts and tools to analyze how time is spent on CI.
metrics = true

# Statically link Cargo's native dependencies.
#
# If this configuration is missing the resulting `cargo` binary will be different, and might require
# native dependencies to be installed on the user's systems.
cargo-native-static = true

# Enable support for LLVM sanitizers inside the compiler.
#
# If this configuration is missing it won't be possible to use sanitizers.
sanitizers = true

# Enable the extended build, which produces dist artifacts for tools in addition to just the
# compiler and the documentation.
#
# If this configuration is missing, the full distribution won't be built.
extended = true

# Choose which tools must be built and distributed.
#
# If this configuration is missing or changed, the wrong set of tools will be built, and the build
# could fail if some tool is not tested and fails.
#
# NOTE: If you add a new tool here, make sure to also change `ferrocene/packages.toml` to include it
# in new releases.
tools = ["rustdoc", "cargo", "llvm-tools", "rustfmt", "rust-analyzer", "rust-analyzer-proc-macro-srv", "clippy"]

# Build and enable the profiler runtime.
#
# If this configuration is missing, profile guided optimizations and code coverage will not be
# supported by the resulting compiler.
profiler = true

# All dist builds should default to `--stage 2`, not `--stage 1`.
build-stage = 2
test-stage = 2
doc-stage = 2



[llvm]
# Statically link libstdc++ in the resulting LLVM.
#
# If this confiugration is missing the resulting LLVM will be different, and might require libstdc++
# to be installed on the user's system.
static-libstdcpp = true

# Enable LLVM assertions in the resulting compiler.
#
# If this configuration is missing LLVM assertions will be disabled, which could result in compiler
# bugs or miscompilations not being detected. Never remove this flag.
assertions = true

# Do not download pre-built LLVM, build it from scratch.
#
# If this configuration is missing, a pre-built LLVM will be downloaded, which might not match
# exactly what would be built locally.
download-ci-llvm = false



[dist]
# Produce XZ-compressed tarballs when building dist artifacts.
#
# If this configuration is missing or set to a different value the resulting dist tarballs will be
# compressed with a different algorithm.
compression-formats = ["xz"]

# Increase the compression ratio when building dist artifacts.
#
# If this configuration is missing or set to a different value, a different compression ration will
# be used when creating tarballs.
compression-profile = "balanced"



[rust]
# Remap debuginfo to `/rustc/{commit-sha}`.
#
# If this configuration is missing, the directory structure of the build machine will leak into the
# resulting binaries, preventing reproducibility.
remap-debuginfo = true

# Include the lines table in the standard library's debuginfo.
#
# If this configuration is missing backtraces will not include file and line information for the
# standard library, making it harder for end users to debug the cause of a panic.
debuginfo-level-std = 1

# Disable debug logging in the compiler, shrinking the binary size.
#
# If this configuration is missing all debug logging will be included in the compiler, which can
# then be shown with the RUSTC_LOG environment variable.
debug-logging = false

# Enable debug assertions in the resulting compiler.
#
# If this configuration is missing Rust's debug assertions will be disabled, which could result in
# compiler bugs or miscompilations not being detected. Never remove this flag.
debug-assertions = true

# Adds a custom string to the output of `rustc --version` to properly mark this is not the upstream
# compiler.
#
# If this configuration is missing or changed the output of `rustc --version` will change
# accordingly.
description = "Ferrocene by Ferrous Systems"

# Use a single codegen unit when compiling the standard library.
#
# Rust upstream had issues in the past [1] when compiling the standard library with more than 1
# codegen unit. Compiling with more codegen units also prevents some optimizations. Never remove
# this flag due to the risk of the standard library failing to build correctly.
#
# [1] https://github.com/rust-lang/rust/issues/83600
codegen-units-std = 1

# Enable LLVM IR verification. Verification has a small compiler performance hit, but has a chance
# of catching compiler bugs.
#
# If this configuration is missing, LLVM IR verification will be disabled. Never remove this flag.
verify-llvm-ir = true

# Enable only the LLVM codegen backend, preventing other codegen backends from being built and
# shipped.
#
# If this configuration is missing, we'll build all codegen backends built by upstream.
codegen-backends = ["llvm"]

# Build and include LLD in the resulting compiler package.
#
# If this configuration is missing or changed, LLD will not be included.
lld = true

# Do not download pre-built rustc; build it from scratch.
#
# If this configuration is missing, a pre-built rustc will be downloaded, which might not match
# exactly what would be built locally.
download-rustc = false

# Switches the compiler from the system allocator to jemalloc. Jemalloc is more performant compared
# to the system allocator for the compiler workloads, speeding up the compilation process.
#
# If this configuration is missing the system allocator will be used, slowing down the compiler.
jemalloc = true

# Set the release channel for this build. Setting this to "auto-detect" will read the channel from
# the `src/ci/channel` file, to easily allow tools and automations to know and update the current
# channel.
#
# Changing the release channel to `nightly` enables unstable features, and it should not be done for
# any supported build.
channel = "auto-detect"



[target]
# Disable the profiler runtime for WASM. The profiler runtime depends on libc, which is not
# available on WASM bare metal.
#
# If this configuration is missing, building the WASM target will fail.
wasm32-unknown-unknown.profiler = false

# The profiler runtime is not supported on QNX.
aarch64-unknown-nto-qnx710.profiler = false
x86_64-pc-nto-qnx710.profiler = false

# Bare metal targets cannot run the profiler runtime.
aarch64-unknown-ferrocenecoretest.profiler = false
thumbv7em-ferrocenecoretest-eabi.profiler = false
thumbv7em-ferrocenecoretest-eabihf.profiler = false

# On Windows, Jemalloc is not tested, and manual testing suggests it is not supported.
x86_64-pc-windows-msvc.jemalloc = false



[ferrocene]
# Set the Ferrocene channel for this build. Setting this to "auto-detect" will read the channel from
# the `ferrocene/ci/channel` file, to easily allow tools and automations to know and update the
# current channel.
channel = "auto-detect"

# Run the traceability matrix tool in CI mode, producing the correct links.
#
# If this configuration is missing the traceability matrix might not be properly enforced.
traceability-matrix-mode = "ci"
