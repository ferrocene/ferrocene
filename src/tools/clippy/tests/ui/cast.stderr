error: casting `i32` to `f32` causes a loss of precision (`i32` is 32 bits wide, but `f32`'s mantissa is only 23 bits wide)
  --> tests/ui/cast.rs:22:5
   |
LL |     x0 as f32;
   |     ^^^^^^^^^
   |
   = note: `-D clippy::cast-precision-loss` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::cast_precision_loss)]`

error: casting `i64` to `f32` causes a loss of precision (`i64` is 64 bits wide, but `f32`'s mantissa is only 23 bits wide)
  --> tests/ui/cast.rs:26:5
   |
LL |     x1 as f32;
   |     ^^^^^^^^^

error: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> tests/ui/cast.rs:28:5
   |
LL |     x1 as f64;
   |     ^^^^^^^^^

error: casting `u32` to `f32` causes a loss of precision (`u32` is 32 bits wide, but `f32`'s mantissa is only 23 bits wide)
  --> tests/ui/cast.rs:31:5
   |
LL |     x2 as f32;
   |     ^^^^^^^^^

error: casting `u64` to `f32` causes a loss of precision (`u64` is 64 bits wide, but `f32`'s mantissa is only 23 bits wide)
  --> tests/ui/cast.rs:34:5
   |
LL |     x3 as f32;
   |     ^^^^^^^^^

error: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> tests/ui/cast.rs:36:5
   |
LL |     x3 as f64;
   |     ^^^^^^^^^

error: casting `f32` to `i32` may truncate the value
  --> tests/ui/cast.rs:39:5
   |
LL |     1f32 as i32;
   |     ^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::cast_possible_truncation)]`

error: casting `f32` to `u32` may truncate the value
  --> tests/ui/cast.rs:41:5
   |
LL |     1f32 as u32;
   |     ^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...

error: casting `f32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:41:5
   |
LL |     1f32 as u32;
   |     ^^^^^^^^^^^
   |
   = note: `-D clippy::cast-sign-loss` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::cast_sign_loss)]`

error: casting `f64` to `f32` may truncate the value
  --> tests/ui/cast.rs:45:5
   |
LL |     1f64 as f32;
   |     ^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...

error: casting `i32` to `i8` may truncate the value
  --> tests/ui/cast.rs:47:5
   |
LL |     1i32 as i8;
   |     ^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL |     i8::try_from(1i32);
   |     ~~~~~~~~~~~~~~~~~~

error: casting `i32` to `u8` may truncate the value
  --> tests/ui/cast.rs:49:5
   |
LL |     1i32 as u8;
   |     ^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL |     u8::try_from(1i32);
   |     ~~~~~~~~~~~~~~~~~~

error: casting `f64` to `isize` may truncate the value
  --> tests/ui/cast.rs:51:5
   |
LL |     1f64 as isize;
   |     ^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...

error: casting `f64` to `usize` may truncate the value
  --> tests/ui/cast.rs:53:5
   |
LL |     1f64 as usize;
   |     ^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...

error: casting `f64` to `usize` may lose the sign of the value
  --> tests/ui/cast.rs:53:5
   |
LL |     1f64 as usize;
   |     ^^^^^^^^^^^^^

error: casting `u32` to `u16` may truncate the value
  --> tests/ui/cast.rs:56:5
   |
LL |     1f32 as u32 as u16;
   |     ^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL |     u16::try_from(1f32 as u32);
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~

error: casting `f32` to `u32` may truncate the value
  --> tests/ui/cast.rs:56:5
   |
LL |     1f32 as u32 as u16;
   |     ^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...

error: casting `f32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:56:5
   |
LL |     1f32 as u32 as u16;
   |     ^^^^^^^^^^^

error: casting `i32` to `i8` may truncate the value
  --> tests/ui/cast.rs:61:22
   |
LL |         let _x: i8 = 1i32 as _;
   |                      ^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL |         let _x: i8 = 1i32.try_into();
   |                      ~~~~~~~~~~~~~~~

error: casting `f32` to `i32` may truncate the value
  --> tests/ui/cast.rs:63:9
   |
LL |         1f32 as i32;
   |         ^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...

error: casting `f64` to `i32` may truncate the value
  --> tests/ui/cast.rs:65:9
   |
LL |         1f64 as i32;
   |         ^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...

error: casting `f32` to `u8` may truncate the value
  --> tests/ui/cast.rs:67:9
   |
LL |         1f32 as u8;
   |         ^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...

error: casting `f32` to `u8` may lose the sign of the value
  --> tests/ui/cast.rs:67:9
   |
LL |         1f32 as u8;
   |         ^^^^^^^^^^

error: casting `u8` to `i8` may wrap around the value
  --> tests/ui/cast.rs:72:5
   |
LL |     1u8 as i8;
   |     ^^^^^^^^^
   |
   = note: `-D clippy::cast-possible-wrap` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::cast_possible_wrap)]`

error: casting `u16` to `i16` may wrap around the value
  --> tests/ui/cast.rs:75:5
   |
LL |     1u16 as i16;
   |     ^^^^^^^^^^^

error: casting `u32` to `i32` may wrap around the value
  --> tests/ui/cast.rs:77:5
   |
LL |     1u32 as i32;
   |     ^^^^^^^^^^^

error: casting `u64` to `i64` may wrap around the value
  --> tests/ui/cast.rs:79:5
   |
LL |     1u64 as i64;
   |     ^^^^^^^^^^^

error: casting `usize` to `isize` may wrap around the value
  --> tests/ui/cast.rs:81:5
   |
LL |     1usize as isize;
   |     ^^^^^^^^^^^^^^^

error: casting `usize` to `i8` may truncate the value
  --> tests/ui/cast.rs:84:5
   |
LL |     1usize as i8;
   |     ^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL |     i8::try_from(1usize);
   |     ~~~~~~~~~~~~~~~~~~~~

error: casting `usize` to `i16` may truncate the value
  --> tests/ui/cast.rs:87:5
   |
LL |     1usize as i16;
   |     ^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL |     i16::try_from(1usize);
   |     ~~~~~~~~~~~~~~~~~~~~~

error: casting `usize` to `i16` may wrap around the value on targets with 16-bit wide pointers
  --> tests/ui/cast.rs:87:5
   |
LL |     1usize as i16;
   |     ^^^^^^^^^^^^^
   |
   = note: `usize` and `isize` may be as small as 16 bits on some platforms
   = note: for more information see https://doc.rust-lang.org/reference/types/numeric.html#machine-dependent-integer-types

error: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers
  --> tests/ui/cast.rs:92:5
   |
LL |     1usize as i32;
   |     ^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL |     i32::try_from(1usize);
   |     ~~~~~~~~~~~~~~~~~~~~~

error: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers
  --> tests/ui/cast.rs:92:5
   |
LL |     1usize as i32;
   |     ^^^^^^^^^^^^^

error: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> tests/ui/cast.rs:96:5
   |
LL |     1usize as i64;
   |     ^^^^^^^^^^^^^

error: casting `u16` to `isize` may wrap around the value on targets with 16-bit wide pointers
  --> tests/ui/cast.rs:101:5
   |
LL |     1u16 as isize;
   |     ^^^^^^^^^^^^^
   |
   = note: `usize` and `isize` may be as small as 16 bits on some platforms
   = note: for more information see https://doc.rust-lang.org/reference/types/numeric.html#machine-dependent-integer-types

error: casting `u32` to `isize` may wrap around the value on targets with 32-bit wide pointers
  --> tests/ui/cast.rs:105:5
   |
LL |     1u32 as isize;
   |     ^^^^^^^^^^^^^

error: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
  --> tests/ui/cast.rs:108:5
   |
LL |     1u64 as isize;
   |     ^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL |     isize::try_from(1u64);
   |     ~~~~~~~~~~~~~~~~~~~~~

error: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
  --> tests/ui/cast.rs:108:5
   |
LL |     1u64 as isize;
   |     ^^^^^^^^^^^^^

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:113:5
   |
LL |     -1i32 as u32;
   |     ^^^^^^^^^^^^

error: casting `isize` to `usize` may lose the sign of the value
  --> tests/ui/cast.rs:116:5
   |
LL |     -1isize as usize;
   |     ^^^^^^^^^^^^^^^^

error: casting `i8` to `u8` may lose the sign of the value
  --> tests/ui/cast.rs:127:5
   |
LL |     (i8::MIN).abs() as u8;
   |     ^^^^^^^^^^^^^^^^^^^^^

error: casting `i64` to `u64` may lose the sign of the value
  --> tests/ui/cast.rs:131:5
   |
LL |     (-1i64).abs() as u64;
   |     ^^^^^^^^^^^^^^^^^^^^

error: casting `isize` to `usize` may lose the sign of the value
  --> tests/ui/cast.rs:132:5
   |
LL |     (-1isize).abs() as usize;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

error: casting `i64` to `u64` may lose the sign of the value
  --> tests/ui/cast.rs:139:5
   |
LL |     (unsafe { (-1i64).checked_abs().unwrap_unchecked() }) as u64;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: casting `i64` to `u64` may lose the sign of the value
  --> tests/ui/cast.rs:154:5
   |
LL |     (unsafe { (-1i64).checked_isqrt().unwrap_unchecked() }) as u64;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: casting `i64` to `i8` may truncate the value
  --> tests/ui/cast.rs:205:5
   |
LL |     (-99999999999i64).min(1) as i8;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL |     i8::try_from((-99999999999i64).min(1));
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error: casting `u64` to `u8` may truncate the value
  --> tests/ui/cast.rs:219:5
   |
LL |     999999u64.clamp(0, 256) as u8;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL |     u8::try_from(999999u64.clamp(0, 256));
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error: casting `main::E2` to `u8` may truncate the value
  --> tests/ui/cast.rs:242:21
   |
LL |             let _ = self as u8;
   |                     ^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL |             let _ = u8::try_from(self);
   |                     ~~~~~~~~~~~~~~~~~~

error: casting `main::E2::B` to `u8` will truncate the value
  --> tests/ui/cast.rs:244:21
   |
LL |             let _ = Self::B as u8;
   |                     ^^^^^^^^^^^^^
   |
   = note: `-D clippy::cast-enum-truncation` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::cast_enum_truncation)]`

error: casting `main::E5` to `i8` may truncate the value
  --> tests/ui/cast.rs:286:21
   |
LL |             let _ = self as i8;
   |                     ^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL |             let _ = i8::try_from(self);
   |                     ~~~~~~~~~~~~~~~~~~

error: casting `main::E5::A` to `i8` will truncate the value
  --> tests/ui/cast.rs:288:21
   |
LL |             let _ = Self::A as i8;
   |                     ^^^^^^^^^^^^^

error: casting `main::E6` to `i16` may truncate the value
  --> tests/ui/cast.rs:305:21
   |
LL |             let _ = self as i16;
   |                     ^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL |             let _ = i16::try_from(self);
   |                     ~~~~~~~~~~~~~~~~~~~

error: casting `main::E7` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> tests/ui/cast.rs:324:21
   |
LL |             let _ = self as usize;
   |                     ^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL |             let _ = usize::try_from(self);
   |                     ~~~~~~~~~~~~~~~~~~~~~

error: casting `main::E10` to `u16` may truncate the value
  --> tests/ui/cast.rs:371:21
   |
LL |             let _ = self as u16;
   |                     ^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL |             let _ = u16::try_from(self);
   |                     ~~~~~~~~~~~~~~~~~~~

error: casting `u32` to `u8` may truncate the value
  --> tests/ui/cast.rs:382:13
   |
LL |     let c = (q >> 16) as u8;
   |             ^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL |     let c = u8::try_from(q >> 16);
   |             ~~~~~~~~~~~~~~~~~~~~~

error: casting `u32` to `u8` may truncate the value
  --> tests/ui/cast.rs:386:13
   |
LL |     let c = (q / 1000) as u8;
   |             ^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL |     let c = u8::try_from(q / 1000);
   |             ~~~~~~~~~~~~~~~~~~~~~~

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:398:9
   |
LL |         (x * x) as u32;
   |         ^^^^^^^^^^^^^^

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:403:32
   |
LL |     let _a = |x: i32| -> u32 { (x * x * x * x) as u32 };
   |                                ^^^^^^^^^^^^^^^^^^^^^^

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:405:5
   |
LL |     (2_i32).checked_pow(3).unwrap() as u32;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:406:5
   |
LL |     (-2_i32).pow(3) as u32;
   |     ^^^^^^^^^^^^^^^^^^^^^^

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:411:5
   |
LL |     (-5_i32 % 2) as u32;
   |     ^^^^^^^^^^^^^^^^^^^

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:413:5
   |
LL |     (-5_i32 % -2) as u32;
   |     ^^^^^^^^^^^^^^^^^^^^

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:416:5
   |
LL |     (-2_i32 >> 1) as u32;
   |     ^^^^^^^^^^^^^^^^^^^^

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:420:5
   |
LL |     (x * x) as u32;
   |     ^^^^^^^^^^^^^^

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:421:5
   |
LL |     (x * x * x) as u32;
   |     ^^^^^^^^^^^^^^^^^^

error: casting `i16` to `u16` may lose the sign of the value
  --> tests/ui/cast.rs:425:5
   |
LL |     (y * y * y * y * -2) as u16;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: casting `i16` to `u16` may lose the sign of the value
  --> tests/ui/cast.rs:427:5
   |
LL |     (y * y * y / y * 2) as u16;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: casting `i16` to `u16` may lose the sign of the value
  --> tests/ui/cast.rs:428:5
   |
LL |     (y * y / y * 2) as u16;
   |     ^^^^^^^^^^^^^^^^^^^^^^

error: casting `i16` to `u16` may lose the sign of the value
  --> tests/ui/cast.rs:430:5
   |
LL |     (y / y * y * -2) as u16;
   |     ^^^^^^^^^^^^^^^^^^^^^^^

error: equal expressions as operands to `/`
  --> tests/ui/cast.rs:430:6
   |
LL |     (y / y * y * -2) as u16;
   |      ^^^^^
   |
   = note: `#[deny(clippy::eq_op)]` on by default

error: casting `i16` to `u16` may lose the sign of the value
  --> tests/ui/cast.rs:433:5
   |
LL |     (y + y + y + -2) as u16;
   |     ^^^^^^^^^^^^^^^^^^^^^^^

error: casting `i16` to `u16` may lose the sign of the value
  --> tests/ui/cast.rs:435:5
   |
LL |     (y + y + y + 2) as u16;
   |     ^^^^^^^^^^^^^^^^^^^^^^

error: casting `i16` to `u16` may lose the sign of the value
  --> tests/ui/cast.rs:439:5
   |
LL |     (z + -2) as u16;
   |     ^^^^^^^^^^^^^^^

error: casting `i16` to `u16` may lose the sign of the value
  --> tests/ui/cast.rs:441:5
   |
LL |     (z + z + 2) as u16;
   |     ^^^^^^^^^^^^^^^^^^

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:444:9
   |
LL |         (a * a * b * b * c * c) as u32;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:445:9
   |
LL |         (a * b * c) as u32;
   |         ^^^^^^^^^^^^^^^^^^

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:447:9
   |
LL |         (a * -b * c) as u32;
   |         ^^^^^^^^^^^^^^^^^^^

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:449:9
   |
LL |         (a * b * c * c) as u32;
   |         ^^^^^^^^^^^^^^^^^^^^^^

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:450:9
   |
LL |         (a * -2) as u32;
   |         ^^^^^^^^^^^^^^^

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:452:9
   |
LL |         (a * b * c * -2) as u32;
   |         ^^^^^^^^^^^^^^^^^^^^^^^

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:454:9
   |
LL |         (a / b) as u32;
   |         ^^^^^^^^^^^^^^

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:455:9
   |
LL |         (a / b * c) as u32;
   |         ^^^^^^^^^^^^^^^^^^

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:457:9
   |
LL |         (a / b + b * c) as u32;
   |         ^^^^^^^^^^^^^^^^^^^^^^

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:459:9
   |
LL |         a.saturating_pow(3) as u32;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:461:9
   |
LL |         (a.abs() * b.pow(2) / c.abs()) as u32
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> tests/ui/cast.rs:468:5
   |
LL |     bar.unwrap().unwrap() as usize
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL |     usize::try_from(bar.unwrap().unwrap())
   |

error: casting `i64` to `usize` may lose the sign of the value
  --> tests/ui/cast.rs:468:5
   |
LL |     bar.unwrap().unwrap() as usize
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to 87 previous errors

