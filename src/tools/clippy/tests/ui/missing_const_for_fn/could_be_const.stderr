error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:14:5
   |
LL | /     pub fn new() -> Self {
LL | |
LL | |
LL | |         Self { guess: 42 }
LL | |     }
   | |_____^
   |
   = note: `-D clippy::missing-const-for-fn` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::missing_const_for_fn)]`
help: make the function `const`
   |
LL |     pub const fn new() -> Self {
   |         +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:20:5
   |
LL | /     fn const_generic_params<'a, T, const N: usize>(&self, b: &'a [T; N]) -> &'a [T; N] {
LL | |
LL | |         b
LL | |     }
   | |_____^
   |
help: make the function `const`
   |
LL |     const fn const_generic_params<'a, T, const N: usize>(&self, b: &'a [T; N]) -> &'a [T; N] {
   |     +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:27:1
   |
LL | / fn one() -> i32 {
LL | |
LL | |     1
LL | | }
   | |_^
   |
help: make the function `const`
   |
LL | const fn one() -> i32 {
   | +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:33:1
   |
LL | / fn two() -> i32 {
LL | |
LL | |     let abc = 2;
LL | |     abc
LL | | }
   | |_^
   |
help: make the function `const`
   |
LL | const fn two() -> i32 {
   | +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:40:1
   |
LL | / fn string() -> String {
LL | |
LL | |     String::new()
LL | | }
   | |_^
   |
help: make the function `const`
   |
LL | const fn string() -> String {
   | +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:46:1
   |
LL | / unsafe fn four() -> i32 {
LL | |
LL | |     4
LL | | }
   | |_^
   |
help: make the function `const`
   |
LL | const unsafe fn four() -> i32 {
   | +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:52:1
   |
LL | / fn generic<T>(t: T) -> T {
LL | |
LL | |     t
LL | | }
   | |_^
   |
help: make the function `const`
   |
LL | const fn generic<T>(t: T) -> T {
   | +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:61:1
   |
LL | / fn generic_arr<T: Copy>(t: [T; 1]) -> T {
LL | |
LL | |     t[0]
LL | | }
   | |_^
   |
help: make the function `const`
   |
LL | const fn generic_arr<T: Copy>(t: [T; 1]) -> T {
   | +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:75:9
   |
LL | /         pub fn b(self, a: &A) -> B {
LL | |
LL | |             B
LL | |         }
   | |_________^
   |
help: make the function `const`
   |
LL |         pub const fn b(self, a: &A) -> B {
   |             +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:85:5
   |
LL | /     fn const_fn_stabilized_before_msrv(byte: u8) {
LL | |
LL | |         byte.is_ascii_digit();
LL | |     }
   | |_____^
   |
help: make the function `const`
   |
LL |     const fn const_fn_stabilized_before_msrv(byte: u8) {
   |     +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:97:1
   |
LL | / fn msrv_1_46() -> i32 {
LL | |
LL | |     46
LL | | }
   | |_^
   |
help: make the function `const`
   |
LL | const fn msrv_1_46() -> i32 {
   | +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:117:1
   |
LL | fn d(this: D) {}
   | ^^^^^^^^^^^^^^^^
   |
help: make the function `const`
   |
LL | const fn d(this: D) {}
   | +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:125:9
   |
LL | /         fn deref_ptr_can_be_const(self) -> usize {
LL | |
LL | |             unsafe { *self.0 as usize }
LL | |         }
   | |_________^
   |
help: make the function `const`
   |
LL |         const fn deref_ptr_can_be_const(self) -> usize {
   |         +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:130:9
   |
LL | /         fn deref_copied_val(self) -> usize {
LL | |
LL | |             *self.1 as usize
LL | |         }
   | |_________^
   |
help: make the function `const`
   |
LL |         const fn deref_copied_val(self) -> usize {
   |         +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:141:5
   |
LL | /     fn union_access_can_be_const() {
LL | |
LL | |         let bar = Bar { val: 1 };
LL | |         let _ = unsafe { bar.val };
LL | |     }
   | |_____^
   |
help: make the function `const`
   |
LL |     const fn union_access_can_be_const() {
   |     +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:149:9
   |
LL |         extern "C" fn c() {}
   |         ^^^^^^^^^^^^^^^^^^^^
   |
help: make the function `const`
   |
LL |         const extern "C" fn c() {}
   |         +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:153:9
   |
LL |         extern fn implicit_c() {}
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: make the function `const`
   |
LL |         const extern fn implicit_c() {}
   |         +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:170:9
   |
LL | /         pub fn new(strings: Vec<String>) -> Self {
LL | |             Self { strings }
LL | |         }
   | |_________^
   |
help: make the function `const`
   |
LL |         pub const fn new(strings: Vec<String>) -> Self {
   |             +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:175:9
   |
LL | /         pub fn empty() -> Self {
LL | |             Self { strings: Vec::new() }
LL | |         }
   | |_________^
   |
help: make the function `const`
   |
LL |         pub const fn empty() -> Self {
   |             +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:186:9
   |
LL | /         pub fn new(text: String) -> Self {
LL | |             let vec = Vec::new();
LL | |             Self { text, vec }
LL | |         }
   | |_________^
   |
help: make the function `const`
   |
LL |         pub const fn new(text: String) -> Self {
   |             +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:205:5
   |
LL |     fn alias_ty_is_projection(bar: <() as FooTrait>::Foo) {}
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: make the function `const`
   |
LL |     const fn alias_ty_is_projection(bar: <() as FooTrait>::Foo) {}
   |     +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:209:5
   |
LL |     extern "C-unwind" fn c_unwind() {}
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: make the function `const`
   |
LL |     const extern "C-unwind" fn c_unwind() {}
   |     +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:211:5
   |
LL |     extern "system" fn system() {}
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: make the function `const`
   |
LL |     const extern "system" fn system() {}
   |     +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:213:5
   |
LL |     extern "system-unwind" fn system_unwind() {}
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: make the function `const`
   |
LL |     const extern "system-unwind" fn system_unwind() {}
   |     +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:215:5
   |
LL |     pub extern "stdcall" fn std_call() {}
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: make the function `const`
   |
LL |     pub const extern "stdcall" fn std_call() {}
   |         +++++

error: this could be a `const fn`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:217:5
   |
LL |     pub extern "stdcall-unwind" fn std_call_unwind() {}
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: make the function `const`
   |
LL |     pub const extern "stdcall-unwind" fn std_call_unwind() {}
   |         +++++

error: aborting due to 26 previous errors

