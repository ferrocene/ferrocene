warning: creating a shared reference to mutable static is discouraged
  --> $DIR/const_refers_to_static_cross_crate.rs:13:14
   |
LL |     unsafe { &static_cross_crate::ZERO }
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
   |
   = note: for more information, see issue #114447 <https://github.com/rust-lang/rust/issues/114447>
   = note: this will be a hard error in the 2024 edition
   = note: this shared reference has lifetime `'static`, but if the static ever gets mutated, or a mutable reference is created, then any further use of this shared reference is Undefined Behavior
   = note: `#[warn(static_mut_refs)]` on by default
help: use `addr_of!` instead to create a raw pointer
   |
LL |     unsafe { addr_of!(static_cross_crate::ZERO) }
   |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0080]: it is undefined behavior to use this value
  --> $DIR/const_refers_to_static_cross_crate.rs:10:1
   |
LL | const SLICE_MUT: &[u8; 1] = {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant
   |
   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.
   = note: the raw bytes of the constant (size: 4, align: 4) {
               ╾ALLOC0<imm>╼                                     │ ╾──╼
           }

error: could not evaluate constant pattern
  --> $DIR/const_refers_to_static_cross_crate.rs:42:9
   |
LL |         SLICE_MUT => true,
   |         ^^^^^^^^^

error[E0080]: it is undefined behavior to use this value
  --> $DIR/const_refers_to_static_cross_crate.rs:17:1
   |
LL | const U8_MUT: &u8 = {
   | ^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant
   |
   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.
   = note: the raw bytes of the constant (size: 4, align: 4) {
               ╾ALLOC0<imm>╼                                     │ ╾──╼
           }

error: could not evaluate constant pattern
  --> $DIR/const_refers_to_static_cross_crate.rs:50:9
   |
LL |         U8_MUT => true,
   |         ^^^^^^

error[E0080]: evaluation of constant value failed
  --> $DIR/const_refers_to_static_cross_crate.rs:25:15
   |
LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static

error: could not evaluate constant pattern
  --> $DIR/const_refers_to_static_cross_crate.rs:60:9
   |
LL |         U8_MUT2 => true,
   |         ^^^^^^^

error[E0080]: evaluation of constant value failed
  --> $DIR/const_refers_to_static_cross_crate.rs:31:15
   |
LL |         match static_cross_crate::OPT_ZERO {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static

error: could not evaluate constant pattern
  --> $DIR/const_refers_to_static_cross_crate.rs:67:9
   |
LL |         U8_MUT3 => true,
   |         ^^^^^^^

warning: skipping const checks
   |
help: skipping check that does not even have a feature gate
  --> $DIR/const_refers_to_static_cross_crate.rs:13:15
   |
LL |     unsafe { &static_cross_crate::ZERO }
   |               ^^^^^^^^^^^^^^^^^^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/const_refers_to_static_cross_crate.rs:13:15
   |
LL |     unsafe { &static_cross_crate::ZERO }
   |               ^^^^^^^^^^^^^^^^^^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/const_refers_to_static_cross_crate.rs:20:15
   |
LL |     unsafe { &static_cross_crate::ZERO[0] }
   |               ^^^^^^^^^^^^^^^^^^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/const_refers_to_static_cross_crate.rs:20:15
   |
LL |     unsafe { &static_cross_crate::ZERO[0] }
   |               ^^^^^^^^^^^^^^^^^^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/const_refers_to_static_cross_crate.rs:20:15
   |
LL |     unsafe { &static_cross_crate::ZERO[0] }
   |               ^^^^^^^^^^^^^^^^^^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/const_refers_to_static_cross_crate.rs:25:17
   |
LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/const_refers_to_static_cross_crate.rs:31:15
   |
LL |         match static_cross_crate::OPT_ZERO {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/const_refers_to_static_cross_crate.rs:31:15
   |
LL |         match static_cross_crate::OPT_ZERO {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/const_refers_to_static_cross_crate.rs:31:15
   |
LL |         match static_cross_crate::OPT_ZERO {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/const_refers_to_static_cross_crate.rs:31:15
   |
LL |         match static_cross_crate::OPT_ZERO {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/const_refers_to_static_cross_crate.rs:31:15
   |
LL |         match static_cross_crate::OPT_ZERO {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to 8 previous errors; 2 warnings emitted

For more information about this error, try `rustc --explain E0080`.
