warning: the feature `effects` is incomplete and may not be safe to use and/or cause compiler crashes
  --> $DIR/call-generic-method-dup-bound.rs:5:30
   |
LL | #![feature(const_trait_impl, effects)]
   |                              ^^^^^^^
   |
   = note: see issue #102090 <https://github.com/rust-lang/rust/issues/102090> for more information
   = note: `#[warn(incomplete_features)]` on by default

error: const `impl` for trait `PartialEq` which is not marked with `#[const_trait]`
  --> $DIR/call-generic-method-dup-bound.rs:9:12
   |
LL | impl const PartialEq for S {
   |            ^^^^^^^^^
   |
   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`
   = note: adding a non-const method body in the future would be a breaking change

error: `~const` can only be applied to `#[const_trait]` traits
  --> $DIR/call-generic-method-dup-bound.rs:20:37
   |
LL | const fn equals_self<T: PartialEq + ~const PartialEq>(t: &T) -> bool {
   |                                     ^^^^^^

error: `~const` can only be applied to `#[const_trait]` traits
  --> $DIR/call-generic-method-dup-bound.rs:20:37
   |
LL | const fn equals_self<T: PartialEq + ~const PartialEq>(t: &T) -> bool {
   |                                     ^^^^^^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: `~const` can only be applied to `#[const_trait]` traits
  --> $DIR/call-generic-method-dup-bound.rs:27:30
   |
LL | const fn equals_self2<T: A + ~const PartialEq>(t: &T) -> bool {
   |                              ^^^^^^

error: `~const` can only be applied to `#[const_trait]` traits
  --> $DIR/call-generic-method-dup-bound.rs:27:30
   |
LL | const fn equals_self2<T: A + ~const PartialEq>(t: &T) -> bool {
   |                              ^^^^^^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error[E0015]: cannot call non-const operator in constant functions
  --> $DIR/call-generic-method-dup-bound.rs:21:5
   |
LL |     *t == *t
   |     ^^^^^^^^
   |
   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants
help: consider further restricting this bound
   |
LL | const fn equals_self<T: PartialEq + ~const PartialEq + ~const std::cmp::PartialEq>(t: &T) -> bool {
   |                                                      ++++++++++++++++++++++++++++

error[E0015]: cannot call non-const fn `<S as PartialEq>::eq` in constant functions
  --> $DIR/call-generic-method-dup-bound.rs:14:15
   |
LL |         !self.eq(other)
   |               ^^^^^^^^^
   |
   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const operator in constant functions
  --> $DIR/call-generic-method-dup-bound.rs:28:5
   |
LL |     *t == *t
   |     ^^^^^^^^
   |
   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants
help: consider further restricting this bound
   |
LL | const fn equals_self2<T: A + ~const PartialEq + ~const std::cmp::PartialEq>(t: &T) -> bool {
   |                                               ++++++++++++++++++++++++++++

error: aborting due to 8 previous errors; 1 warning emitted

For more information about this error, try `rustc --explain E0015`.
