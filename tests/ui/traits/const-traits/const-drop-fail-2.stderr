error: const `impl` for trait `Drop` which is not marked with `#[const_trait]`
  --> $DIR/const-drop-fail-2.rs:39:25
   |
LL | impl<T: ~const A> const Drop for ConstDropImplWithNonConstBounds<T> {
   |                         ^^^^
   |
   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`
   = note: adding a non-const method body in the future would be a breaking change

error: `~const` can only be applied to `#[const_trait]` traits
  --> $DIR/const-drop-fail-2.rs:20:26
   |
LL | const fn check<T: ~const Destruct>(_: T) {}
   |                          ^^^^^^^^

error: `~const` can only be applied to `#[const_trait]` traits
  --> $DIR/const-drop-fail-2.rs:20:26
   |
LL | const fn check<T: ~const Destruct>(_: T) {}
   |                          ^^^^^^^^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error[E0493]: destructor of `T` cannot be evaluated at compile-time
  --> $DIR/const-drop-fail-2.rs:20:36
   |
LL | const fn check<T: ~const Destruct>(_: T) {}
   |                                    ^      - value is dropped here
   |                                    |
   |                                    the destructor for this type cannot be evaluated in constant functions

error[E0015]: cannot call non-const fn `<T as A>::a` in constant functions
  --> $DIR/const-drop-fail-2.rs:41:9
   |
LL |         T::a();
   |         ^^^^^^
   |
   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants
help: add `#![feature(effects)]` to the crate attributes to enable
   |
LL + #![feature(effects)]
   |

error: aborting due to 5 previous errors

Some errors have detailed explanations: E0015, E0493.
For more information about an error, try `rustc --explain E0015`.
