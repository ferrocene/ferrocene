error: const `impl` for trait `Drop` which is not marked with `#[const_trait]`
  --> $DIR/const-drop-fail.rs:19:12
   |
LL | impl const Drop for ConstImplWithDropGlue {
   |            ^^^^
   |
   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`
   = note: adding a non-const method body in the future would be a breaking change

error: `~const` can only be applied to `#[const_trait]` traits
  --> $DIR/const-drop-fail.rs:23:26
   |
LL | const fn check<T: ~const Destruct>(_: T) {}
   |                          ^^^^^^^^

error: `~const` can only be applied to `#[const_trait]` traits
  --> $DIR/const-drop-fail.rs:23:26
   |
LL | const fn check<T: ~const Destruct>(_: T) {}
   |                          ^^^^^^^^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error[E0493]: destructor of `T` cannot be evaluated at compile-time
  --> $DIR/const-drop-fail.rs:23:36
   |
LL | const fn check<T: ~const Destruct>(_: T) {}
   |                                    ^ the destructor for this type cannot be evaluated in constant functions

error[E0080]: evaluation of constant value failed
  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL
   |
   = note: calling non-const function `<NonTrivialDrop as Drop>::drop`
   |
note: inside `std::ptr::drop_in_place::<NonTrivialDrop> - shim(Some(NonTrivialDrop))`
  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL
note: inside `check::<NonTrivialDrop>`
  --> $DIR/const-drop-fail.rs:23:43
   |
LL | const fn check<T: ~const Destruct>(_: T) {}
   |                                           ^
note: inside `_`
  --> $DIR/const-drop-fail.rs:27:23
   |
LL |           const _: () = check($exp);
   |                         ^^^^^^^^^^^
...
LL | / check_all! {
LL | |     NonTrivialDrop,
LL | |     ConstImplWithDropGlue(NonTrivialDrop),
LL | | }
   | |_- in this macro invocation
   = note: this error originates in the macro `check_all` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0080]: evaluation of constant value failed
  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL
   |
   = note: calling non-const function `<NonTrivialDrop as Drop>::drop`
   |
note: inside `std::ptr::drop_in_place::<NonTrivialDrop> - shim(Some(NonTrivialDrop))`
  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL
note: inside `std::ptr::drop_in_place::<ConstImplWithDropGlue> - shim(Some(ConstImplWithDropGlue))`
  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL
note: inside `check::<ConstImplWithDropGlue>`
  --> $DIR/const-drop-fail.rs:23:43
   |
LL | const fn check<T: ~const Destruct>(_: T) {}
   |                                           ^
note: inside `_`
  --> $DIR/const-drop-fail.rs:27:23
   |
LL |           const _: () = check($exp);
   |                         ^^^^^^^^^^^
...
LL | / check_all! {
LL | |     NonTrivialDrop,
LL | |     ConstImplWithDropGlue(NonTrivialDrop),
LL | | }
   | |_- in this macro invocation
   = note: this error originates in the macro `check_all` (in Nightly builds, run with -Z macro-backtrace for more info)

error: aborting due to 6 previous errors

Some errors have detailed explanations: E0080, E0493.
For more information about an error, try `rustc --explain E0080`.
