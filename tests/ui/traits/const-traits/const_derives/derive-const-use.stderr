warning: the feature `effects` is incomplete and may not be safe to use and/or cause compiler crashes
  --> $DIR/derive-const-use.rs:3:76
   |
LL | #![feature(const_trait_impl, const_cmp, const_default_impls, derive_const, effects)]
   |                                                                            ^^^^^^^
   |
   = note: see issue #102090 <https://github.com/rust-lang/rust/issues/102090> for more information
   = note: `#[warn(incomplete_features)]` on by default

error[E0635]: unknown feature `const_cmp`
  --> $DIR/derive-const-use.rs:3:30
   |
LL | #![feature(const_trait_impl, const_cmp, const_default_impls, derive_const, effects)]
   |                              ^^^^^^^^^

error[E0635]: unknown feature `const_default_impls`
  --> $DIR/derive-const-use.rs:3:41
   |
LL | #![feature(const_trait_impl, const_cmp, const_default_impls, derive_const, effects)]
   |                                         ^^^^^^^^^^^^^^^^^^^

error: using `#![feature(effects)]` without enabling next trait solver globally
   |
   = note: the next trait solver must be enabled globally for the effects feature to work correctly
   = help: use `-Znext-solver` to enable

error: const `impl` for trait `Default` which is not marked with `#[const_trait]`
  --> $DIR/derive-const-use.rs:7:12
   |
LL | impl const Default for A {
   |            ^^^^^^^
   |
   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`
   = note: adding a non-const method body in the future would be a breaking change

error: const `impl` for trait `Default` which is not marked with `#[const_trait]`
  --> $DIR/derive-const-use.rs:15:16
   |
LL | #[derive_const(Default, PartialEq)]
   |                ^^^^^^^
   |
   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`
   = note: adding a non-const method body in the future would be a breaking change
   = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)

error: const `impl` for trait `PartialEq` which is not marked with `#[const_trait]`
  --> $DIR/derive-const-use.rs:11:12
   |
LL | impl const PartialEq for A {
   |            ^^^^^^^^^
   |
   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`
   = note: adding a non-const method body in the future would be a breaking change

error: const `impl` for trait `PartialEq` which is not marked with `#[const_trait]`
  --> $DIR/derive-const-use.rs:15:25
   |
LL | #[derive_const(Default, PartialEq)]
   |                         ^^^^^^^^^
   |
   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`
   = note: adding a non-const method body in the future would be a breaking change
   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0080]: evaluation of constant value failed
  --> $DIR/derive-const-use.rs:16:14
   |
LL | #[derive_const(Default, PartialEq)]
   |                ------- in this derive macro expansion
LL | pub struct S((), A);
   |              ^^ calling non-const function `<() as Default>::default`
   |
note: inside `<S as Default>::default`
  --> $DIR/derive-const-use.rs:16:14
   |
LL | #[derive_const(Default, PartialEq)]
   |                ------- in this derive macro expansion
LL | pub struct S((), A);
   |              ^^
note: inside `_`
  --> $DIR/derive-const-use.rs:18:35
   |
LL | const _: () = assert!(S((), A) == S::default());
   |                                   ^^^^^^^^^^^^
   = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)

error: aborting due to 8 previous errors; 1 warning emitted

Some errors have detailed explanations: E0080, E0635.
For more information about an error, try `rustc --explain E0080`.
